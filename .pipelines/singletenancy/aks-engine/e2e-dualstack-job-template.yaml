parameters:
  name: ""
  displayName: ""
  pipelineBuildImage: "$(BUILD_IMAGE)"
  clusterDefinition: ""
  clusterDefinitionCniTypeKey: ""
  clusterDefinitionCniBuildOS: ""
  clusterDefinitionCniBuildExt: ""

stages:
  - stage: ${{ parameters.name }}
    displayName: E2E - ${{ parameters.displayName }}
    dependsOn: 
      - setup
      - build_and_test
    jobs:
      - job: Create_cluster
        displayName: Singletenancy AKS Engine Suite - (${{ parameters.name }})
        timeoutInMinutes: 120
        pool:
          name: $(BUILD_POOL_NAME_DEFAULT)
          demands: 
          - agent.os -equals Linux
          - Role -equals Build
        container:
          image: mcr.microsoft.com/oss/azcu/go-dev:$(GO_DEV_IMAGE_TAG)
        variables:
          GOPATH: "$(Agent.TempDirectory)/go" # Go workspace path
          GOBIN: "$(GOPATH)/bin" # Go binaries path
          acnPath: "$(GOPATH)/src/github.com/Azure/azure-container-networking"
          RESOURCE_GROUP: $[ dependencies.setup.outputs['EnvironmentalVariables.RESOURCE_GROUP'] ]
          Tag: $[ stagedependencies.setup.env.outputs['EnvironmentalVariables.Tag'] ]
          CommitHash: $[ stagedependencies.setup.env.outputs['EnvironmentalVariables.CommitHash'] ]
          StorageID: $[ stagedependencies.setup.env.outputs['EnvironmentalVariables.StorageID'] ]
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: current
              artifactName: clusterdefinitions
              targetPath: $(Pipeline.Workspace)
          - bash: |
              ls -lah
              export CNI_URL=https://$(ARTIFACT_STORAGE).blob.core.windows.net/acn-$(StorageID)/azure-vnet-cni-${{ parameters.clusterDefinitionCniBuildOS }}-amd64-$(Tag)${{ parameters.clusterDefinitionCniBuildExt }}
              export CNI_TYPE=${{ parameters.clusterDefinitionCniTypeKey }}
              echo CNI type is $CNI_TYPE
              echo Tag is $(Tag)
              echo CNI_URL is $CNI_URL
              echo Config: '${{ parameters.clusterDefinition }}'
              cat '${{ parameters.clusterDefinition }}'
              cat '${{ parameters.clusterDefinition }}' | jq --arg cnikey $CNI_TYPE --arg cniurl $CNI_URL '.properties.orchestratorProfile.kubernetesConfig[$cnikey]= $cniurl' > '${{ parameters.clusterDefinition }}'.tmp
              cat '${{ parameters.clusterDefinition }}'.tmp | jq --arg tag $(Tag) '.properties.orchestratorProfile.kubernetesConfig.azureCNIVersion = $tag' > '${{ parameters.clusterDefinition }}'
              mv '${{ parameters.clusterDefinition }}'.tmp '${{ parameters.clusterDefinition }}'
              echo "Running E2E tests against a cluster built with the following API model:"
              cp ${{ parameters.clusterDefinition }} clusterDefinition.json
            displayName: "Configure AKS-Engine Cluster definition"
            workingDirectory: $(Pipeline.Workspace)
          - bash: |
              echo Currently set AKS-Engine Version '$(AKS_ENGINE_VERSION)'
              if [ -z '$(AKS_ENGINE_VERSION)' ]
              then
                echo Found set AKS-Engine version '$(AKS_ENGINE_VERSION)'...
                export aksEVersion='$(AKS_ENGINE_VERSION)'
              else
                echo No AKS-Engine version set, using latest...
                export aksEVersion=$(curl -L -s -H 'Accept: application/json' https://github.com/Azure/aks-engine/releases/latest | sed -e 's/.*"tag_name":"\([^"]*\)".*/\1/')
              fi
              echo Using AKS-Engine version $aksEVersion

              # download binary
              wget https://github.com/Azure/aks-engine/releases/download/$aksEVersion/aks-engine-$aksEVersion-linux-amd64.tar.gz
              mkdir ./workspace

              #extract binary
              tar -zxvf aks-engine-$aksEVersion-linux-amd64.tar.gz -C workspace
              mv ./workspace/aks-engine-*/* ./workspace/

              ./workspace/aks-engine deploy -m $(Pipeline.Workspace)/clusterDefinition.json --location $(AKS_ENGINE_REGION)  -g $(RESOURCE_GROUP) -s $(AKS_ENGINE_SUBSCRIPTION_ID) --client-id $servicePrincipalId --client-secret $servicePrincipalKey --output-directory ./workspace/kubeoutput
              mv ./workspace/kubeoutput/kubeconfig/kubeconfig.* ./workspace/kubeoutput/kubeconfig/kubeconfig.json
            displayName: "create aks-engine cluster"
          - publish: ./workspace/kubeoutput
            artifact: kubeoutput

      - job: Build_kubernetes
        displayName: Build kubernetes upstream
        timeoutInMinutes: 120
        pool:
          name: $(BUILD_POOL_NAME_DEFAULT)
          demands:
            - agent.os -equals Linux
            - Role -equals Build
        container:
            image: mcr.microsoft.com/oss/azcu/go-dev:$(GO_DEV_IMAGE_TAG)
        steps:
          - script: |
              git clone https://github.com/kubernetes/kubernetes.git
            displayName: 'Clone Kubernetes Repo'
          - checkout: self
          - bash: |
              cd kubernetes
              export PATH=$PATH:/usr/local/go/bin/
              make WHAT=test/e2e/e2e.test
            displayName: 'Build Kubernetes e2e.test'
          - publish: $(System.DefaultWorkingDirectory)/kubernetes/_output/local/bin/linux/amd64
            artifact: Test

      - job: Run_test
        displayName: Build kubernetes upstream
        dependsOn: [Create_cluster, Build_kubernetes]
        timeoutInMinutes: 120
        pool:
          name: $(BUILD_POOL_NAME_DEFAULT)
          demands:
            - agent.os -equals Linux
            - Role -equals Build
        container:
          image: mcr.microsoft.com/oss/azcu/go-dev:$(GO_DEV_IMAGE_TAG)
        steps:
        - checkout: none
        - download: current
          artifact: Test
        - download: current
          artifact: kubeoutput
        - bash: |
            chmod +x $(Pipeline.Workspace)/Test/e2e.test
            $(Pipeline.Workspace)/Test/e2e.test --provider=local --ginkgo.focus=""Feature:IPv6DualStack" --ginkgo.skip="SCTP" --kubeconfig=$(Pipeline.Workspace)/kubeoutput/kubeconfig/kubeconfig.json
          displayName: "Run Test Suite"
        - task: AzureCLI@2
          displayName: "Delete Test Cluster Resource Group"
          inputs:
            azureSubscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              echo Deleting $(RESOURCE_GROUP)
              az group delete -n $(RESOURCE_GROUP) --yes
