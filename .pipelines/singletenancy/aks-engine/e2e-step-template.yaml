parameters:
  name: ""
  clusterDefinition: ""
  clusterDefinitionCniTypeKey: ""
  clusterDefinitionCniBuildOS: ""
  clusterDefinitionCniBuildExt: ""
  cniVersion: ""
  npmVersion: ""

steps:
  - checkout: none
  - bash: |
      go version
      go env
      mkdir -p '$(GOBIN)'
      mkdir -p '$(GOPATH)/pkg'
      mkdir -p '$(modulePath)'
      go get github.com/onsi/ginkgo/ginkgo
      go get github.com/onsi/gomega/...

      cd '$(modulePath)'

      # download binary
      wget https://paujohnstorage.blob.core.windows.net/publicstorage/aks-engine-8187da5e1-linux-amd64.tar.gz

      rm -rf ./bin
      mkdir ./bin

      # extract binary
      tar -zxvf aks-engine-8187da5e1-linux-amd64.tar.gz -C bin
      mv ./bin/aks-engine-*/* ./bin/
      chmod 0777 ./bin/aks-engine
      ls -l ./bin
      ./bin/aks-engine version
      echo '##vso[task.prependpath]$(GOBIN)'
      echo '##vso[task.prependpath]$(GOROOT)/bin'
    name: "GoEnv"
    displayName: "Set up the Go environment"

  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: current
      artifactName: clusterdefinitions
      targetPath: "$(modulePath)"
      #buildType: 'current' # Options: current, specific
      #project: # Required when buildType == Specific

  - bash: |
      ls -lah
      cd $(modulePath)
      export CNI_URL=https://$(ARTIFACT_STORAGE).blob.core.windows.net/acn-$(StorageID)/azure-vnet-cni-${{ parameters.clusterDefinitionCniBuildOS }}-amd64-${{ parameters.cniVersion }}${{ parameters.clusterDefinitionCniBuildExt }}
      export CNI_TYPE=${{ parameters.clusterDefinitionCniTypeKey }}
      echo CNI type is $CNI_TYPE
      echo CNI_URL is $CNI_URL
      echo Config: '${{ parameters.clusterDefinition }}'
      cat '${{ parameters.clusterDefinition }}'
      cat '${{ parameters.clusterDefinition }}' | jq --arg cnikey $CNI_TYPE --arg cniurl $CNI_URL '.properties.orchestratorProfile.kubernetesConfig[$cnikey]= $cniurl' > '${{ parameters.clusterDefinition }}'.tmp	
      cat '${{ parameters.clusterDefinition }}'.tmp | jq --arg ver ${{ parameters.cniVersion }} '.properties.orchestratorProfile.kubernetesConfig.azureCNIVersion = $ver' > '${{ parameters.clusterDefinition }}'
      cat '${{ parameters.clusterDefinition }}' | jq --arg ver $IMAGE_REGISTRY/azure-npm:${{ parameters.npmVersion }} '.properties.orchestratorProfile.kubernetesConfig.addons[0].containers[0].image = $ver' > '${{ parameters.clusterDefinition }}'.tmp
      if [ "${{ parameters.Name }}" == "windows_20_22_e2e" ]; then
        if [[ -z $(WS2022_IMG_SUBSCRIPTION) || -z $(WS2022_IMG_VERSION) ]]; then
          echo WS2022 Gallery/Image Subscription and Version not set, using defaults in cniWindows2022.json
        else
          echo Using WS2022 Gallery/Image Subscription: $(WS2022_IMG_SUBSCRIPTION) and Version: $(WS2022_IMG_VERSION)
          cat '${{ parameters.clusterDefinition }}'.tmp | jq --arg subscription $(WS2022_IMG_SUBSCRIPTION) '.properties.windowsProfile.imageReference.subscriptionId = $subscription' > '${{ parameters.clusterDefinition }}'
          cat '${{ parameters.clusterDefinition }}' | jq --arg version $(WS2022_IMG_VERSION) '.properties.windowsProfile.imageReference.version = $version' > '${{ parameters.clusterDefinition }}'.tmp
        fi
      fi
      mv '${{ parameters.clusterDefinition }}'.tmp '${{ parameters.clusterDefinition }}'
      echo "Running E2E tests against a cluster built with the following API model:" 
      cp ${{ parameters.clusterDefinition }} clusterDefinition.json
    displayName: Configure AKS-Engine

  - task: AzureCLI@1
    inputs:
      azureSubscription: $(AKS_ENGINE_SERVICE_CONNECTION)
      scriptLocation: "inlineScript"
      addSpnToEnvironment: true
      workingDirectory: "$(modulePath)"
      inlineScript: |
        export CLIENT_ID=$servicePrincipalId
        export CLIENT_SECRET=$servicePrincipalKey 
        export PATH=$PATH:'$(GOPATH)'
        export CLUSTER_DEFINITION=./clusterDefinition.json
        export ORCHESTRATOR=kubernetes 
        export CREATE_VNET=false 
        export TIMEOUT=20m 
        export TENANT_ID=$(AKS_ENGINE_TENANT_ID) 
        export SUBSCRIPTION_ID=$(AKS_ENGINE_SUBSCRIPTION_ID) 
        export CLEANUP_ON_EXIT=true
        export CLEANUP_IF_FAIL=false
        export REGIONS=$(AKS_ENGINE_REGION) 
        export IS_JENKINS=false 
        export BLOCK_SSH=true
        export DEBUG_CRASHING_PODS=true
        export AZURE_CORE_ONLY_SHOW_ERRORS=True
        RGNAME="kubernetes"$RANDOM
        export RESOURCE_GROUP=$RGNAME
        echo "##vso[task.setvariable variable=RESOURCE_GROUP]$RESOURCE_GROUP"
        echo Cluster Def $CLUSTER_DEFINITION
        cat $CLUSTER_DEFINITION
        make test-kubernetes
    name: DeployAKSEngine
    displayName: Run AKS-Engine E2E Tests
    retryCountOnTaskFailure: 0

  - task: CopyFiles@2
    inputs:
      sourceFolder: "$(modulePath)/_output"
      targetFolder: $(Build.ArtifactStagingDirectory)/${{ parameters.name }}
    condition: always()

  - task: PublishBuildArtifacts@1
    inputs:
      artifactName: ${{ parameters.name }}
      pathtoPublish: "$(Build.ArtifactStagingDirectory)/${{ parameters.name }}"
    condition: always()
