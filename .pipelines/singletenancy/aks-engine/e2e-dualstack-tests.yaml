trigger:
- master

variables:
- name: AZURE_CLUSTER
  value: azure-dualstack
- name: VNET_NAME
  value: dualstack-vnet
jobs:
- job: setup
  displayName: "Configure Test Environment"
  pool:
    name: $(BUILD_POOL_NAME_DEFAULT)
    demands: 
    - agent.os -equals Linux
    - Role -equals Build
  steps:
  - checkout: self
  - script: |
      go version
      go env
      which go
      echo $PATH
      mkdir -p '$(GOBIN)'
      mkdir -p '$(GOPATH)/pkg'
      BUILD_NUMBER=$(Build.BuildNumber)
      RG=kubernetes-$(echo "dualstack-conformance-`date "+%Y-%m-%d-%S"`")
      TAG=$(git describe --tags --always --dirty)-dual-conformance-test
      echo "Resource group: $RG"
      echo "Image tag: $TAG"

      echo "##vso[task.setvariable variable=RESOURCE_GROUP;isOutput=true;]$RG"
      echo "##vso[task.setvariable variable=TAG;isOutput=true;]$TAG"

    name: "EnvironmentalVariables"
    displayName: "Set environmental variables"
    condition: always()

- job: Build_test
  displayName: "Build Kubernetes Test Suite"
  pool:
    name: $(BUILD_POOL_NAME_DEFAULT)
    demands: 
    - agent.os -equals Linux
    - Role -equals Build
  dependsOn: [setup]
  variables:
    GOBIN: "$(GOPATH)/bin" # Go binaries path
    GOPATH: "$(System.DefaultWorkingDirectory)/gopath" # Go workspace path
    RESOURCE_GROUP: $[ dependencies.setup.outputs['EnvironmentalVariables.RESOURCE_GROUP'] ]
    TAG: $[ dependencies.setup.outputs['EnvironmentalVariables.TAG'] ]

  steps:
  - script: |
      rm -rf ./*
    displayName: "Set up OS environment"
  - checkout: self

  - script: git clone https://github.com/kubernetes/kubernetes.git
    displayName: 'Clone Kubernetes Repo'
  - bash: |
      cd kubernetes
      export PATH=$PATH:/usr/local/go/bin/
      make WHAT=test/e2e/e2e.test
    displayName: 'Build Kubernetes e2e.test'
  - publish: $(System.DefaultWorkingDirectory)/kubernetes/_output/local/bin/linux/amd64
    artifact: Test


- job: Create_cluster
  displayName: "Create AKS Engine Cluster"
  pool:
    name: $(BUILD_POOL_NAME_DEFAULT)
    demands: 
    - agent.os -equals Linux
    - Role -equals Build
  dependsOn: [setup]
  variables:
    RESOURCE_GROUP: $[ dependencies.setup.outputs['EnvironmentalVariables.RESOURCE_GROUP'] ]
    TAG: $[ dependencies.setup.outputs['EnvironmentalVariables.TAG'] ]
    StorageID: $[ stagedependencies.setup.env.outputs['EnvironmentalVariables.StorageID'] ]

  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: current
      artifactName: clusterdefinitions
      targetPath: $(Pipeline.Workspace)
   #buildType: 'current' # Options: current, specific
   #project: # Required when buildType == Specific
  - bash: |
     ls -lah
     export CNI_URL=https://$(ARTIFACT_STORAGE).blob.core.windows.net/acn-$(StorageID)/azure-vnet-cni-${{ parameters.clusterDefinitionCniBuildOS }}-amd64-$(Tag)${{ parameters.clusterDefinitionCniBuildExt }}
     export CNI_TYPE=${{ parameters.clusterDefinitionCniTypeKey }}
     echo CNI type is $CNI_TYPE
     echo Tag is $(Tag)
     echo CNI_URL is $CNI_URL
     echo Config: '${{ parameters.clusterDefinition }}'
     cat '${{ parameters.clusterDefinition }}'
     cat '${{ parameters.clusterDefinition }}' | jq --arg cnikey $CNI_TYPE --arg cniurl $CNI_URL '.properties.orchestratorProfile.kubernetesConfig[$cnikey]= $cniurl' > '${{ parameters.clusterDefinition }}'.tmp
     cat '${{ parameters.clusterDefinition }}'.tmp | jq --arg tag $(Tag) '.properties.orchestratorProfile.kubernetesConfig.azureCNIVersion = $tag' > '${{ parameters.clusterDefinition }}'
     mv '${{ parameters.clusterDefinition }}'.tmp '${{ parameters.clusterDefinition }}'
     echo "Running E2E tests against a cluster built with the following API model:"
     cp ${{ parameters.clusterDefinition }} clusterDefinition.json
   displayName: "Configure AKS-Engine Cluster definition"
   workingDirectory: $(Pipeline.Workspace)

  steps:
  - script: |
      sudo rm -rf ./*
      echo Currently set AKS-Engine Version '$(AKS_ENGINE_VERSION)'
      if [ -z '$(AKS_ENGINE_VERSION)' ]
      then
        echo Found set AKS-Engine version '$(AKS_ENGINE_VERSION)'...
        export aksEVersion='$(AKS_ENGINE_VERSION)'
      else
        echo No AKS-Engine version set, using latest...
        export aksEVersion=$(curl -L -s -H 'Accept: application/json' https://github.com/Azure/aks-engine/releases/latest | sed -e 's/.*"tag_name":"\([^"]*\)".*/\1/')
      fi
      echo Using AKS-Engine version $aksEVersion

      # download binary
      wget https://github.com/Azure/aks-engine/releases/download/$aksEVersion/aks-engine-$aksEVersion-linux-amd64.tar.gz
      mkdir ./workspace

      #extract binary
      tar -zxvf aks-engine-$aksEVersion-linux-amd64.tar.gz -C workspace
      mv ./workspace/aks-engine-*/* ./workspace/

      ./workspace/aks-engine deploy -m $(Pipeline.Workspace)/clusterDefinition.json --location $(AKS_ENGINE_REGION)  -g $(RESOURCE_GROUP) -s $(AKS_ENGINE_SUBSCRIPTION_ID) --client-id $servicePrincipalId --client-secret $servicePrincipalKey --output-directory ./workspace/kubeoutput
      mv ./workspace/kubeoutput/kubeconfig/kubeconfig.* ./workspace/kubeoutput/kubeconfig/kubeconfig.json
    displayName: "create aks-engine cluster"
  - publish: ./workspace/kubeoutput
    artifact: kubeoutput


- job: Run_test
  timeoutInMinutes: 10
  displayName: "Run dualstack upstream tests"
  pool:
    name: $(BUILD_POOL_NAME_DEFAULT)
    demands: 
    - agent.os -equals Linux
    - Role -equals Build
  dependsOn: [Create_cluster, Build_test, setup]
  variables:
    RESOURCE_GROUP: $[ dependencies.setup.outputs['EnvironmentalVariables.RESOURCE_GROUP'] ]
    TAG: $[ dependencies.setup.outputs['EnvironmentalVariables.TAG'] ]
  steps:
  - checkout: none
  - download: current
    artifact: Test
  - download: current
    artifact: kubeoutput
  - bash: |
      chmod +x $(Pipeline.Workspace)/Test/e2e.test
      $(Pipeline.Workspace)/Test/e2e.test --provider=local --ginkgo.focus=""Feature:IPv6DualStack" --ginkgo.skip="SCTP" --kubeconfig=$(Pipeline.Workspace)/kubeoutput/kubeconfig/kubeconfig.json
    displayName: "Run Test Suite"

- job: Clean_up
  displayName: "Cleanup"
  pool:
    name: $(BUILD_POOL_NAME_DEFAULT)
    demands: 
    - agent.os -equals Linux
    - Role -equals Build
  condition: always()
  dependsOn: [Run_test, setup]
  variables:
    RESOURCE_GROUP: $[ dependencies.setup.outputs['EnvironmentalVariables.RESOURCE_GROUP'] ]
    TAG: $[ dependencies.setup.outputs['EnvironmentalVariables.TAG'] ]
  steps:
    - checkout: none
    - task: AzureCLI@2
      displayName: "Delete Test Cluster Resource Group"
      inputs:
        azureSubscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo Deleting $(RESOURCE_GROUP)
          az group delete -n $(RESOURCE_GROUP) --yes
