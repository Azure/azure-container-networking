parameters:
  name: ""
  clusterName: ""
  arch: ""
  os: ""
  os_version: ""
  scaleup: ""

steps:
  - bash: |
      go version
      go env
      mkdir -p '$(GOBIN)'
      mkdir -p '$(GOPATH)/pkg'
      mkdir -p '$(modulePath)'
      echo '##vso[task.prependpath]$(GOBIN)'
      echo '##vso[task.prependpath]$(GOROOT)/bin'
    name: "GoEnv"
    displayName: "Set up the Go environment"
  - task: KubectlInstaller@0
    inputs:
      kubectlVersion: latest
  - task: AzureCLI@2
    inputs:
      azureSubscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
      scriptLocation: "inlineScript"
      scriptType: "bash"
      addSpnToEnvironment: true
      # Create a cluster with nodesubnet-cilium-up type. Need to install CNS and Cilium
      inlineScript: |
        set -e
        make -C ./hack/aks set-kubeconf AZCLI=az CLUSTER=${{ parameters.clusterName }}
        kubectl apply -f test/integration/manifests/cns
        kubectl apply -f test/integration/manifests/cnsconfig/overlayconfigmap.yaml
        kubectl create -f test/integration/manifests/ip-masq-agent/ip-masq-agent.yaml --validate=false
        pushd test/integration/manifests/ip-masq-agent/
        kubectl create configmap config-custom.yaml
        kubectl create configmap config-reconcile.yaml
        popd
        kubectl apply -f test/integration/manifests/cilium/v1.16/cilium-agent/files
        kubectl apply -f test/integration/manifests/cilium/v1.16/cilium-operator/files
        kubectl apply -f test/integration/manifests/cilium/v1.16/cilium-config/cilium-config.yaml
        kubectl apply -f test/integration/manifests/cilium/v1.16/cilium-agent/templates/daemonset.yaml
        kubectl apply -f test/integration/manifests/cilium/v1.16/cilium-operator/templates/deployment.yaml
    name: "deployCNI"
    displayName: "Deploy CNI"
  - task: AzureCLI@2
    inputs:
      azureSubscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
      scriptLocation: "inlineScript"
      scriptType: "bash"
      addSpnToEnvironment: true
      inlineScript: |
        set -e
        clusterName=${{ parameters.clusterName }}
        echo "Restarting nodes"
        for val in $(az vmss list -g MC_${clusterName}_${clusterName}_$(REGION_AKS_CLUSTER_TEST) --query "[].name" -o tsv); do
          make -C ./hack/aks restart-vmss AZCLI=az CLUSTER=${clusterName} REGION=$(REGION_AKS_CLUSTER_TEST) VMSS_NAME=${val}
        done
    displayName: "Restart Nodes"
  - script: |
      kubectl get pods -A -o wide
      echo "Deploying test pods"
      cd test/integration/load
      ITERATIONS=2 SCALE_UP=${{ parameters.scaleup }} OS_TYPE=${{ parameters.os }} go test -count 1 -timeout 30m -tags load -run ^TestLoad$
      cd ../../..

      make test-validate-state OS_TYPE=${{ parameters.os }} CNI_TYPE=cniv1

      kubectl delete ns load-test
    displayName: "Validate State"
    retryCountOnTaskFailure: 3
