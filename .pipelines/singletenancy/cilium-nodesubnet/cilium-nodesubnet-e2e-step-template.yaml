parameters:
  name: ""
  clusterName: ""
  scaleup: ""

steps:
  - task: AzureCLI@2
    inputs:
      azureSubscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
      scriptLocation: "inlineScript"
      scriptType: "bash"
      addSpnToEnvironment: true
      displayName: 'Update IP configs'
      inlineScript: |
          set -e
          clusterName=${{ parameters.clusterName }}
          RESOURCE_GROUP="MC_${clusterName}_${clusterName}_$(REGION_AKS_CLUSTER_TEST)"
          VMSS_NAME=$(az vmss list -g "$RESOURCE_GROUP" --query '[0].name' -o tsv)
          if [ -z "$VMSS_NAME" ]; then
              echo "Failed to get VMSS name."
              exit 1
          fi

          vmss_info=$(az vmss show -g "$RESOURCE_GROUP" -n "$VMSS_NAME")

          secondary_configs=()

          network_profile=$(echo "$vmss_info" | jq -r '.virtualMachineProfile.networkProfile')

          if [ "$network_profile" != "null" ]; then
              network_interface_configurations=$(echo "$network_profile" | jq -c '.networkInterfaceConfigurations[]')
              for nic_config in $network_interface_configurations; do
                  primary_ip_config=$(echo "$nic_config" | jq -c '.ipConfigurations[] | select(.primary == true)')

                  if [ ! -z "$primary_ip_config" ]; then
                      for ((i=2; i<=secondary_config_count+1; i++)); do
                          ip_config_name="ipconfig$i"
                          new_ip_config=$(echo "$primary_ip_config" | jq --arg name "$ip_config_name" '.name = $name | .primary = false')
                          secondary_configs+=("$new_ip_config")
                      done
                  fi

                  updated_ip_configs=$(echo "$nic_config" | jq --argjson new_configs "$(printf '%s\n' "${secondary_configs[@]}" | jq -s '.')" '.ipConfigurations += $new_configs')
                  network_profile=$(echo "$network_profile" | jq --argjson updated_nic "$updated_ip_configs" '.networkInterfaceConfigurations |= map(if .name == $updated_nic.name then $updated_nic else . end)')
              done
          fi

          az vmss update -g "$RESOURCE_GROUP" -n "$VMSS_NAME" --set virtualMachineProfile.networkProfile="$network_profile"
          az vmss update-instances -g "$RESOURCE_GROUP" -n "$VMSS_NAME" --instance-ids '*'

  - bash: |
      echo $UID
      sudo rm -rf $(System.DefaultWorkingDirectory)/*
    displayName: "Set up OS environment"

  - checkout: self

  - bash: |
      go version
      go env
      mkdir -p '$(GOBIN)'
      mkdir -p '$(GOPATH)/pkg'
      mkdir -p '$(modulePath)'
      echo '##vso[task.prependpath]$(GOBIN)'
      echo '##vso[task.prependpath]$(GOROOT)/bin'
    name: "GoEnv"
    displayName: "Set up the Go environment"

  - task: KubectlInstaller@0
    inputs:
      kubectlVersion: latest

  - task: AzureCLI@2
    inputs:
      azureSubscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
      scriptLocation: "inlineScript"
      scriptType: "bash"
      addSpnToEnvironment: true
      inlineScript: |
        set -e
        make -C ./hack/aks set-kubeconf AZCLI=az CLUSTER=${{ parameters.clusterName }}
        ls -lah      
        pwd
        kubectl cluster-info
        kubectl get po -owide -A
        echo "install Cilium ${CILIUM_VERSION_TAG}"
        export DIR=${CILIUM_VERSION_TAG%.*}
        echo "installing files from ${DIR}"
        echo "deploy Cilium ConfigMap"
        kubectl apply -f test/integration/manifests/cilium/v${DIR}/cilium-config/cilium-config.yaml
        # Passes Cilium image to daemonset and deployment
        kubectl apply -f test/integration/manifests/cilium/v${DIR}/cilium-agent/files
        kubectl apply -f test/integration/manifests/cilium/v${DIR}/cilium-operator/files

        envsubst '${CILIUM_VERSION_TAG},${CILIUM_IMAGE_REGISTRY}' < test/integration/manifests/cilium/v${DIR}/cilium-agent/templates/daemonset.yaml | kubectl apply -f -
        envsubst '${CILIUM_VERSION_TAG},${CILIUM_IMAGE_REGISTRY}' < test/integration/manifests/cilium/v${DIR}/cilium-operator/templates/deployment.yaml | kubectl apply -f -
        kubectl get po -owide -A
    name: "installCilium"
    displayName: "Install Cilium"

  - template: ../../templates/cilium-cli.yaml

  - script: |
      echo "Start Azilium E2E Tests"
      kubectl get po -owide -A
      sudo -E env "PATH=$PATH" make test-load SCALE_UP=32 OS_TYPE=linux VALIDATE_STATEFILE=true INSTALL_CNS=true INSTALL_CNS_NODESUBNET=true AZURE_IPAM_VERSION=$(make azure-ipam-version) CNS_VERSION=$(make cns-version) CLEANUP=true
    retryCountOnTaskFailure: 3
    name: "aziliumTest"
    displayName: "Run Azilium E2E"

  - script: |
      kubectl get po -owide -A
      echo "Waiting < 2 minutes for cilium to be ready"
      # Ensure Cilium is ready Xm\Xs
      cilium status --wait --wait-duration 2m
    retryCountOnTaskFailure: 3
    name: "CiliumStatus"
    displayName: "Cilium Status"

  - task: AzureCLI@1
    inputs:
      azureSubscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
      scriptLocation: "inlineScript"
      scriptType: "bash"
      addSpnToEnvironment: true
      inlineScript: |
        set -e
        kubectl get po -owide -A
        clusterName=${{ parameters.clusterName }}
        echo "Restarting nodes"
        for val in $(az vmss list -g MC_${clusterName}_${clusterName}_$(REGION_AKS_CLUSTER_TEST) --query "[].name" -o tsv); do
          make -C ./hack/aks restart-vmss AZCLI=az CLUSTER=${clusterName} REGION=$(REGION_AKS_CLUSTER_TEST) VMSS_NAME=${val}
        done
    displayName: "Restart Nodes"

  - task: AzureCLI@1
    inputs:
      azureSubscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
      scriptLocation: "inlineScript"
      scriptType: "bash"
      addSpnToEnvironment: true
      inlineScript: |
        cd test/integration/load

        # Scale Cluster Up/Down to confirm functioning CNS
        ITERATIONS=2 SCALE_UP=${{ parameters.scaleup }} OS_TYPE=linux go test -count 1 -timeout 30m -tags load -run ^TestLoad$
        kubectl get pods -owide -A

        cd ../../..
        echo "Validating Node Restart"
        make test-validate-state OS_TYPE=linux RESTART_CASE=true
        kubectl delete ns load-test
    displayName: "Validate Node Restart"
    retryCountOnTaskFailure: 3

  - script: |
      echo "Run Cilium Connectivity Tests"
      cilium status
      cilium connectivity test --connect-timeout 4s --request-timeout 30s --test '!pod-to-pod-encryption,!node-to-node-encryption' --force-deploy
      ns=`kubectl get ns | grep cilium-test | awk '{print $1}'`
      echo "##vso[task.setvariable variable=ciliumNamespace]$ns"
    retryCountOnTaskFailure: 3
    name: "ciliumConnectivityTests"
    displayName: "Run Cilium Connectivity Tests"

  - script: |
      echo "validate pod IP assignment and check systemd-networkd restart"
      kubectl get pod -owide -A
      # Deleting echo-external-node deployment until cilium version matches TODO. https://github.com/cilium/cilium-cli/issues/67 is addressing the change.
      # Saves 17 minutes
      kubectl delete deploy -n $(ciliumNamespace) echo-external-node
      make test-validate-state
      echo "delete cilium connectivity test resources and re-validate state"
      kubectl delete ns $(ciliumNamespace)
      kubectl get pod -owide -A
      make test-validate-state
    name: "validatePods"
    displayName: "Validate Pods"

  - script: |
      echo "Run wireserver and metadata connectivity Tests"
      bash test/network/wireserver_metadata_test.sh
    retryCountOnTaskFailure: 3
    name: "WireserverMetadataConnectivityTests"
    displayName: "Run Wireserver and Metadata Connectivity Tests"

  - script: |
      cd hack/scripts
      chmod +x async-delete-test.sh
      ./async-delete-test.sh
      if ! [ -z $(kubectl -n kube-system get ds  azure-cns | grep non-existing) ]; then
        kubectl -n kube-system patch daemonset azure-cns --type json -p='[{"op": "remove", "path": "/spec/template/spec/nodeSelector/non-existing"}]'
      fi
    name: "testAsyncDelete"
    displayName: "Verify Async Delete when CNS is down"
