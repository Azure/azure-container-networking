parameters:
  name: ""
  clusterName: ""
  os: ""
  scaleup: ""

steps:
  - task: KubectlInstaller@0
    inputs:
      kubectlVersion: latest

  - task: AzureCLI@2
    displayName: "Set Kubeconfig"
    env:
      AZCLI: az
      CLUSTER: ${{ parameters.clusterName }}
    inputs:
      azureSubscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
      scriptLocation: "inlineScript"
      scriptType: "bash"
      addSpnToEnvironment: true
      inlineScript: |
        set -e
        make -C ./hack/aks set-kubeconf

  - ${{ if eq(parameters.os, 'linux') }}:
    - script: |
        echo "Start Integration Tests on Overlay Cluster"
        kubectl get po -owide -A
        sudo -E env "PATH=$PATH" make test-load AZURE_IPAM_VERSION=$(make azure-ipam-version) CNS_VERSION=$(make cns-version) CNI_VERSION=$(make cni-version)
      retryCountOnTaskFailure: 2
      displayName: "Run CNS Integration Tests on AKS Overlay"
      env:
        SCALE_UP: 32
        OS_TYPE: linux
        CNI_TYPE: cniv2
        VALIDATE_STATEFILE: true
        INSTALL_CNS: true
        INSTALL_AZURE_CNI_OVERLAY: true
        VALIDATE_V4OVERLAY: true
        CLEANUP: true

    - task: AzureCLI@2
      displayName: "Restart Nodes"
      env:
        AZCLI: az
        CLUSTER: ${{ parameters.clusterName }}
        SCALE_UP: ${{ coalesce(parameters.scaleup, 32) }}
        RESOURCE_GROUP: "MC_${{ parameters.clusterName }}_${{ parameters.clusterName }}_$(REGION_AKS_CLUSTER_TEST)"
        REGION: $(REGION_AKS_CLUSTER_TEST)
      inputs:
        azureSubscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
        scriptLocation: "inlineScript"
        scriptType: "bash"
        addSpnToEnvironment: true
        inlineScript: |
          set -e
          kubectl get po -owide -A
          echo "Restarting nodes"
          for val in $(az vmss list -g "$RESOURCE_GROUP" --query "[].name" -o tsv); do
            make -C ./hack/aks restart-vmss VMSS_NAME=${val}
          done

    - task: AzureCLI@2
      displayName: "Validate Node Restart"
      retryCountOnTaskFailure: 3
      env:
        ITERATIONS: 2
        SCALE_UP: ${{ parameters.scaleup }}
        OS_TYPE: linux
        RESTART_CASE: true
        CNI_TYPE: cniv2
      inputs:
        azureSubscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
        scriptLocation: "inlineScript"
        scriptType: "bash"
        addSpnToEnvironment: true
        inlineScript: |
          set -e

          pushd test/integration/load
            # Scale Cluster Up/Down to confirm functioning CNS
            go test -count 1 -timeout 30m -tags load -run ^TestLoad$
            kubectl get pods -owide -A
          popd

          echo "Validating Node Restart"
          make test-validate-state
          kubectl delete ns load-test

    - script: |
        echo "Run wireserver and metadata connectivity Tests"
        bash test/network/wireserver_metadata_test.sh
      retryCountOnTaskFailure: 3
      displayName: "Run Wireserver and Metadata Connectivity Tests"

  - ${{ if eq(parameters.os, 'windows') }}:
    - script: |
        nodeList=`kubectl get node -owide | grep Windows | awk '{print $1}'`
        for node in $nodeList; do
            taint=`kubectl describe node $node | grep Taints | awk '{print $2}'`
            if [ $taint == "node.cloudprovider.kubernetes.io/uninitialized=true:NoSchedule" ]; then
                kubectl taint nodes $node node.cloudprovider.kubernetes.io/uninitialized=true:NoSchedule-
            fi
        done
        sudo -E env "PATH=$PATH" make test-load CNS_VERSION=$(make cns-version) CNI_VERSION=$(make cni-version)
      displayName: "Windows v4Overlay ControlPlane Scale Tests"
      retryCountOnTaskFailure: 2
      env:
        SCALE_UP: 32
        OS_TYPE: windows
        CNI_TYPE: cniv2
        VALIDATE_STATEFILE: true
        INSTALL_CNS: true
        INSTALL_AZURE_CNI_OVERLAY: true
        VALIDATE_V4OVERLAY: true
        CLEANUP: true

    - script: |
        echo "IPv4 Overlay DataPath Test"
        cd test/integration/datapath
        sudo -E env "PATH=$PATH" go test -count=1 datapath_windows_test.go -timeout 3m -tags connection -restartKubeproxy true -run ^TestDatapathWin$
      displayName: "Windows v4Overlay Datapath Tests"
      retryCountOnTaskFailure: 3

    - task: AzureCLI@2
      displayName: "Restart Nodes"
      env:
        AZCLI: az
        CLUSTER: ${{ parameters.clusterName }}
        SCALE_UP: ${{ coalesce(parameters.scaleup, 32) }}
        RESOURCE_GROUP: "MC_${{ parameters.clusterName }}_${{ parameters.clusterName }}_$(REGION_AKS_CLUSTER_TEST)"
        REGION: $(REGION_AKS_CLUSTER_TEST)
      inputs:
        azureSubscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
        scriptLocation: "inlineScript"
        scriptType: "bash"
        addSpnToEnvironment: true
        inlineScript: |
          set -e
          kubectl get po -owide -A
          echo "Restarting nodes"
          for val in $(az vmss list -g "$RESOURCE_GROUP" --query "[].name" -o tsv); do
            make -C ./hack/aks restart-vmss VMSS_NAME=${val}
          done

    - task: AzureCLI@2
      displayName: "Validate Node Restart"
      retryCountOnTaskFailure: 3
      env:
        ITERATIONS: 2
        SCALE_UP: ${{ parameters.scaleup }}
        OS_TYPE: windows
        RESTART_CASE: true
        CNI_TYPE: cniv2
      inputs:
        azureSubscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
        scriptLocation: "inlineScript"
        scriptType: "bash"
        addSpnToEnvironment: true
        inlineScript: |
          set -e

          pushd test/integration/load
            # Scale Cluster Up/Down to confirm functioning CNS
            go test -count 1 -timeout 30m -tags load -run ^TestLoad$
            kubectl get pods -owide -A
          popd

          echo "Validating Node Restart"
          make test-validate-state
          kubectl delete ns load-test
