parameters:
  name: ""
  clusterName: ""
  arch: ""
  os: ""
  os_version: ""
  scaleup: ""

steps:
  - task: KubectlInstaller@0
    inputs:
      kubectlVersion: latest

  - task: AzureCLI@2
    displayName: "Deploy CNI"
    env:
      AZCLI: az
      CLUSTER: ${{ parameters.clusterName }}
      OS: ${{ parameters.os }}
      ARCH: ${{ parameters.arch }}
      OS_VERSION: linux
    inputs:
      azureSubscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
      scriptLocation: "inlineScript"
      scriptType: "bash"
      addSpnToEnvironment: true
      inlineScript: |
        set -e
        make -C ./hack/aks set-kubeconf
        echo "Upload CNI"
        echo "Deploying on Linux nodes"
        if [ "$OS" == "windows" ]; then
          export CNI_IMAGE=$(make cni-image-name-and-tag OS='linux')
          echo "CNI image: $CNI_IMAGE"
          envsubst '${CNI_IMAGE}' < ./test/integration/manifests/cni/cni-installer-v1.yaml | kubectl apply -f -
          kubectl rollout status daemonset/azure-cni -n kube-system
          echo "Deploying on windows nodes"
          export CNI_IMAGE=$( make cni-image-name-and-tag OS='windows')
          echo "CNI image: $CNI_IMAGE"
          envsubst '${CNI_IMAGE}' < ./test/integration/manifests/cni/cni-installer-v1-windows.yaml | kubectl apply -f -
          kubectl rollout status daemonset/azure-cni-windows -n kube-system
        else
          export CNI_IMAGE=$(make cni-image-name-and-tag)
          echo "CNI image: $CNI_IMAGE"
          envsubst '${CNI_IMAGE}' < ./test/integration/manifests/cni/cni-installer-v1.yaml | kubectl apply -f -
          kubectl rollout status daemonset/azure-cni -n kube-system
        fi

  - task: AzureCLI@2
    displayName: "Restart Nodes"
    env:
      AZCLI: az
      CLUSTER: ${{ parameters.clusterName }}
      RESOURCE_GROUP: "MC_${{ parameters.clusterName }}_${{ parameters.clusterName }}_$(REGION_AKS_CLUSTER_TEST)"
      REGION: $(REGION_AKS_CLUSTER_TEST)
    inputs:
      azureSubscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
      scriptLocation: "inlineScript"
      scriptType: "bash"
      addSpnToEnvironment: true
      inlineScript: |
        set -e
        echo "Restarting nodes"
        for val in $(az vmss list -g "$RESOURCE_GROUP" --query "[].name" -o tsv); do
          make -C ./hack/aks restart-vmss VMSS_NAME=${val}
        done

  - script: |
      set -e

      kubectl get pods -A -o wide
      pushd test/integration/load
        echo "Deploying test pods"
        go test -count 1 -timeout 30m -tags load -run ^TestLoad$
      popd

      make test-validate-state
      kubectl delete ns load-test
    displayName: "Validate State"
    retryCountOnTaskFailure: 3
    env:
      ITERATIONS: 2
      SCALE_UP: ${{ parameters.scaleup }}
      OS_TYPE: ${{ parameters.os }}
      RESTART_CASE: true
      CNI_TYPE: cniv1
