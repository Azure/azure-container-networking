parameters:
  name: ""
  clusterName: ""
  arch: ""
  os: ""
  os_version: ""
  scaleup: ""

steps:
  - bash: |
      go version
      go env
      mkdir -p '$(GOBIN)'
      mkdir -p '$(GOPATH)/pkg'
      mkdir -p '$(modulePath)'
      echo '##vso[task.prependpath]$(GOBIN)'
      echo '##vso[task.prependpath]$(GOROOT)/bin'
    name: "GoEnv"
    displayName: "Set up the Go environment"
  - task: KubectlInstaller@0
    inputs:
      kubectlVersion: latest
  - task: AzureCLI@2
    inputs:
      azureSubscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
      scriptLocation: "inlineScript"
      scriptType: "bash"
      addSpnToEnvironment: true
      inlineScript: |
        set -e
        make -C ./hack/aks set-kubeconf AZCLI=az CLUSTER=${{ parameters.clusterName }}
        echo "Upload CNI"
        export CNI_VERSION=$(make cni-version)
        envsubst < ./test/integration/manifests/cni/cni-installer.yaml | kubectl apply -f -
        kubectl rollout status daemonset/azure-cni -n kube-system
        kubectl rollout status daemonset/azure-cni-windows -n kube-system
    name: "UploadCni"
    displayName: "Upload CNI"
  - task: AzureCLI@2
    inputs:
      azureSubscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
      scriptLocation: "inlineScript"
      scriptType: "bash"
      addSpnToEnvironment: true
      inlineScript: |
        set -e
        clusterName=${{ parameters.clusterName }}
        echo "Restarting nodes"
        for val in $(az vmss list -g MC_${clusterName}_${clusterName}_$(REGION_AKS_CLUSTER_TEST) --query "[].name" -o tsv); do
          make -C ./hack/aks restart-vmss AZCLI=az CLUSTER=${clusterName} REGION=$(REGION_AKS_CLUSTER_TEST) VMSS_NAME=${val}
        done
    displayName: "Restart Nodes"
  - script: |
      kubectl get pods -A -o wide
      echo "Deploying test pods"
      cd test/integration/load
      go test -count 1 -timeout 30m -tags load -run ^TestLoad$ -tags=load -iterations=2 -scaleup=${{ parameters.scaleup }} -os=${{ parameters.os }}
      cd ../../..
      # Remove this once we have cniv1 support for validating the test cluster
      echo "Validate State skipped for linux cniv1 for now"
      if [ "${{parameters.os}}" == "windows" ]; then
        make test-validate-state OS=${{ parameters.os }}
      fi
      kubectl delete ns load-test
    displayName: "Validate State"
    retryCountOnTaskFailure: 3


