parameters:
  name: ""
  clusterType: ""
  clusterName: ""
  nodeCount: ""
  vmSize: ""
  windowsVMSize: ""
  k8sVersion: ""
  version: ""
  os: ""
  windowsOsSku: ""
  cniVersion: ""
  os_version: ""

steps:
  - bash: |
      go version
      go env
      mkdir -p '$(GOBIN)'
      mkdir -p '$(GOPATH)/pkg'
      mkdir -p '$(modulePath)'
      echo '##vso[task.prependpath]$(GOBIN)'
      echo '##vso[task.prependpath]$(GOROOT)/bin'
    name: "GoEnv"
    displayName: "Set up the Go environment"
  - task: AzureCLI@1
    inputs:
      azureSubscription: $(AZURE_TEST_AGENT_SERVICE_CONNECTION)
      scriptLocation: "inlineScript"
      scriptType: "bash"
      addSpnToEnvironment: true
      inlineScript: |
        mkdir -p ~/.kube/
        echo "Create AKS cluster"
        make -C ./hack/aks azcfg AZCLI=az REGION=$(REGION_AKS_CLUSTER_TEST)
        make -C ./hack/aks ${{ parameters.clusterType }} AZCLI=az REGION=$(REGION_AKS_CLUSTER_TEST) SUB=$(SUB_AZURE_NETWORK_AGENT_TEST) CLUSTER=${{ parameters.clusterName }}-$(make revision) K8S_VER=${{ parameters.k8sVersion }} \ 
          WINDOWS_OS_SKU=${{ parameters.windowsOsSku }} WINDOWS_USERNAME=${WINDOWS_USERNAME} WINDOWS_PASSWORD=${WINDOWS_PASSWORD}
        echo "Cluster successfully created"
    displayName: Create test cluster
  - script: |
      echo "Upload CNI"
      if [ "${{parameters.os}}" == "windows" ]; then
        export DROP_GZ_URL=$( make cni-dropgz-image-name-and-tag OS='linux' ARCH=${{ parameters.arch }} CNI_DROPGZ_VERSION=${{ parameters.version }})
        envsubst < ./test/integration/manifests/cni/cni-installer-v1.yaml | kubectl apply -f -
        kubectl rollout status daemonset/azure-cni -n kube-system
        export CNI_IMAGE=$(make cni-plugin-image-name-and-tag OS=${{ parameters.os }} ARCH=${{ parameters.arch }} os_version=${{ parameters.os_version }} CNI_VERSION=${{ parameters.cniVersion }})
        envsubst < ./hack/manifests/windows-update.yaml | kubectl apply -f -
        kubectl rollout status daemonset/azure-cni-windows -n kube-system
      else
        export DROP_GZ_URL=$( make cni-dropgz-image-name-and-tag OS=${{ parameters.os }} ARCH=${{ parameters.arch }} CNI_DROPGZ_VERSION=${{ parameters.version }})
        envsubst < ./test/integration/manifests/cni/cni-installer-v1.yaml | kubectl apply -f -
        kubectl rollout status daemonset/azure-cni -n kube-system
      fi
    name: "UploadCni"
    displayName: "Upload CNI"
  - task: AzureCLI@2
    inputs:
      azureSubscription: $(AZURE_TEST_AGENT_SERVICE_CONNECTION)
      scriptLocation: "inlineScript"
      scriptType: "bash"
      addSpnToEnvironment: true
      inlineScript: |
        echo "Skipping Deleting cluster"
        # make -C ./hack/aks azcfg AZCLI=az REGION=$(REGION_AKS_CLUSTER_TEST)
        # make -C ./hack/aks down AZCLI=az REGION=$(REGION_AKS_CLUSTER_TEST) SUB=$(SUB_AZURE_NETWORK_AGENT_TEST) CLUSTER=${{ parameters.clusterName }}-$(make revision)
        echo "Cluster and resources down"
    name: "Cleanupcluster"
    displayName: "Cleanup cluster"
    condition: always()
