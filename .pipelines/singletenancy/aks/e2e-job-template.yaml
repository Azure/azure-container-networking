parameters:
  name: ""
  displayName: ""
  arch: ""
  os: ""
  clusterType: ""
  clusterName: ""
  vmSize: ""
  k8sVersion: ""
  os_version: ""
  scaleup: ""
  dependsOn: ""

stages:
  - stage: ${{ parameters.clusterName }}
    displayName: Create Cluster - ${{ parameters.displayName }}
    dependsOn:
      - ${{ parameters.dependsOn }}
      - setup
    pool:
      name: $(BUILD_POOL_NAME_DEFAULT)
    variables:
      commitID: $[ stagedependencies.setup.env.outputs['EnvironmentalVariables.commitID'] ]
    jobs:
      - template: ../../templates/create-cluster.yaml
        parameters:
          name: ${{ parameters.name }}
          displayName: ${{ parameters.displayName }}
          clusterType: ${{ parameters.clusterType }}
          clusterName: ${{ parameters.clusterName }}-$(commitID)
          vmSize: ${{ parameters.vmSize }}
          vmSizeWin: ${{ parameters.vmSize }} # Matching linux vmSize
          k8sVersion: ${{ parameters.k8sVersion }}
          dependsOn: ${{ parameters.dependsOn }}
          os: ${{ parameters.os }}
          region: $(REGION_AKS_CLUSTER_TEST)

  - stage: ${{ parameters.name }}
    displayName: E2E - ${{ parameters.displayName }}
    variables:
      GOPATH: "$(Agent.TempDirectory)/go" # Go workspace path
      GOBIN: "$(GOPATH)/bin" # Go binaries path
      modulePath: "$(GOPATH)/src/github.com/Azure/azure-container-networking"
      commitID: $[ stagedependencies.setup.env.outputs['EnvironmentalVariables.commitID'] ]
    dependsOn:
    - setup
    - publish
    - ${{ parameters.clusterName }}
    pool:
      name: $(BUILD_POOL_NAME_DEFAULT)
    jobs:
      - job: ${{ parameters.name }}
        displayName: Singletenancy AKS - (${{ parameters.name }})
        timeoutInMinutes: 120
        continueOnError: true
        pool:
          name: $(BUILD_POOL_NAME_DEFAULT)
          demands:
          - agent.os -equals Linux
          - Role -equals $(CUSTOM_E2E_ROLE)
        steps:
          - template: e2e-step-template.yaml
            parameters:
              name: ${{ parameters.name }}
              clusterName: ${{ parameters.clusterName }}-$(commitID)
              arch: ${{ parameters.arch }}
              os: ${{ parameters.os }}
              os_version: ${{ parameters.os_version }}
              scaleup: ${{ parameters.scaleup }}

      - job: warningHandler
        displayName: "Handle E2E Warning"
        dependsOn: ${{ parameters.name }}
        condition: eq(dependencies.${{ parameters.name }}.result, 'SucceededWithIssues')
        pool:
          name: $(BUILD_POOL_NAME_DEFAULT)
          demands:
          - agent.os -equals Linux
          - Role -equals $(CUSTOM_E2E_ROLE)
        steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
              scriptLocation: "inlineScript"
              scriptType: "bash"
              addSpnToEnvironment: true
              inlineScript: |
                  make -C ./hack/aks set-kubeconf AZCLI=az CLUSTER=${{ parameters.clusterName }}
            displayName: Set Up Kubeconfig
            condition: always()
            continueOnError: true 
          - ${{ if eq(parameters.os, 'linux') }}:
            # if the cni logs contains "Initializing HTTP client with connection timeout" it is a known issue and we skip
            - script: |
                cd hack/scripts
                acnLogs=$(System.DefaultWorkingDirectory)/${{ parameters.clusterName }}_check_common_issues
                acnLogs=$acnLogs cni=cniv1 bash collect-linux-logs.sh
                bash check-cni-log-contents.sh "$acnLogs" "azure-vnet*.log" "Initializing HTTP client with connection timeout"
              displayName: Fail if known linux issue not found
              condition: always()
          - ${{ if eq(parameters.os, 'windows') }}:
            - script: |
                exit 1
              displayName: Fail if known windows issue not found
              condition: always()
          

      - template: ../../cni/k8s-e2e/k8s-e2e-job-template.yaml
        parameters:
          sub: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
          clusterName: ${{ parameters.clusterName }}-$(commitID)
          os: ${{ parameters.os }}
          datapath: true
          dns: true
          portforward: true
          hybridWin: true
          service: true
          hostport: true
          dependsOn: ${{ parameters.name }}

      - job: failedE2ELogs
        displayName: "Failure Logs"
        dependsOn:
          - ${{ parameters.name }}
          - cni_${{ parameters.os }}
        condition: always()
        steps:
          - template: ../../templates/log-template.yaml
            parameters:
              clusterName: ${{ parameters.clusterName }}-$(commitID)
              os: ${{ parameters.os }}
              cni: cniv1
