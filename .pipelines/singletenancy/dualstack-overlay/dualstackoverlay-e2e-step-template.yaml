parameters:
  name: ""
  testDropgz: ""
  clusterName: ""
  cni: "dualstack"

steps:
  - bash: |
      go version
      go env
      mkdir -p '$(GOBIN)'
      mkdir -p '$(GOPATH)/pkg'
      mkdir -p '$(modulePath)'
      echo '##vso[task.prependpath]$(GOBIN)'
      echo '##vso[task.prependpath]$(GOROOT)/bin'
    name: "GoEnv"
    displayName: "Set up the Go environment"

  - task: AzureCLI@2
    inputs:
      azureSubscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
      scriptLocation: "inlineScript"
      scriptType: "bash"
      addSpnToEnvironment: true
      inlineScript: |
        set -e
        make -C ./hack/aks set-kubeconf AZCLI=az CLUSTER=${{ parameters.clusterName }}
        ls -lah
        pwd
        echo "installing kubectl"
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        kubectl cluster-info
        kubectl get po -owide -A
    retryCountOnTaskFailure: 3
    name: "installKubectl"
    displayName: "Install Kubectl"

  - ${{ if eq( parameters['testDropgz'], true) }}:
      - script: |
          echo "##vso[task.setvariable variable=dropgzVersion]$(make cni-dropgz-test-version)"
        name: dropgzTestVersion
        displayName: "Dropgz Test Version"
  - ${{ else }}:
      - script: |
          echo "##vso[task.setvariable variable=dropgzVersion]$(make cni-dropgz-version)"
        name: dropgzVersion
        displayName: "Dropgz Version"

  - script: |
      echo "deploy ip-masq-agent for overlay"
      kubectl create -f test/integration/manifests/ip-masq-agent/ip-masq-agent.yaml --validate=false
      cd test/integration/manifests/ip-masq-agent/
      kubectl create configmap config-custom.yaml
      cd ../../../..
      kubectl cluster-info
      kubectl get node
      sudo -E env "PATH=$PATH" make test-integration CNS_VERSION=$(make cns-version) CNI_DROPGZ_VERSION=$(dropgzVersion) INSTALL_CNS=true INSTALL_DUALSTACK_OVERLAY=true TEST_DROPGZ=${{ parameters.testDropgz }}
      kubectl get po -owide -A
    retryCountOnTaskFailure: 3
    name: "integrationTest"
    displayName: "Run CNS Integration Tests on AKS DualStack Overlay"

  - script: |
      set -e
      cd test/integration/load
      echo "DualStack Overlay Linux control plane Node properties test"
      sudo CNI_TYPE=dualstack go test -timeout 30m -tags load -run ^TestDualStackProperties$
      echo "DualStack Overlay Linux control plane Load test"
      sudo go test -timeout 30m -tags load -run ^TestLoad$
      echo "DualStack Overlay Linux control plane CNS validation test"
      sudo CNI_TYPE=dualstack go test -timeout 30m -tags load -run ^TestValidateState$
      cd ../datapath
      echo "Dualstack Overlay Linux datapath IPv6 test"
      sudo go test -count=1 datapath_linux_test.go -timeout 3m -tags connection -run ^TestDatapathLinux$ -tags=connection,integration -isDualStack=true
      echo "Dualstack Overlay Linux datapath IPv4 test"
      sudo go test -count=1 datapath_linux_test.go -timeout 3m -tags connection -run ^TestDatapathLinux$ -tags=connection,integration
      echo "cleaning up load-test namespace"
      kubectl delete ns load-test
    retryCountOnTaskFailure: 3
    name: "DualStack_Overlay_Linux_Tests"
    displayName: "DualStack Overlay Linux Tests"

  - task: AzureCLI@1
    inputs:
      azureSubscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
      scriptLocation: "inlineScript"
      scriptType: "bash"
      addSpnToEnvironment: true
      inlineScript: |
        set -e
        clusterName=${{ parameters.clusterName }}
        echo "Restarting nodes"
        for val in $(az vmss list -g MC_${clusterName}_${clusterName}_$(REGION_DUALSTACKOVERLAY_CLUSTER_TEST) --query "[].name" -o tsv); do
          make -C ./hack/aks restart-vmss AZCLI=az CLUSTER=${clusterName} REGION=$(REGION_DUALSTACKOVERLAY_CLUSTER_TEST) VMSS_NAME=${val}
        done
    displayName: "Restart Nodes"

  - task: AzureCLI@1
    inputs:
      azureSubscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
      scriptLocation: "inlineScript"
      scriptType: "bash"
      addSpnToEnvironment: true
      inlineScript: |
        cd test/integration/load
        clusterName=${{ parameters.clusterName }}
        make -C ./hack/aks set-kubeconf AZCLI=az CLUSTER=${clusterName}
        make -C ./hack/aks azcfg AZCLI=az REGION=$(REGION_DUALSTACKOVERLAY_CLUSTER_TEST)
        kubectl get pods -A
        echo "Validating Node Restart"
        sudo CNI_TYPE=dualstack RESTART_CASE=true go test -timeout 30m -tags load -run ^TestValidateState$
    displayName: "Validate Node Restart"
    retryCountOnTaskFailure: 3

  - script: |
      echo "validate pod IP assignment before CNS restart"
      kubectl get pod -owide -A
      echo "validate pod state before CNS restarts"
      cd test/integration/load
      sudo CNI_TYPE=dualstack go test -timeout 30m -tags load -run ^TestValidateState$
      kubectl rollout restart ds azure-cns -n kube-system
      kubectl rollout status ds azure-cns -n kube-system
      kubectl get pod -owide -A
      echo "validate pods after CNS restarts"
      sudo CNI_TYPE=dualstack go test -timeout 30m -tags load -run ^TestValidateState$
    name: "restartCNS_ValidatePodState"
    displayName: "Restart CNS and Validate Pod State"
    retryCountOnTaskFailure: 3

  - task: AzureCLI@2
    inputs:
      azureSubscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
      scriptLocation: "inlineScript"
      scriptType: "bash"
      addSpnToEnvironment: true
      inlineScript: |
        set -e
        make -C ./hack/aks windows-nodepool-up AZCLI=az SUB=$(SUB_AZURE_NETWORK_AGENT_BUILD_VALIDATIONS) CLUSTER=${{ parameters.clusterName }}
        echo "Windows nodes have been successfully added to DualStack Overlay Cluster"
        kubectl cluster-info
        kubectl get node -owide
        kubectl get po -owide -A
    name: "Add_Windows_Node"
    displayName: "Add windows node"

  - script: |
      nodeList=`kubectl get node -owide | grep Windows | awk '{print $1}'`
      for node in $nodeList; do
          taint=`kubectl describe node $node | grep Taints | awk '{print $2}'`
          if [ $taint == "node.cloudprovider.kubernetes.io/uninitialized=true:NoSchedule" ]; then
              kubectl taint nodes $node node.cloudprovider.kubernetes.io/uninitialized=true:NoSchedule-
          fi
      done
      CNS=$(make cns-version)
      sudo -E env "PATH=$PATH" make test-load SCALE_UP=32 OS_TYPE=windows CNI_TYPE=cniv2 VALIDATE_STATEFILE=true INSTALL_CNS=true INSTALL_DUALSTACK_OVERLAY=true VALIDATE_DUALSTACK=true CNS_VERSION=${CNS} CNI_DROPGZ_VERSION=$(dropgzVersion) TEST_DROPGZ=${{ parameters.testDropgz }} CLEANUP=true
    name: "WindowsDualStackOverlayControlPlaneScaleTests"
    displayName: "Windows DualStack Overlay ControlPlane Scale Tests"
    retryCountOnTaskFailure: 3

  - script: |
      echo "DualStack Overlay DataPath Test"
      cd test/integration/datapath
      sudo -E env "PATH=$PATH" go test -count=1 datapath_windows_test.go -timeout 3m -tags connection -restartKubeproxy true -run ^TestDatapathWin$
    name: "WindowsDualStackOverlayDatapathTests"
    displayName: "Windows DaulStack Overlay Datapath Tests"
    retryCountOnTaskFailure: 3
