parameters:
  name: ""
  clusterName: ""
  os: ""
  scaleup: ""

steps:
  - bash: |
      set -x
      echo $UID
      sudo rm -rf $(System.DefaultWorkingDirectory)/*
    displayName: "Set up OS environment"

  - checkout: self

  - bash: |
      set -x
      go version
      go env
      mkdir -p '$(GOBIN)'
      mkdir -p '$(GOPATH)/pkg'
      mkdir -p '$(modulePath)'
      echo '##vso[task.prependpath]$(GOBIN)'
      echo '##vso[task.prependpath]$(GOROOT)/bin'
    name: "GoEnv"
    displayName: "Set up the Go environment"

  - task: KubectlInstaller@0
    inputs:
      kubectlVersion: latest

  - task: AzureCLI@2
    inputs:
      azureSubscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
      scriptLocation: "inlineScript"
      scriptType: "bash"
      addSpnToEnvironment: true
      inlineScript: |
        set -ex
        make -C ./hack/aks set-kubeconf AZCLI=az CLUSTER=${{ parameters.clusterName }}
    name: "kubeconfig"
    displayName: "Set Kubeconfig"

  - ${{ if eq(parameters.os, 'linux') }}:
    - script: |
        set -x
        ls -lah
        pwd
        kubectl cluster-info
        kubectl get po -owide -A
        sudo -E env "PATH=$PATH" make test-load SCALE_UP=32 OS_TYPE=${{ parameters.os }} CNI_TYPE=cniv2 VALIDATE_STATEFILE=true INSTALL_CNS=true INSTALL_AZURE_VNET=true CNS_VERSION=$(make cns-version) CNI_VERSION=$(make cni-version) CLEANUP=true
      retryCountOnTaskFailure: 3
      name: "aksswifte2e"
      displayName: "Run AKS Swift E2E"

  - ${{ if eq(parameters.os, 'windows') }}:
    - script: |
        cd hack/scripts
        chmod +x patch-win-clusterkubeconfig.sh
        ./patch-win-clusterkubeconfig.sh
      name: "patchKubeClusterConfig"
      displayName: "Patch kubeclusterconfig.json on Windows nodes"

    # replicate overlay behavior of untainting the nodes
    - script: |
        set -x
        nodeList=`kubectl get node -owide | grep Windows | awk '{print $1}'`
        for node in $nodeList; do
            taint=`kubectl describe node $node | grep Taints | awk '{print $2}'`
            if [ $taint == "node.cloudprovider.kubernetes.io/uninitialized=true:NoSchedule" ]; then
                kubectl taint nodes $node node.cloudprovider.kubernetes.io/uninitialized=true:NoSchedule-
            fi
        done
        kubectl cluster-info
        kubectl get po -owide -A
        sudo -E env "PATH=$PATH" make test-load SCALE_UP=32 OS_TYPE=${{ parameters.os }} CNI_TYPE=cniv2 VALIDATE_STATEFILE=true INSTALL_CNS=true INSTALL_AZURE_VNET=true CNS_VERSION=$(make cns-version) CNI_VERSION=$(make cni-version) CLEANUP=true
      retryCountOnTaskFailure: 3
      name: "aksswifte2e"
      displayName: "Run AKS Swift E2E"

    - script: |
        set -x
        echo "IPv4 Overlay DataPath Test"
        cd test/integration/datapath
        sudo -E env "PATH=$PATH" go test -count=1 datapath_windows_test.go -timeout 3m -tags connection -restartKubeproxy true -run ^TestDatapathWin$
      name: "WindowsDatapathTests"
      displayName: "Windows Datapath Tests"
      retryCountOnTaskFailure: 3

  - task: AzureCLI@1
    inputs:
      azureSubscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
      scriptLocation: "inlineScript"
      scriptType: "bash"
      addSpnToEnvironment: true
      inlineScript: |
        set -ex
        kubectl get po -owide -A
        clusterName=${{ parameters.clusterName }}
        echo "Restarting nodes"
        for val in $(az vmss list -g MC_${clusterName}_${clusterName}_$(REGION_AKS_CLUSTER_TEST) --query "[].name" -o tsv); do
          make -C ./hack/aks restart-vmss AZCLI=az CLUSTER=${clusterName} REGION=$(REGION_AKS_CLUSTER_TEST) VMSS_NAME=${val}
        done
    displayName: "Restart Nodes"

  - task: AzureCLI@1
    inputs:
      azureSubscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
      scriptLocation: "inlineScript"
      scriptType: "bash"
      addSpnToEnvironment: true
      inlineScript: |
        set -ex
        cd test/integration/load

        # Scale Cluster Up/Down to confirm functioning CNS
        ITERATIONS=2 SCALE_UP=${{ parameters.scaleup }} OS_TYPE=${{ parameters.os }} go test -count 1 -timeout 30m -tags load -run ^TestLoad$
        kubectl get pods -owide -A

        cd ../../..
        echo "Validating Node Restart"
        make test-validate-state OS_TYPE=${{ parameters.os }} RESTART_CASE=true CNI_TYPE=cniv2
        kubectl delete ns load-test
    displayName: "Validate Node Restart"
    retryCountOnTaskFailure: 3

  - ${{ if eq(parameters.os, 'linux') }}:
    - script: |
        set -x
        echo "Run wireserver and metadata connectivity Tests"
        bash test/network/wireserver_metadata_test.sh
      retryCountOnTaskFailure: 3
      name: "WireserverMetadataConnectivityTests"
      displayName: "Run Wireserver and Metadata Connectivity Tests"

    - script: |
        set -x
        cd hack/scripts
        chmod +x async-delete-test.sh
        ./async-delete-test.sh
        if ! [ -z $(kubectl -n kube-system get ds  azure-cns | grep non-existing) ]; then
          kubectl -n kube-system patch daemonset azure-cns --type json -p='[{"op": "remove", "path": "/spec/template/spec/nodeSelector/non-existing"}]'
        fi
      name: "testAsyncDelete"
      displayName: "Verify Async Delete when CNS is down"
      dependsOn: "WireserverMetadataConnectivityTests"
      condition: succeededOrFailed()
