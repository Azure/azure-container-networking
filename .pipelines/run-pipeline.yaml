stages:
- stage: setup
  displayName: ACN
  variables:
    ACN_DIR: azure-container-networking
  jobs:
  - job: env
    displayName: Setup
    pool:
      type: linux
    variables:
      ob_outputDirectory: $(Build.ArtifactStagingDirectory)
      ob_artifactSuffix: _source

      ACR_DIR: $(Build.SourcesDirectory)/azure-container-networking
    steps:
    - checkout: azure-container-networking
    - template: templates/setup.steps.yaml


- template: templates/run-unit-tests.yaml


- ${{ if not(contains(variables['Build.SourceBranch'], 'refs/pull')) }}:
  - stage: build
    displayName: "Build Project"
    dependsOn:
      - setup
      - test
    variables:
      ACN_DIR: drop_setup_env_source
      ACN_PACKAGE_PATH: github.com/Azure/azure-container-networking
      CNI_AI_PATH: $(ACN_PACKAGE_PATH)/telemetry.aiMetadata
      CNS_AI_PATH: $(ACN_PACKAGE_PATH)/cns/logger.aiMetadata
      NPM_AI_PATH: $(ACN_PACKAGE_PATH)/npm.aiMetadata

      STORAGE_ID: $[ stageDependencies.setup.env.outputs['EnvironmentalVariables.StorageID'] ]
      TAG: $[ stageDependencies.setup.env.outputs['EnvironmentalVariables.Tag'] ]
      AZURE_IPAM_VERSION: $[ stageDependencies.setup.env.outputs['EnvironmentalVariables.azureIpamVersion'] ]
      CNI_VERSION: $[ stageDependencies.setup.env.outputs['EnvironmentalVariables.cniVersion'] ]
      CNS_VERSION: $[ stageDependencies.setup.env.outputs['EnvironmentalVariables.cnsVersion'] ]
      IPV6_HP_BPF_VERSION: $[ stageDependencies.setup.env.outputs['EnvironmentalVariables.ipv6HpBpfVersion'] ]
      NPM_VERSION: $[ stageDependencies.setup.env.outputs['EnvironmentalVariables.npmVersion'] ]
    jobs:
    - job: binaries
      displayName: "Build Binaries"
      pool:
        type: linux
      variables:
        LinuxContainerImage: $(LinuxContainerImage2)
        ob_outputDirectory: $(Build.ArtifactStagingDirectory)/output
        ob_git_checkout: true
    
        ACN_DIR: azure-container-networking
      steps:
      - checkout: azure-container-networking
      - template: templates/binaries.steps.yaml


    - job: images_amd64
      displayName: "Build Images"
      pool:
        os: linux
        type: docker
      variables:
        ob_outputDirectory: $(Build.ArtifactStagingDirectory)
        ob_artifactSuffix: _$(name)_$(os)_$(arch)

        ARCH: amd64
      strategy:
        maxParallel: 5
        matrix:
          azure_ipam_linux_amd64:
            name: azure-ipam
            os: linux
            dockerfilePath: $(ACN_DIR)/azure-ipam
            extraArgs: ''
            archiveName: azure-ipam
            archiveVersion: $(AZURE_IPAM_VERSION)
          azure_ipam_windows:
            name: azure-ipam
            os: windows
            osVersion: ltsc2022
            dockerfilePath: $(ACN_DIR)/azure-ipam
            extraArgs: ''
            archiveName: azure-ipam
            archiveVersion: $(AZURE_IPAM_VERSION)
          cni_linux_amd64:
            name: cni
            os: linux
            dockerfilePath: $(ACN_DIR)/cni
            extraArgs: '--build-arg CNI_AI_PATH=$(CNI_AI_PATH) --build-arg CNI_AI_ID=$(CNI_AI_ID)'
            archiveName: azure-cni
            archiveVersion: $(CNI_VERSION)
          cni_windows_amd64:
            name: cni
            os: windows
            osVersion: ltsc2022
            dockerfilePath: $(ACN_DIR)/cni
            extraArgs: '--build-arg CNI_AI_PATH=$(CNI_AI_PATH) --build-arg CNI_AI_ID=$(CNI_AI_ID)'
            archiveName: azure-cni
            archiveVersion: $(CNI_VERSION)
          cns_linux_amd64:
            name: cns
            os: linux
            dockerfilePath: $(ACN_DIR)/cns
            extraArgs: '--build-arg CNS_AI_PATH=$(CNS_AI_PATH) --build-arg CNS_AI_ID=$(CNS_AI_ID)'
            archiveName: azure-cns
            archiveVersion: $(CNS_VERSION)
          cns_windows_amd64:
            name: cns
            os: windows
            osVersion: ltsc2022
            dockerfilePath: $(ACN_DIR)/cns
            extraArgs: '--build-arg CNS_AI_PATH=$(CNS_AI_PATH) --build-arg CNS_AI_ID=$(CNS_AI_ID)'
            archiveName: azure-cns
            archiveVersion: $(CNS_VERSION)
          ipv6_hp_bpf_linux_amd64:
            name: ipv6-hp-bpf
            os: linux
            dockerfilePath: $(ACN_DIR)/bpf-prog/ipv6-hp-bpf
            extraArgs: "--build-arg DEBUG=$(System.Debug)"
            archiveName: ipv6-hp-bpf
            archiveVersion: $(IPV6_HP_BPF_VERSION)
          npm_linux_amd64:
            name: npm
            os: linux
            dockerfilePath: $(ACN_DIR)/npm
            extraArgs: '--build-arg NPM_AI_PATH=$(NPM_AI_PATH) --build-arg NPM_AI_ID=$(NPM_AI_ID)'
            archiveName: azure-npm
            archiveVersion: $(NPM_VERSION)
          npm_windows_amd64:
            name: npm
            os: windows
            osVersion: ltsc2022
            dockerfilePath: $(ACN_DIR)/npm-windows
            extraArgs: '--build-arg NPM_AI_PATH=$(NPM_AI_PATH) --build-arg NPM_AI_ID=$(NPM_AI_ID)'
            archiveName: azure-npm
            archiveVersion: $(NPM_VERSION)
      steps:
      - template: containers/container-template.steps.yaml
        parameters:
          arch: amd64
          name: $(name)
          os: $(os)
          dockerfile_path: $(dockerfilePath)
          archive_file: $(archiveName)-$(os)-$(arch)-$(archiveVersion)
          extra_args: $(extraArgs)
          build_tag: $(archiveVersion)

  
    - job: images_arm64
      displayName: "Build arm64 Images"
      pool:
        os: linux
        type: docker
        hostArchitecture: arm64
      variables:
        #LinuxContainerImage: $(LinuxContainerImage3) # Use if Mariner does not work.
        ob_outputDirectory: $(Build.SourcesDirectory)/out
        ob_artifactSuffix: _$(name)_$(os)_$(arch)

        ARCH: arm64
      strategy:
        maxParallel: 3
        matrix:
          azure_ipam_linux_arm64:
            name: azure-ipam
            os: linux
            dockerfilePath: $(ACN_DIR)/azure-ipam
            archiveName: azure-ipam
            archiveVersion: $(AZURE_IPAM_VERSION)
            extraArgs: ''
          cni_linux_arm64:
            name: cni
            os: linux
            dockerfilePath: $(ACN_DIR)/cni
            extraArgs: '--build-arg CNI_AI_PATH=$(CNI_AI_PATH) --build-arg CNI_AI_ID=$(CNI_AI_ID)'
            archiveName: azure-cni
            archiveVersion: $(CNI_VERSION)
          cns_linux_arm64:
            name: cns
            os: linux
            dockerfilePath: $(ACN_DIR)/cns
            extraArgs: '--build-arg CNS_AI_PATH=$(CNS_AI_PATH) --build-arg CNS_AI_ID=$(CNS_AI_ID)'
            archiveName: azure-cns
            archiveVersion: $(CNS_VERSION)
          ipv6_hp_bpf_linux_arm64:
            name: ipv6-hp-bpf
            os: linux
            dockerfilePath: $(ACN_DIR)/bpf-prog/ipv6-hp-bpf
            extraArgs: "--build-arg DEBUG=$(System.Debug)"
            archiveName: ipv6-hp-bpf
            archiveVersion: $(IPV6_HP_BPF_VERSION)
          npm_linux_arm64:
            name: npm
            os: linux
            dockerfilePath: $(ACN_DIR)/npm
            extraArgs: '--build-arg NPM_AI_PATH=$(NPM_AI_PATH) --build-arg NPM_AI_ID=$(NPM_AI_ID)'
            archiveName: azure-npm
            archiveVersion: $(NPM_VERSION)
      steps:
      - template: containers/container-template.steps.yaml
        parameters:
          arch: arm64
          name: $(name)
          os: $(os)
          dockerfile_path: $(dockerfilePath)
          build_tag: $(archiveVersion)
          extra_args: $(extraArgs)
          archive_file: $(archiveName)-$(os)-$(arch)-$(archiveVersion)


#- stage: e2e
#  displayName: "Run E2E Tests"
#  dependsOn:
#  - setup
#  - build
#  variables:
#    ACN_DIR: azure-container-networking
#  jobs:
#  - template: run-e2e.jobs.yaml
#    parameters:
#      e2e_jobs:
#      - job: cilium_e2e
#        displayName: "Cilium"
#        templateContext:
#          clusterType: swift-byocni-nokubeproxy-up
#          clusterName: "ciliume2e"
#          vmSize: Standard_B2ms
#
#      - job: cilium_nodesubnet_e2e
#        displayName: "Cilium NodeSubnet"
#        templateContext:
#          clusterType: nodesubnet-byocni-nokubeproxy-up
#          clusterName: "cilndsubnete2e"
#          vmSize: Standard_B2s
#
#      - job: cilium_overlay_e2e
#        displayName: "Cilium on AKS Overlay"
#        templateContext:
#          clusterType: overlay-byocni-nokubeproxy-up
#          clusterName: "cilovere2e"
#          vmSize: Standard_B2ms
#
#      - job: cilium_dualstackoverlay_e2e
#        displayName: "Cilium on AKS DualStack Overlay"
#        templateContext:
#          os: linux
#          clusterType: dualstack-byocni-nokubeproxy-up
#          clusterName: "cildsovere2e"
#          vmSize: Standard_B2ms
#
#      - job: cilium_h_overlay_e2e
#        displayName: "Cilium on AKS Overlay with Hubble"
#        templateContext:
#          clusterType: overlay-byocni-nokubeproxy-up
#          clusterName: "cilwhleovere2e"
#          vmSize: Standard_B2ms
#          testHubble: true
#
#      - job: linux_azure_overlay_e2e
#        displayName: "Azure Overlay Linux"
#        templateContext:
#          os: linux
#          clusterType: overlay-byocni-up
#          clusterName: "linuxazovere2e"
#          vmSize: Standard_B2ms
#          scaleup: 100
#
#      - job: win_azure_overlay_e2e
#        displayName: "Azure Overlay Windows"
#        templateContext:
#          os: windows
#          clusterType: overlay-byocni-up
#          clusterName: "winazovere2e"
#          vmSize: Standard_B2ms
#          scaleup: 50
#
#      - job: azure_overlay_stateless_e2e
#        displayName: "Azure Stateless CNI Overlay"
#        templateContext:
#          os: windows
#          clusterType: overlay-byocni-up
#          clusterName: "statelesswin"
#          vmSize: Standard_B2ms
#
#      - job: aks_swift_e2e
#        displayName: "AKS Swift Ubuntu"
#        templateContext:
#          os: linux
#          clusterType: swift-byocni-up
#          clusterName: "swifte2e"
#          vmSize: Standard_B2ms
#
#      - job: aks_swift_vnetscale_e2e
#        displayName: "AKS Swift Vnet Scale Ubuntu"
#        templateContext:
#          os: linux
#          clusterType: vnetscale-swift-byocni-up
#          clusterName: "vscaleswifte2e"
#          vmSize: Standard_B2ms
#          k8sVersion: "1.30"
#
#      - job: aks_ubuntu_22_linux_e2e
#        displayName: "AKS Ubuntu 22"
#        templateContext:
#          arch: amd64
#          os: linux
#          clusterType: cniv1-up
#          clusterName: "ubuntu22e2e"
#          vmSize: Standard_B2s
#          k8sVersion: 1.25
#          scaleup: 100
#
#      - job: aks_windows_22_e2e
#        displayName: "AKS Windows 2022"
#        templateContext:
#          arch: amd64
#          os: windows
#          os_version: ltsc2022
#          clusterType: cniv1-up
#          clusterName: "win22e2e"
#          vmSize: Standard_B2ms
#          scaleup: 50
#
#      - job: linux_dualstackoverlay_e2e
#        displayName: "AKS DualStack Overlay Linux"
#        templateContext:
#          os: linux
#          clusterType: dualstack-overlay-byocni-up
#          clusterName: "linuxdsovere2e"
#          vmSize: Standard_B2ms
#          scaleup: 100
#
#      - job: win_dualstackoverlay_e2e
#        displayName: "AKS DualStack Overlay Windows"
#        templateContext:
#          os: windows
#          clusterType: dualstack-overlay-byocni-up
#          clusterName: "windsovere2e"
#          vmSize: Standard_B2ms
#          scaleup: 50
