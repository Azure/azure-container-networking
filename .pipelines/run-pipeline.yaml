stages:
- stage: setup
  displayName: ACN
  variables:
    ACN_DIR: azure-container-networking
  jobs:
  - job: env
    displayName: Setup
    pool:
      type: linux
    variables:
      ob_outputDirectory: $(Build.ArtifactStagingDirectory)
      ob_artifactSuffix: _source

      ACR_DIR: $(Build.SourcesDirectory)/azure-container-networking
      BUILD_TYPE: $(IMAGE_ACR_TYPE)
    steps:
    - checkout: azure-container-networking
    - template: build/ob-prepare.steps.yaml

- template: templates/run-unit-tests.stages.yaml

- ${{ if not(contains(variables['Build.SourceBranch'], 'refs/pull')) }}:
  - stage: build
    displayName: "Build Project"
    dependsOn:
      - setup
      - unittest
    variables:
      ACN_DIR: drop_setup_env_source
      ACN_PACKAGE_PATH: github.com/Azure/azure-container-networking
      CNI_AI_PATH: $(ACN_PACKAGE_PATH)/telemetry.aiMetadata
      CNS_AI_PATH: $(ACN_PACKAGE_PATH)/cns/logger.aiMetadata
      NPM_AI_PATH: $(ACN_PACKAGE_PATH)/npm.aiMetadata

      STORAGE_ID: $[ stageDependencies.setup.env.outputs['EnvironmentalVariables.StorageID'] ]
      TAG: $[ stageDependencies.setup.env.outputs['EnvironmentalVariables.Tag'] ]

      IMAGE_REPO_PATH: $[ stageDependencies.setup.env.outputs['EnvironmentalVariables.imageRepositoryPath'] ]
      AZURE_IPAM_VERSION: $[ stageDependencies.setup.env.outputs['EnvironmentalVariables.azureIpamVersion'] ]
      CNI_VERSION: $[ stageDependencies.setup.env.outputs['EnvironmentalVariables.cniVersion'] ]
      CNS_VERSION: $[ stageDependencies.setup.env.outputs['EnvironmentalVariables.cnsVersion'] ]
      IPV6_HP_BPF_VERSION: $[ stageDependencies.setup.env.outputs['EnvironmentalVariables.ipv6HpBpfVersion'] ]
      NPM_VERSION: $[ stageDependencies.setup.env.outputs['EnvironmentalVariables.npmVersion'] ]
    jobs:
    - template: /.pipelines/build/images.jobs.yaml
      parameters:
        images:
        - job: linux_amd64
          displayName: "Linux/AMD64"
          templateContext:
            repositoryArtifact: drop_setup_env_source
            buildScript: .pipelines/build/scripts/$(name).sh
            obDockerfile: .pipelines/build/dockerfiles/$(name).Dockerfile
          strategy:
            maxParallel: 5
            matrix:
              azure_ipam:
                name: azure-ipam
                extraArgs: ''
                archiveName: azure-ipam
                archiveVersion: $(AZURE_IPAM_VERSION)
                imageTag: $(Build.BuildNumber)
                packageWithDropGZ: True
              cni:
                name: cni
                extraArgs: '--build-arg CNI_AI_PATH=$(CNI_AI_PATH) --build-arg CNI_AI_ID=$(CNI_AI_ID)'
                archiveName: azure-cni
                archiveVersion: $(CNI_VERSION)
                imageTag: $(Build.BuildNumber)
                packageWithDropGZ: True
              cns:
                name: cns
                extraArgs: '--build-arg CNS_AI_PATH=$(CNS_AI_PATH) --build-arg CNS_AI_ID=$(CNS_AI_ID)'
                archiveName: azure-cns
                archiveVersion: $(CNS_VERSION)
                imageTag: $(Build.BuildNumber)
              ipv6_hp_bpf:
                name: ipv6-hp-bpf
                extraArgs: "--build-arg DEBUG=$(System.Debug)"
                archiveName: ipv6-hp-bpf
                archiveVersion: $(IPV6_HP_BPF_VERSION)
                imageTag: $(Build.BuildNumber)
              # npm:
              #   name: npm
              #   extraArgs: '--build-arg NPM_AI_PATH=$(NPM_AI_PATH) --build-arg NPM_AI_ID=$(NPM_AI_ID)'
              #   archiveName: azure-npm
              #   archiveVersion: $(NPM_VERSION)
              #   imageTag: $(Build.BuildNumber)

        - job: windows_amd64
          displayName: "Windows"
          templateContext:
            repositoryArtifact: drop_setup_env_source
            buildScript: .pipelines/build/scripts/$(name).sh
            obDockerfile: .pipelines/build/dockerfiles/$(name).Dockerfile
          strategy:
            maxParallel: 5
            matrix:
              azure_ipam:
                name: azure-ipam
                extraArgs: ''
                archiveName: azure-ipam
                archiveVersion: $(AZURE_IPAM_VERSION)
                imageTag: $(Build.BuildNumber)
                packageWithDropGZ: True
              cni:
                name: cni
                extraArgs: '--build-arg CNI_AI_PATH=$(CNI_AI_PATH) --build-arg CNI_AI_ID=$(CNI_AI_ID)'
                archiveName: azure-cni
                archiveVersion: $(CNI_VERSION)
                imageTag: $(Build.BuildNumber)
                packageWithDropGZ: True
              cns:
                name: cns
                extraArgs: '--build-arg CNS_AI_PATH=$(CNS_AI_PATH) --build-arg CNS_AI_ID=$(CNS_AI_ID)'
                archiveName: azure-cns
                archiveVersion: $(CNS_VERSION)
                imageTag: $(Build.BuildNumber)
              # npm:
              #   name: npm
              #   extraArgs: '--build-arg NPM_AI_PATH=$(NPM_AI_PATH) --build-arg NPM_AI_ID=$(NPM_AI_ID)'
              #   archiveName: azure-npm
              #   archiveVersion: $(NPM_VERSION)
              #   imageTag: $(Build.BuildNumber)

        - job: linux_arm64
          displayName: "Linux/ARM64"
          templateContext:
            repositoryArtifact: drop_setup_env_source
            buildScript: .pipelines/build/scripts/$(name).sh
            obDockerfile: .pipelines/build/dockerfiles/$(name).Dockerfile
          strategy:
            maxParallel: 3
            matrix:
              azure_ipam:
                name: azure-ipam
                archiveName: azure-ipam
                archiveVersion: $(AZURE_IPAM_VERSION)
                extraArgs: ''
                imageTag: $(Build.BuildNumber)
                packageWithDropGZ: True
              cni:
                name: cni
                extraArgs: '--build-arg CNI_AI_PATH=$(CNI_AI_PATH) --build-arg CNI_AI_ID=$(CNI_AI_ID)'
                archiveName: azure-cni
                archiveVersion: $(CNI_VERSION)
                imageTag: $(Build.BuildNumber)
                packageWithDropGZ: True
              cns:
                name: cns
                extraArgs: '--build-arg CNS_AI_PATH=$(CNS_AI_PATH) --build-arg CNS_AI_ID=$(CNS_AI_ID)'
                archiveName: azure-cns
                archiveVersion: $(CNS_VERSION)
                imageTag: $(Build.BuildNumber)
              ipv6_hp_bpf:
                name: ipv6-hp-bpf
                extraArgs: "--build-arg DEBUG=$(System.Debug)"
                archiveName: ipv6-hp-bpf
                archiveVersion: $(IPV6_HP_BPF_VERSION)
                imageTag: $(Build.BuildNumber)
              # npm:
              #   name: npm
              #   extraArgs: '--build-arg NPM_AI_PATH=$(NPM_AI_PATH) --build-arg NPM_AI_ID=$(NPM_AI_ID)'
              #   archiveName: azure-npm
              #   archiveVersion: $(NPM_VERSION)
              #   imageTag: $(Build.BuildNumber)


  - stage: manifests
    displayName: "Image Manifests"
    dependsOn:
    - setup
    - build
    variables:
      IMAGE_REPO_PATH: $[ stageDependencies.setup.env.outputs['EnvironmentalVariables.imageRepositoryPath'] ]

      AZURE_IPAM_VERSION: $[ stageDependencies.setup.env.outputs['EnvironmentalVariables.azureIpamVersion'] ]
      CNI_VERSION: $[ stageDependencies.setup.env.outputs['EnvironmentalVariables.cniVersion'] ]
      CNS_VERSION: $[ stageDependencies.setup.env.outputs['EnvironmentalVariables.cnsVersion'] ]
      IPV6_HP_BPF_VERSION: $[ stageDependencies.setup.env.outputs['EnvironmentalVariables.ipv6HpBpfVersion'] ]
      NPM_VERSION: $[ stageDependencies.setup.env.outputs['EnvironmentalVariables.npmVersion'] ]

      IPAM_LINUX_AMD64_REF: $(IMAGE_REPO_PATH)/linux-amd64/azure-ipam:$(Build.BuildNumber)
      IPAM_LINUX_ARM64_REF: $(IMAGE_REPO_PATH)/linux-arm64/azure-ipam:$(Build.BuildNumber)
      IPAM_WINDOWS_AMD64_REF: $(IMAGE_REPO_PATH)/windows-amd64/azure-ipam:$(Build.BuildNumber)

      CNI_LINUX_AMD64_REF: $(IMAGE_REPO_PATH)/linux-amd64/cni:$(Build.BuildNumber)
      CNI_LINUX_ARM64_REF: $(IMAGE_REPO_PATH)/linux-arm64/cni:$(Build.BuildNumber)
      CNI_WINDOWS_AMD64_REF: $(IMAGE_REPO_PATH)/windows-amd64/cni:$(Build.BuildNumber)

      CNS_LINUX_AMD64_REF: $(IMAGE_REPO_PATH)/linux-amd64/cns:$(Build.BuildNumber)
      CNS_LINUX_ARM64_REF: $(IMAGE_REPO_PATH)/linux-arm64/cns:$(Build.BuildNumber)
      CNS_WINDOWS_AMD64_REF: $(IMAGE_REPO_PATH)/windows-amd64/cns:$(Build.BuildNumber)

      IPV6_LINUX_AMD64_REF: $(IMAGE_REPO_PATH)/linux-amd64/ipv6-hp-bpf:$(Build.BuildNumber)
      IPV6_LINUX_ARM64_REF: $(IMAGE_REPO_PATH)/linux-arm64/ipv6-hp-bpf:$(Build.BuildNumber)

      NPM_LINUX_AMD64_REF: $(IMAGE_REPO_PATH)/linux-amd64/npm:$(Build.BuildNumber)
      NPM_LINUX_ARM64_REF: $(IMAGE_REPO_PATH)/linux-arm64/npm:$(Build.BuildNumber)
      NPM_WINDOWS_AMD64_REF: $(IMAGE_REPO_PATH)/windows-amd64/npm:$(Build.BuildNumber)
    jobs:

    - template: build/manifests.jobs.yaml
      parameters:
        generate:
        - job: azure_ipam
          templateContext:
            name: azure-ipam
            image_tag: $(AZURE_IPAM_VERSION)
            platforms:
            - platform: linux/amd64
              imageReference: $(IPAM_LINUX_AMD64_REF)
            - platform: linux/arm64
              imageReference: $(IPAM_LINUX_ARM64_REF)
            - platform: windows/amd64
              imageReference: $(IPAM_WINDOWS_AMD64_REF)
        - job: cni
          templateContext:
            name: cni
            image_tag: $(CNI_VERSION)
            platforms:
            - platform: linux/amd64
              imageReference: $(CNI_LINUX_AMD64_REF)
            - platform: linux/arm64
              imageReference: $(CNI_LINUX_ARM64_REF)
            - platform: windows/amd64
              imageReference: $(CNI_WINDOWS_AMD64_REF)
        - job: cns
          templateContext:
            name: cns
            image_tag: $(CNS_VERSION)
            platforms:
            - platform: linux/amd64
              imageReference: $(CNS_LINUX_AMD64_REF)
            - platform: linux/arm64
              imageReference: $(CNS_LINUX_ARM64_REF)
            - platform: windows/amd64
              imageReference: $(CNS_WINDOWS_AMD64_REF)
        - job: ipv6_hp_bpf
          templateContext:
            name: ipv6-hp-bpf
            image_tag: $(IPV6_HP_BPF_VERSION)
            platforms:
            - platform: linux/amd64
              imageReference: $(IPV6_LINUX_AMD64_REF)
            - platform: linux/arm64
              imageReference: $(IPV6_LINUX_ARM64_REF)
        # - job: npm
        #   templateContext:
        #     name: npm
        #     image_tag: $(NPM_VERSION)
        #     isReleaseImage: true
        #     platforms:
        #     - platform: linux/amd64
        #       imageReference: $(NPM_LINUX_AMD64_REF)
        #     - platform: linux/arm64
        #       imageReference: $(NPM_LINUX_ARM64_REF)
        #     - platform: windows/amd64
        #       imageReference: $(NPM_WINDOWS_AMD64_REF)
    - template: build/manifests.jobs.yaml
      parameters:
        generate:
        - job: prod_azure_ipam
          templateContext:
            name: azure-ipam
            image_tag: $(AZURE_IPAM_VERSION)
            isReleaseImage: true
            platforms:
            - platform: linux/amd64
              imageReference: azure-ipam:$(AZURE_IPAM_VERSION)-linux-amd64
            - platform: linux/arm64
              imageReference: azure-ipam:$(AZURE_IPAM_VERSION)-linux-arm64
            - platform: windows/amd64
              imageReference: azure-ipam:$(AZURE_IPAM_VERSION)-windows-amd64
        - job: prod_cni
          templateContext:
            name: azure-cni
            image_tag: $(CNI_VERSION)
            isReleaseImage: true
            platforms:
            - platform: linux/amd64
              imageReference: cni:$(CNI_VERSION)-linux-amd64
            - platform: linux/arm64
              imageReference: cni:$(CNI_VERSION)-linux-arm64
            - platform: windows/amd64
              imageReference: cni:$(CNI_VERSION)-windows-amd64
        - job: prod_cns
          templateContext:
            name: azure-cns
            image_tag: $(CNS_VERSION)
            isReleaseImage: true
            platforms:
            - platform: linux/amd64
              imageReference: cns:$(CNS_VERSION)-linux-amd64
            - platform: linux/arm64
              imageReference: cns:$(CNS_VERSION)-linux-arm64
            - platform: windows/amd64
              imageReference: cns:$(CNS_VERSION)-windows-amd64
        - job: prod_ipv6_hp_bpf
          templateContext:
            name: ipv6-hp-bpf
            image_tag: $(IPV6_HP_BPF_VERSION)
            isReleaseImage: true
            platforms:
            - platform: linux/amd64
              imageReference: ipv6-hp-bpf:$(IPV6_HP_BPF_VERSION)-linux-amd64
            - platform: linux/arm64
              imageReference: ipv6-hp-bpf:$(IPV6_HP_BPF_VERSION)-linux-arm64


  # Cilium Podsubnet E2E tests
  - template: singletenancy/cilium/cilium-e2e.stages.yaml
    parameters:
      name: "cilium_e2e"
      displayName: Cilium
      clusterType: swift-byocni-nokubeproxy-up
      clusterName: "ciliume2e"
      vmSize: Standard_B2ms
      k8sVersion: ""
      dependsOn: manifests

  # Cilium Nodesubnet E2E tests
  - template: singletenancy/cilium-nodesubnet/cilium-nodesubnet-e2e.stages.yaml
    parameters:
      name: "cilium_nodesubnet_e2e"
      displayName: Cilium NodeSubnet
      clusterType: nodesubnet-byocni-nokubeproxy-up
      clusterName: "cilndsubnete2e"
      vmSize: Standard_B2s
      k8sVersion: ""
      dependsOn: manifests

  # Cilium Overlay E2E tests
  - template: singletenancy/cilium-overlay/cilium-overlay-e2e.stages.yaml
    parameters:
      name: "cilium_overlay_e2e"
      displayName: Cilium on AKS Overlay
      clusterType: overlay-byocni-nokubeproxy-up
      clusterName: "cilovere2e"
      vmSize: Standard_B2ms
      k8sVersion: ""
      dependsOn: manifests

  # Cilium Dualstack Overlay E2E tests
  - template: singletenancy/cilium-dualstack-overlay/cilium-dualstackoverlay-e2e.stages.yaml
    parameters:
      name: "cilium_dualstackoverlay_e2e"
      displayName: Cilium on AKS DualStack Overlay
      os: linux
      clusterType: dualstack-byocni-nokubeproxy-up
      clusterName: "cildsovere2e"
      vmSize: Standard_B2ms
      k8sVersion: ""
      dependsOn: manifests

      # Cilium Overlay with hubble E2E tests
  - template: singletenancy/cilium-overlay-withhubble/cilium-overlay-e2e.stages.yaml
    parameters:
      name: "cilium_h_overlay_e2e"
      displayName: Cilium on AKS Overlay with Hubble
      clusterType: overlay-byocni-nokubeproxy-up
      clusterName: "cilwhleovere2e"
      vmSize: Standard_B2ms
      k8sVersion: ""
      dependsOn: manifests
      testHubble: true

  # Azure Overlay E2E tests
  - template: singletenancy/azure-cni-overlay/azure-cni-overlay-e2e.stages.yaml
    parameters:
      name: "linux_azure_overlay_e2e"
      displayName: Azure Overlay Linux
      os: linux
      clusterType: overlay-byocni-up
      clusterName: "linuxazovere2e"
      vmSize: Standard_B2ms
      k8sVersion: ""
      dependsOn: manifests
      scaleup: 100

  - template: singletenancy/azure-cni-overlay/azure-cni-overlay-e2e.stages.yaml
    parameters:
      name: "win_azure_overlay_e2e"
      displayName: Azure Overlay Windows
      os: windows
      clusterType: overlay-byocni-up
      clusterName: "winazovere2e"
      vmSize: Standard_B2ms
      k8sVersion: ""
      dependsOn: manifests
      scaleup: 50

  # Azure Overlay E2E Stateless CNI tests
  - template: singletenancy/azure-cni-overlay-stateless/azure-cni-overlay-stateless-e2e.stages.yaml
    parameters:
      name: "azure_overlay_stateless_e2e"
      displayName: Azure Stateless CNI Overlay
      os: windows
      clusterType: overlay-byocni-up
      clusterName: "statelesswin"
      vmSize: Standard_B2ms
      dependsOn: manifests

  # AKS Swift E2E tests
  - template: singletenancy/aks-swift/e2e.stages.yaml
    parameters:
      name: "aks_swift_e2e"
      displayName: AKS Swift Ubuntu
      os: linux
      clusterType: swift-byocni-up
      clusterName: "swifte2e"
      vmSize: Standard_B2ms
      k8sVersion: ""
      dependsOn: manifests

  # AKS Swift Vnet Scale E2E tests
  - template: singletenancy/aks-swift/e2e.stages.yaml
    parameters:
      name: "aks_swift_vnetscale_e2e"
      displayName: AKS Swift Vnet Scale Ubuntu
      os: linux
      clusterType: vnetscale-swift-byocni-up
      clusterName: "vscaleswifte2e"
      vmSize: Standard_B2ms
      k8sVersion: "1.30"
      dependsOn: manifests

  # CNIv1 E2E tests
  - template: singletenancy/aks/e2e.stages.yaml
    parameters:
      name: "aks_ubuntu_22_linux_e2e"
      displayName: AKS Ubuntu 22
      arch: "amd64"
      os: "linux"
      clusterType: cniv1-up
      clusterName: "ubuntu22e2e"
      vmSize: Standard_B2s
      k8sVersion: 1.25
      scaleup: 100
      dependsOn: manifests

  - template: singletenancy/aks/e2e.stages.yaml
    parameters:
      name: "aks_windows_22_e2e"
      displayName: AKS Windows 2022
      arch: amd64
      os: "windows"
      clusterType: cniv1-up
      clusterName: "win22e2e"
      vmSize: Standard_B2ms
      os_version: "ltsc2022"
      scaleup: 50
      dependsOn: manifests

  # CNI dual stack overlay E2E tests
  - template: singletenancy/dualstack-overlay/dualstackoverlay-e2e.stages.yaml
    parameters:
      name: "linux_dualstackoverlay_e2e"
      displayName: AKS DualStack Overlay Linux
      os: linux
      clusterType: dualstack-overlay-byocni-up
      clusterName: "linuxdsovere2e"
      vmSize: Standard_B2ms
      dependsOn: manifests
      scaleup: 100

  - template: singletenancy/dualstack-overlay/dualstackoverlay-e2e.stages.yaml
    parameters:
      name: "win_dualstackoverlay_e2e"
      displayName: AKS DualStack Overlay Windows
      os: windows
      clusterType: dualstack-overlay-byocni-up
      clusterName: "windsovere2e"
      vmSize: Standard_B2ms
      dependsOn: manifests
      scaleup: 50


  - stage: delete
    displayName: Delete Clusters
    condition: always()
    dependsOn:
      - setup
      - linux_azure_overlay_e2e
      - win_azure_overlay_e2e
      - azure_overlay_stateless_e2e
      - aks_swift_e2e
      - cilium_e2e
      - cilium_nodesubnet_e2e
      - cilium_overlay_e2e
      - cilium_h_overlay_e2e
      - aks_ubuntu_22_linux_e2e
      - aks_swift_vnetscale_e2e
      - aks_windows_22_e2e
      - linux_dualstackoverlay_e2e
      - win_dualstackoverlay_e2e
      - cilium_dualstackoverlay_e2e
    variables:
      commitID: $[ stagedependencies.setup.env.outputs['EnvironmentalVariables.commitID'] ]
    jobs:
    - job: delete_build
      displayName: Delete Cluster
      pool:
        name: "$(BUILD_POOL_NAME_DEFAULT)"
        isCustom: true
        type: linux
      strategy:
        matrix:
          cilium_e2e:
            name: cilium_e2e
            clusterName: "ciliume2e"
            region: $(REGION_AKS_CLUSTER_TEST)
          cilium_nodesubnet_e2e:
            name: cilium_nodesubnet_e2e
            clusterName: "cilndsubnete2e"
            region: $(REGION_AKS_CLUSTER_TEST)
          cilium_overlay_e2e:
            name: cilium_overlay_e2e
            clusterName: "cilovere2e"
            region: $(REGION_AKS_CLUSTER_TEST)
          cilium_h_overlay_e2e:
            name: cilium_h_overlay_e2e
            clusterName: "cilwhleovere2e"
            region: $(REGION_AKS_CLUSTER_TEST)
          linux_azure_overlay_e2e:
            name: linux_azure_overlay_e2e
            clusterName: "linuxazovere2e"
            region: $(REGION_AKS_CLUSTER_TEST)
          windows_azure_overlay_e2e:
            name: win_azure_overlay_e2e
            clusterName: "winazovere2e"
            region: $(REGION_AKS_CLUSTER_TEST)
          azure_overlay_stateless_e2e:
            name: azure_overlay_stateless_e2e
            clusterName: "statelesswin"
            region: $(REGION_AKS_CLUSTER_TEST)
          aks_swift_e2e:
            name: aks_swift_e2e
            clusterName: "swifte2e"
            region: $(REGION_AKS_CLUSTER_TEST)
          aks_swift_vnetscale_e2e:
            name: aks_swift_vnetscale_e2e
            clusterName: "vscaleswifte2e"
            region: $(REGION_AKS_CLUSTER_TEST)
          aks_ubuntu_22_linux_e2e:
            name: aks_ubuntu_22_linux_e2e
            clusterName: "ubuntu22e2e"
            region: $(REGION_AKS_CLUSTER_TEST)
          aks_windows_22_e2e:
            name: aks_windows_22_e2e
            clusterName: "win22e2e"
            region: $(REGION_AKS_CLUSTER_TEST)
          linux_dualstackoverlay_e2e:
            name: linux_dualstackoverlay_e2e
            clusterName: "linuxdsovere2e"
            region: $(REGION_DUALSTACKOVERLAY_CLUSTER_TEST)
          windows_dualstackoverlay_e2e:
            name: windows_dualstackoverlay_e2e
            clusterName: "windsovere2e"
            region: $(REGION_DUALSTACKOVERLAY_CLUSTER_TEST)
          cilium_dualstackoverlay_e2e:
            name: cilium_dualstackoverlay_e2e
            clusterName: "cildsovere2e"
            region: $(REGION_DUALSTACKOVERLAY_CLUSTER_TEST)
      steps:
      - checkout: azure-container-networking
      - template: templates/delete-cluster.steps.yaml
        parameters:
          name: $(name)
          clusterName: $(clusterName)-$(commitID)
          region: $(region)
          sub: $(SUB_AZURE_NETWORK_AGENT_BUILD_VALIDATIONS)
          svcConn: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
