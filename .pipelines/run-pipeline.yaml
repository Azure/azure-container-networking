stages:
- stage: setup
  displayName: ACN
  variables:
    ACN_DIR: azure-container-networking
  jobs:
  - job: env
    displayName: Setup
    pool:
      type: linux
    variables:
      ob_outputDirectory: $(Build.ArtifactStagingDirectory)
    steps:
    - checkout: azure-container-networking

    - script: |
        # To use the variables below, you must make the respective stage's dependsOn have - setup or it will not retain context of this stage
        BUILD_NUMBER=$(Build.BuildNumber)
        echo "##vso[task.setvariable variable=StorageID;isOutput=true]$(echo ${BUILD_NUMBER//./-})"
        echo "##vso[task.setvariable variable=commitID;isOutput=true]$(echo $(make revision)-$(date "+%d%H%M"))"
        echo "##vso[task.setvariable variable=Tag;isOutput=true]$(make version)"
        echo "##vso[task.setvariable variable=azureIpamVersion;isOutput=true]$(make azure-ipam-version)"
        echo "##vso[task.setvariable variable=cniVersion;isOutput=true]$(make cni-version)"
        echo "##vso[task.setvariable variable=cnsVersion;isOutput=true]$(make cns-version)"
        echo "##vso[task.setvariable variable=ipv6HpBpfVersion;isOutput=true]$(make ipv6-hp-bpf-version)"
        echo "##vso[task.setvariable variable=npmVersion;isOutput=true]$(make npm-version)"
        cat /etc/os-release
        uname -a
        sudo chown -R $(whoami):$(whoami) .
        go version
        go env
        which go
        echo $PATH
        echo "------"
        echo $(Build.QueuedBy)
        echo $(Build.Reason) # manual, PR, IndividualCI
        echo $(Build.SourceBranch)
      name: "EnvironmentalVariables"
      displayName: "Set environmental variables"
      condition: always()
      workingDirectory: $(ACN_DIR)

- template: templates/run-unit-tests.yaml

  # We can remove this and make sure it is only part of the official template
- ${{ if not(contains(variables['Build.SourceBranch'], 'refs/pull')) }}:
  - stage: binaries
    displayName: Build Binaries
    dependsOn:
      - setup
      - test
    variables:
      STORAGE_ID: $[ stagedependencies.setup.env.outputs['EnvironmentalVariables.StorageID'] ]
      ACN_DIR: azure-container-networking
    jobs:
    - template: templates/binaries.jobs.yaml


  - stage: containerize
    displayName: Build Images
    dependsOn:
      - setup
      - test
    variables:
      ACN_DIR: azure-container-networking

      ACN_PACKAGE_PATH: github.com/Azure/azure-container-networking
      CNI_AI_PATH: $(ACN_PACKAGE_PATH)/telemetry.aiMetadata
      CNS_AI_PATH: $(ACN_PACKAGE_PATH)/cns/logger.aiMetadata
      NPM_AI_PATH: $(ACN_PACKAGE_PATH)/npm.aiMetadata
    jobs:

    - job: containerize_amd64
      displayName: Build Images
      pool:
        os: linux
        type: docker
      variables:
        LinuxContainerImage: $(LinuxContainerImage2)

        ob_outputDirectory: $(Build.ArtifactStagingDirectory)
        ob_git_checkout: true

        ARCH: amd64
      strategy:
        matrix:
          azure_ipam_linux_amd64:
            name: azure-ipam
            os: linux
            dockerfilePath: azure-ipam/Dockerfile
            archiveName: azure-ipam
            archiveVersion: $(azureIpamVersion)
            Suffix: azure-ipam_linux-amd64
          azure_ipam_windows:
            name: azure-ipam
            os: windows
            osVersion: ltsc2022
            dockerfilePath: $(ACN_DIR)/azure-ipam/Dockerfile
            archiveName: azure-ipam
            archiveVersion: $(azureIpamVersion)
            Suffix: azure-ipam_linux-amd64
          cni_linux_amd64:
            name: cni
            os: linux
            dockerfilePath: cni/Dockerfile
            extraArgs: '--build-arg CNI_AI_PATH=$(CNI_AI_PATH) --build-arg CNI_AI_ID=$(CNI_AI_ID)'
            archiveName: azure-cni
            archiveVersion: $(ACN_DIR)/$(cniVersion)
            Suffix: cni_linux-amd64
          cni_windows_amd64:
            name: cni
            os: windows
            osVersion: ltsc2022
            dockerfilePath: cni/Dockerfile
            extraArgs: '--build-arg CNI_AI_PATH=$(CNI_AI_PATH) --build-arg CNI_AI_ID=$(CNI_AI_ID)'
            archiveName: azure-cni
            archiveVersion: $(cniVersion)
            Suffix: cni_windows-amd64
          cns_linux_amd64:
            name: cns
            os: linux
            dockerfilePath: cns/Dockerfile
            extraArgs: '--build-arg CNS_AI_PATH=$(CNS_AI_PATH) --build-arg CNS_AI_ID=$(CNS_AI_ID)'
            archiveName: azure-cns
            archiveVersion: $(cnsVersion)
            Suffix: cns_linux-amd64
          cns_windows_amd64:
            name: cns
            os: windows
            osVersion: ltsc2022
            dockerfilePath: cns/Dockerfile
            extraArgs: '--build-arg CNS_AI_PATH=$(CNS_AI_PATH) --build-arg CNS_AI_ID=$(CNS_AI_ID)'
            archiveName: azure-cns
            archiveVersion: $(cnsVersion)
            Suffix: cns_windows-amd64
          ipv6_hp_bpf_linux_amd64:
            name: ipv6-hp-bpf
            os: linux
            dockerfilePath: bpf-prog/ipv6-hp-bpf/Dockerfile
            extraArgs: "--build-arg DEBUG=$(System.Debug)"
            archiveName: ipv6-hp-bpf
            archiveVersion: $(ipv6HpBpfVersion)
            Suffix: ipv6-hp-bpf_linux-amd64
          npm_linux_amd64:
            name: npm
            os: linux
            dockerfilePath: npm/linux.Dockerfile
            extraArgs: '--build-arg NPM_AI_PATH=$(NPM_AI_PATH) --build-arg NPM_AI_ID=$(NPM_AI_ID)'
            archiveName: azure-npm
            archiveVersion: $(npmVersion)
            Suffix: npm_linux-amd64
          npm_windows_amd64:
            name: npm
            os: windows
            osVersion: ltsc2022
            dockerfilePath: npm/windows.Dockerfile
            extraArgs: '--build-arg NPM_AI_PATH=$(NPM_AI_PATH) --build-arg NPM_AI_ID=$(NPM_AI_ID)'
            archiveName: azure-npm
            archiveVersion: $(npmVersion)
            Suffix: npm_windows-amd64
      steps:
      - checkout: azure-container-networking
  
      - template: containers/container-template.steps.yaml
        parameters:
          arch: amd64
          name: $(name)
          os: $(os)
          os_version: $(osVersion)
          dockerfile_path: $(dockerfilePath)
          archive_file: $(archiveName)-$(os)-$(arch)-$(archiveVersion)
          extra_args: $(extraArgs)
          build_tag: $(archiveVersion)

  
    - job: containerize_linux_arm64
      displayName: Build arm64 Images
      pool:
        os: linux
        type: docker
      variables:
        ob_outputDirectory: $(Build.ArtifactStagingDirectory)
        ob_git_checkout: true
        ob_enable_qemu: true

        ARCH: arm64
      strategy:
        matrix:
          azure_ipam_linux_arm64:
            name: azure-ipam
            os: linux
            dockerfilePath: $(ACN_DIR)/azure-ipam/Dockerfile
            archiveName: azure-ipam
            archiveVersion: $(azureIpamVersion)
            Suffix: azure-ipam_linux-arm64
          cni_linux_arm64:
            name: cni
            os: linux
            dockerfilePath: cni/Dockerfile
            extraArgs: '--build-arg CNI_AI_PATH=$(CNI_AI_PATH) --build-arg CNI_AI_ID=$(CNI_AI_ID)'
            archiveName: azure-cni
            archiveVersion: $(cniVersion)
            Suffix: cni_linux-arm64
          cns_linux_arm64:
            name: cns
            os: linux
            dockerfilePath: cns/Dockerfile
            extraArgs: '--build-arg CNS_AI_PATH=$(CNS_AI_PATH) --build-arg CNS_AI_ID=$(CNS_AI_ID)'
            archive_name: azure-cns
            archive_version: $(cnsVersion)
            Suffix: cns_linux-arm64
          ipv6_hp_bpf_linux_arm64:
            name: ipv6-hp-bpf
            os: linux
            dockerfilePath: bpf-prog/ipv6-hp-bpf/Dockerfile
            extraArgs: "--build-arg DEBUG=$(System.Debug)"
            archiveName: ipv6-hp-bpf
            archiveVersion: $(ipv6HpBpfVersion)
            Suffix: ipv6-hp-bpf_linux-arm64
          npm_linux_arm64:
            name: npm
            os: linux
            dockerfilePath: npm/linux.Dockerfile
            extraArgs: '--build-arg NPM_AI_PATH=$(NPM_AI_PATH) --build-arg NPM_AI_ID=$(NPM_AI_ID)'
            archiveName: azure-npm
            archiveVersion: $(npmVersion)
            Suffix: npm_linux-arm64
      steps:
      - checkout: azure-container-networking
  
      - template: containers/container-template.steps.yaml
        parameters:
          arch: arm64
          name: $(name)
          os: $(os)
          archive_file: $(archive_name)-$(os)-$(arch)-$(archive_version)
          extra_args: $(extraArgs)
          build_tag: $(archiveVersion)


#  - stage: publish
#    displayName: Publish Multiarch Manifests
#    dependsOn:
#      - containerize
#    variables:
#      Packaging.EnableSBOMSigning: false
#      IMAGE_PUBLISH_DIR: (Build.ArtifactStagingDirectory)/images
#    jobs:
#    - job:
#      displayName: Compile Manifests
#      pool:
#        os: linux
#        type: docker
#      variables:
#        ob_git_checkout: true
#      strategy:
#        matrix:
#          azure_ipam:
#            name: azure-ipam
#            platforms: linux/amd64 linux/arm64 windows/amd64
#          cni:
#            name: cni
#            platforms: linux/amd64 linux/arm64 windows/amd64
#          cns:
#            name: cns
#            platforms: linux/amd64 linux/arm64 windows/amd64
#          ipv6_hp_bpf:
#            name: ipv6-hp-bpf
#            platforms: linux/amd64 linux/arm64
#          npm:
#            name: npm
#            platforms: linux/amd64 linux/arm64 windows/amd64
#      steps:
#      - template: containers/manifest-template.steps.yaml
#        parameters:
#          name: $(name)
#          platforms: $(platforms)


#    # Cilium Podsubnet E2E tests
#    - template: singletenancy/cilium/cilium-e2e-job-template.yaml
#      parameters:
#        name: "cilium_e2e"
#        displayName: Cilium
#        clusterType: swift-byocni-nokubeproxy-up
#        clusterName: "ciliume2e"
#        vmSize: Standard_B2ms
#        k8sVersion: ""
#        dependsOn: "containerize"
#
#    # Cilium Nodesubnet E2E tests
#    - template: singletenancy/cilium-nodesubnet/cilium-nodesubnet-e2e-job-template.yaml
#      parameters:
#        name: "cilium_nodesubnet_e2e"
#        displayName: Cilium NodeSubnet
#        clusterType: nodesubnet-byocni-nokubeproxy-up
#        clusterName: "cilndsubnete2e"
#        vmSize: Standard_B2s
#        k8sVersion: ""
#        dependsOn: "containerize"
#
#    # Cilium Overlay E2E tests
#    - template: singletenancy/cilium-overlay/cilium-overlay-e2e-job-template.yaml
#      parameters:
#        name: "cilium_overlay_e2e"
#        displayName: Cilium on AKS Overlay
#        clusterType: overlay-byocni-nokubeproxy-up
#        clusterName: "cilovere2e"
#        vmSize: Standard_B2ms
#        k8sVersion: ""
#        dependsOn: "containerize"
#
#    # Cilium Dualstack Overlay E2E tests
#    - template: singletenancy/cilium-dualstack-overlay/cilium-dualstackoverlay-e2e-job-template.yaml
#      parameters:
#        name: "cilium_dualstackoverlay_e2e"
#        displayName: Cilium on AKS DualStack Overlay
#        os: linux
#        clusterType: dualstack-byocni-nokubeproxy-up
#        clusterName: "cildsovere2e"
#        vmSize: Standard_B2ms
#        k8sVersion: ""
#        dependsOn: "containerize"
#
#        # Cilium Overlay with hubble E2E tests
#    - template: singletenancy/cilium-overlay-withhubble/cilium-overlay-e2e-job-template.yaml
#      parameters:
#        name: "cilium_h_overlay_e2e"
#        displayName: Cilium on AKS Overlay with Hubble
#        clusterType: overlay-byocni-nokubeproxy-up
#        clusterName: "cilwhleovere2e"
#        vmSize: Standard_B2ms
#        k8sVersion: ""
#        dependsOn: "containerize"
#        testHubble: true
#
#    # Azure Overlay E2E tests
#    - template: singletenancy/azure-cni-overlay/azure-cni-overlay-e2e-job-template.yaml
#      parameters:
#        name: "linux_azure_overlay_e2e"
#        displayName: Azure Overlay Linux
#        os: linux
#        clusterType: overlay-byocni-up
#        clusterName: "linuxazovere2e"
#        vmSize: Standard_B2ms
#        k8sVersion: ""
#        dependsOn: "containerize"
#        scaleup: 100
#    
#    - template: singletenancy/azure-cni-overlay/azure-cni-overlay-e2e-job-template.yaml
#      parameters:
#        name: "win_azure_overlay_e2e"
#        displayName: Azure Overlay Windows
#        os: windows
#        clusterType: overlay-byocni-up
#        clusterName: "winazovere2e"
#        vmSize: Standard_B2ms
#        k8sVersion: ""
#        dependsOn: "containerize"
#        scaleup: 50
#
#    # Azure Overlay E2E Stateless CNI tests
#    - template: singletenancy/azure-cni-overlay-stateless/azure-cni-overlay-stateless-e2e-job-template.yaml
#      parameters:
#        name: "azure_overlay_stateless_e2e"
#        displayName: Azure Stateless CNI Overlay
#        os: windows
#        clusterType: overlay-byocni-up
#        clusterName: "statelesswin"
#        vmSize: Standard_B2ms
#        dependsOn: "containerize"
#
#    # AKS Swift E2E tests
#    - template: singletenancy/aks-swift/e2e-job-template.yaml
#      parameters:
#        name: "aks_swift_e2e"
#        displayName: AKS Swift Ubuntu
#        os: linux
#        clusterType: swift-byocni-up
#        clusterName: "swifte2e"
#        vmSize: Standard_B2ms
#        k8sVersion: ""
#        dependsOn: "containerize"
#
#    # AKS Swift Vnet Scale E2E tests
#    - template: singletenancy/aks-swift/e2e-job-template.yaml
#      parameters:
#        name: "aks_swift_vnetscale_e2e"
#        displayName: AKS Swift Vnet Scale Ubuntu
#        os: linux
#        clusterType: vnetscale-swift-byocni-up
#        clusterName: "vscaleswifte2e"
#        vmSize: Standard_B2ms
#        k8sVersion: "1.30"
#        dependsOn: "containerize"
#
#    # CNIv1 E2E tests
#    - template: singletenancy/aks/e2e-job-template.yaml
#      parameters:
#        name: "aks_ubuntu_22_linux_e2e"
#        displayName: AKS Ubuntu 22
#        arch: "amd64"
#        os: "linux"
#        clusterType: cniv1-up
#        clusterName: "ubuntu22e2e"
#        vmSize: Standard_B2s
#        k8sVersion: 1.25
#        scaleup: 100
#        dependsOn: "containerize"
#
#    - template: singletenancy/aks/e2e-job-template.yaml
#      parameters:
#        name: "aks_windows_22_e2e"
#        displayName: AKS Windows 2022
#        arch: amd64
#        os: "windows"
#        clusterType: cniv1-up
#        clusterName: "win22e2e"
#        vmSize: Standard_B2ms
#        os_version: "ltsc2022"
#        scaleup: 50
#        dependsOn: "containerize"
#
#    # CNI dual stack overlay E2E tests
#    - template: singletenancy/dualstack-overlay/dualstackoverlay-e2e-job-template.yaml
#      parameters:
#        name: "linux_dualstackoverlay_e2e"
#        displayName: AKS DualStack Overlay Linux
#        os: linux
#        clusterType: dualstack-overlay-byocni-up
#        clusterName: "linuxdsovere2e"
#        vmSize: Standard_B2ms
#        dependsOn: "containerize"
#        scaleup: 100
#
#    - template: singletenancy/dualstack-overlay/dualstackoverlay-e2e-job-template.yaml
#      parameters:
#        name: "win_dualstackoverlay_e2e"
#        displayName: AKS DualStack Overlay Windows
#        os: windows
#        clusterType: dualstack-overlay-byocni-up
#        clusterName: "windsovere2e"
#        vmSize: Standard_B2ms
#        dependsOn: "containerize"
#        scaleup: 50
#
#    - stage: delete
#      displayName: Delete Clusters
#      condition: always()
#      dependsOn:
#        - setup
#        - linux_azure_overlay_e2e
#        - win_azure_overlay_e2e
#        - azure_overlay_stateless_e2e
#        - aks_swift_e2e
#        - cilium_e2e
#        - cilium_nodesubnet_e2e
#        - cilium_overlay_e2e
#        - cilium_h_overlay_e2e
#        - aks_ubuntu_22_linux_e2e
#        - aks_swift_vnetscale_e2e
#        - aks_windows_22_e2e
#        - linux_dualstackoverlay_e2e
#        - win_dualstackoverlay_e2e
#        - cilium_dualstackoverlay_e2e
#      pool:
#        name: "$(BUILD_POOL_NAME_DEFAULT)"
#        type: linux
#        isCustom: true
#      variables:
#        commitID: $[ stagedependencies.setup.env.outputs['EnvironmentalVariables.commitID'] ]
#      jobs:
#        - job: delete_build
#          displayName: Delete Cluster
#          strategy:
#            matrix:
#              cilium_e2e:
#                name: cilium_e2e
#                clusterName: "ciliume2e"
#                region: $(REGION_AKS_CLUSTER_TEST)
#              cilium_nodesubnet_e2e:
#                name: cilium_nodesubnet_e2e
#                clusterName: "cilndsubnete2e"
#                region: $(REGION_AKS_CLUSTER_TEST)
#              cilium_overlay_e2e:
#                name: cilium_overlay_e2e
#                clusterName: "cilovere2e"
#                region: $(REGION_AKS_CLUSTER_TEST)
#              cilium_h_overlay_e2e:
#                name: cilium_h_overlay_e2e
#                clusterName: "cilwhleovere2e"
#                region: $(REGION_AKS_CLUSTER_TEST)
#              linux_azure_overlay_e2e:
#                name: linux_azure_overlay_e2e
#                clusterName: "linuxazovere2e"
#                region: $(REGION_AKS_CLUSTER_TEST)
#              windows_azure_overlay_e2e:
#                name: win_azure_overlay_e2e
#                clusterName: "winazovere2e"
#                region: $(REGION_AKS_CLUSTER_TEST)
#              azure_overlay_stateless_e2e:
#                name: azure_overlay_stateless_e2e
#                clusterName: "statelesswin"
#                region: $(REGION_AKS_CLUSTER_TEST)
#              aks_swift_e2e:
#                name: aks_swift_e2e
#                clusterName: "swifte2e"
#                region: $(REGION_AKS_CLUSTER_TEST)
#              aks_swift_vnetscale_e2e:
#                name: aks_swift_vnetscale_e2e
#                clusterName: "vscaleswifte2e"
#                region: $(REGION_AKS_CLUSTER_TEST)
#              aks_ubuntu_22_linux_e2e:
#                name: aks_ubuntu_22_linux_e2e
#                clusterName: "ubuntu22e2e"
#                region: $(REGION_AKS_CLUSTER_TEST)
#              aks_windows_22_e2e:
#                name: aks_windows_22_e2e
#                clusterName: "win22e2e"
#                region: $(REGION_AKS_CLUSTER_TEST)
#              linux_dualstackoverlay_e2e:
#                name: linux_dualstackoverlay_e2e
#                clusterName: "linuxdsovere2e"
#                region: $(REGION_DUALSTACKOVERLAY_CLUSTER_TEST)
#              windows_dualstackoverlay_e2e:
#                name: windows_dualstackoverlay_e2e
#                clusterName: "windsovere2e"
#                region: $(REGION_DUALSTACKOVERLAY_CLUSTER_TEST)
#              cilium_dualstackoverlay_e2e:
#                name: cilium_dualstackoverlay_e2e
#                clusterName: "cildsovere2e"
#                region: $(REGION_DUALSTACKOVERLAY_CLUSTER_TEST)
#          steps:
#            - template: templates/delete-cluster.yaml
#              parameters:
#                name: $(name)
#                clusterName: $(clusterName)-$(commitID)
#                region: $(region)
#                sub: $(SUB_AZURE_NETWORK_AGENT_BUILD_VALIDATIONS)
#                svcConn: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
#
