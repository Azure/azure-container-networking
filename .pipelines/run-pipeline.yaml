stages:
- stage: setup
  displayName: ACN
  variables:
    ACN_DIR: azure-container-networking
  jobs:
  - job: env
    displayName: Setup
    pool:
      type: linux
    variables:
      ob_outputDirectory: $(Build.ArtifactStagingDirectory)
      ob_artifactSuffix: _source

      ACR_DIR: $(Build.SourcesDirectory)/azure-container-networking
    steps:
    - checkout: azure-container-networking
    - template: build/ob-prepare.steps.yaml

- template: templates/run-unit-tests.yaml


- ${{ if not(contains(variables['Build.SourceBranch'], 'refs/pull')) }}:
  - stage: build
    displayName: "Build Project"
    dependsOn:
      - setup
      - test
    variables:
      ACN_DIR: drop_setup_env_source
      ACN_PACKAGE_PATH: github.com/Azure/azure-container-networking
      CNI_AI_PATH: $(ACN_PACKAGE_PATH)/telemetry.aiMetadata
      CNS_AI_PATH: $(ACN_PACKAGE_PATH)/cns/logger.aiMetadata
      NPM_AI_PATH: $(ACN_PACKAGE_PATH)/npm.aiMetadata

      STORAGE_ID: $[ stageDependencies.setup.env.outputs['EnvironmentalVariables.StorageID'] ]
      TAG: $[ stageDependencies.setup.env.outputs['EnvironmentalVariables.Tag'] ]
      AZURE_IPAM_VERSION: $[ stageDependencies.setup.env.outputs['EnvironmentalVariables.azureIpamVersion'] ]
      CNI_VERSION: $[ stageDependencies.setup.env.outputs['EnvironmentalVariables.cniVersion'] ]
      CNS_VERSION: $[ stageDependencies.setup.env.outputs['EnvironmentalVariables.cnsVersion'] ]
      IPV6_HP_BPF_VERSION: $[ stageDependencies.setup.env.outputs['EnvironmentalVariables.ipv6HpBpfVersion'] ]
      NPM_VERSION: $[ stageDependencies.setup.env.outputs['EnvironmentalVariables.npmVersion'] ]
    jobs:
    - job: binaries
      displayName: "Build Binaries"
      pool:
        type: linux
        vmImage: $(LinuxContainerImage2)
      variables:
        ob_outputDirectory: $(Build.ArtifactStagingDirectory)/output
        ob_git_checkout: true
        ob_enable_qemu: true
    
        ACN_DIR: azure-container-networking
      steps:
      - checkout: azure-container-networking
      - template: build/binaries.steps.yaml


    - job: images_linux_amd64
      displayName: "Build Linux/AMD64 Images"
      pool:
        os: linux
        type: docker
      variables:
        ob_outputDirectory: $(Build.SourcesDirectory)/out
        ob_artifactSuffix: _$(name)_linux_amd64

        ARCH: amd64
        OS: linux
      strategy:
        maxParallel: 5
        matrix:
          azure_ipam:
            name: azure-ipam
            dockerfilePath: $(ACN_DIR)/azure-ipam
            extraArgs: ''
            archiveName: azure-ipam
            archiveVersion: $(AZURE_IPAM_VERSION)
          cni:
            name: cni
            dockerfilePath: $(ACN_DIR)/cni
            extraArgs: '--build-arg CNI_AI_PATH=$(CNI_AI_PATH) --build-arg CNI_AI_ID=$(CNI_AI_ID)'
            archiveName: azure-cni
            archiveVersion: $(CNI_VERSION)
          cns:
            name: cns
            dockerfilePath: $(ACN_DIR)/cns
            extraArgs: '--build-arg CNS_AI_PATH=$(CNS_AI_PATH) --build-arg CNS_AI_ID=$(CNS_AI_ID)'
            archiveName: azure-cns
            archiveVersion: $(CNS_VERSION)
          ipv6_hp_bpf:
            name: ipv6-hp-bpf
            dockerfilePath: $(ACN_DIR)/bpf-prog/ipv6-hp-bpf
            extraArgs: "--build-arg DEBUG=$(System.Debug)"
            archiveName: ipv6-hp-bpf
            archiveVersion: $(IPV6_HP_BPF_VERSION)
          npm:
            name: npm
            dockerfilePath: $(ACN_DIR)/npm
            extraArgs: '--build-arg NPM_AI_PATH=$(NPM_AI_PATH) --build-arg NPM_AI_ID=$(NPM_AI_ID)'
            archiveName: azure-npm
            archiveVersion: $(NPM_VERSION)
      steps:
      - template: build/image.steps.yaml
        parameters:
          arch: amd64
          os: linux
          name: $(name)
          dockerfile_path: $(dockerfilePath)
          archive_file: $(archiveName)-$(OS)-$(ARCH)-$(archiveVersion)
          extra_args: $(extraArgs)
          build_tag: $(archiveVersion)

    - job: images_windows_amd64
      displayName: "Build Windows Images"
      pool:
        os: windows
        type: docker
        vmImage: $(WindowsContainerImage2)
      variables:
        WindowsContainerImage: $(WindowsContainerImage2)
        ob_outputDirectory: $(Build.SourcesDirectory)/out
        ob_artifactSuffix: _$(name)_windows_amd64
        #ob_enable_qemu: true
        #ob_build_container: true

        ARCH: amd64
        OS: windows
      strategy:
        maxParallel: 5
        matrix:
          azure_ipam:
            name: azure-ipam
            osVersion: ltsc2022
            dockerfilePath: $(ACN_DIR)/azure-ipam
            extraArgs: ''
            archiveName: azure-ipam
            archiveVersion: $(AZURE_IPAM_VERSION)
          cni:
            name: cni
            osVersion: ltsc2022
            dockerfilePath: $(ACN_DIR)/cni
            extraArgs: '--build-arg CNI_AI_PATH=$(CNI_AI_PATH) --build-arg CNI_AI_ID=$(CNI_AI_ID)'
            archiveName: azure-cni
            archiveVersion: $(CNI_VERSION)
          cns:
            name: cns
            osVersion: ltsc2022
            dockerfilePath: $(ACN_DIR)/cns
            extraArgs: '--build-arg CNS_AI_PATH=$(CNS_AI_PATH) --build-arg CNS_AI_ID=$(CNS_AI_ID)'
            archiveName: azure-cns
            archiveVersion: $(CNS_VERSION)
          npm:
            name: npm
            osVersion: ltsc2022
            dockerfilePath: $(ACN_DIR)/npm-windows
            extraArgs: '--build-arg NPM_AI_PATH=$(NPM_AI_PATH) --build-arg NPM_AI_ID=$(NPM_AI_ID)'
            archiveName: azure-npm
            archiveVersion: $(NPM_VERSION)
      steps:
      - template: build/image.steps.yaml
        parameters:
          arch: amd64
          os: windows
          os_version: $(osVersion)
          name: $(name)
          dockerfile_path: $(dockerfilePath)
          archive_file: $(archiveName)-$(OS)-$(ARCH)-$(archiveVersion)
          extra_args: $(extraArgs)
          build_tag: $(archiveVersion)

  
    - job: images_linux_arm64
      displayName: "Build Linux/ARM64 Images"
      pool:
        os: linux
        type: docker
        hostArchitecture: arm64
      variables:
        #LinuxContainerImage: $(LinuxContainerImage3) # Use if Mariner does not work.
        ob_outputDirectory: $(Build.SourcesDirectory)/out
        ob_artifactSuffix: _$(name)_linux_arm64
        ob_build_container: true

        ARCH: arm64
        OS: linux
      strategy:
        maxParallel: 3
        matrix:
          azure_ipam:
            name: azure-ipam
            os: linux
            dockerfilePath: $(ACN_DIR)/azure-ipam
            archiveName: azure-ipam
            archiveVersion: $(AZURE_IPAM_VERSION)
            extraArgs: ''
          cni:
            name: cni
            os: linux
            dockerfilePath: $(ACN_DIR)/cni
            extraArgs: '--build-arg CNI_AI_PATH=$(CNI_AI_PATH) --build-arg CNI_AI_ID=$(CNI_AI_ID)'
            archiveName: azure-cni
            archiveVersion: $(CNI_VERSION)
          cns:
            name: cns
            os: linux
            dockerfilePath: $(ACN_DIR)/cns
            extraArgs: '--build-arg CNS_AI_PATH=$(CNS_AI_PATH) --build-arg CNS_AI_ID=$(CNS_AI_ID)'
            archiveName: azure-cns
            archiveVersion: $(CNS_VERSION)
          ipv6_hp_bpf:
            name: ipv6-hp-bpf
            os: linux
            dockerfilePath: $(ACN_DIR)/bpf-prog/ipv6-hp-bpf
            extraArgs: "--build-arg DEBUG=$(System.Debug)"
            archiveName: ipv6-hp-bpf
            archiveVersion: $(IPV6_HP_BPF_VERSION)
          npm:
            name: npm
            os: linux
            dockerfilePath: $(ACN_DIR)/npm
            extraArgs: '--build-arg NPM_AI_PATH=$(NPM_AI_PATH) --build-arg NPM_AI_ID=$(NPM_AI_ID)'
            archiveName: azure-npm
            archiveVersion: $(NPM_VERSION)
      steps:
      - template: build/image.steps.yaml
        parameters:
          arch: arm64
          name: $(name)
          os: $(os)
          dockerfile_path: $(dockerfilePath)
          build_tag: $(archiveVersion)
          extra_args: $(extraArgs)
          archive_file: $(archiveName)-$(os)-$(arch)-$(archiveVersion)


  # Cilium Podsubnet E2E tests
  - template: singletenancy/cilium/cilium-e2e-job-template.yaml
    parameters:
      name: "cilium_e2e"
      displayName: Cilium
      clusterType: swift-byocni-nokubeproxy-up
      clusterName: "ciliume2e"
      vmSize: Standard_B2ms
      k8sVersion: ""
      dependsOn: "build"

  # Cilium Nodesubnet E2E tests
  - template: singletenancy/cilium-nodesubnet/cilium-nodesubnet-e2e-job-template.yaml
    parameters:
      name: "cilium_nodesubnet_e2e"
      displayName: Cilium NodeSubnet
      clusterType: nodesubnet-byocni-nokubeproxy-up
      clusterName: "cilndsubnete2e"
      vmSize: Standard_B2s
      k8sVersion: ""
      dependsOn: build

  # Cilium Overlay E2E tests
  - template: singletenancy/cilium-overlay/cilium-overlay-e2e-job-template.yaml
    parameters:
      name: "cilium_overlay_e2e"
      displayName: Cilium on AKS Overlay
      clusterType: overlay-byocni-nokubeproxy-up
      clusterName: "cilovere2e"
      vmSize: Standard_B2ms
      k8sVersion: ""
      dependsOn: build

  # Cilium Dualstack Overlay E2E tests
  - template: singletenancy/cilium-dualstack-overlay/cilium-dualstackoverlay-e2e-job-template.yaml
    parameters:
      name: "cilium_dualstackoverlay_e2e"
      displayName: Cilium on AKS DualStack Overlay
      os: linux
      clusterType: dualstack-byocni-nokubeproxy-up
      clusterName: "cildsovere2e"
      vmSize: Standard_B2ms
      k8sVersion: ""
      dependsOn: build

      # Cilium Overlay with hubble E2E tests
  - template: singletenancy/cilium-overlay-withhubble/cilium-overlay-e2e-job-template.yaml
    parameters:
      name: "cilium_h_overlay_e2e"
      displayName: Cilium on AKS Overlay with Hubble
      clusterType: overlay-byocni-nokubeproxy-up
      clusterName: "cilwhleovere2e"
      vmSize: Standard_B2ms
      k8sVersion: ""
      dependsOn: build
      testHubble: true

  # Azure Overlay E2E tests
  - template: singletenancy/azure-cni-overlay/azure-cni-overlay-e2e-job-template.yaml
    parameters:
      name: "linux_azure_overlay_e2e"
      displayName: Azure Overlay Linux
      os: linux
      clusterType: overlay-byocni-up
      clusterName: "linuxazovere2e"
      vmSize: Standard_B2ms
      k8sVersion: ""
      dependsOn: build
      scaleup: 100
  
  - template: singletenancy/azure-cni-overlay/azure-cni-overlay-e2e-job-template.yaml
    parameters:
      name: "win_azure_overlay_e2e"
      displayName: Azure Overlay Windows
      os: windows
      clusterType: overlay-byocni-up
      clusterName: "winazovere2e"
      vmSize: Standard_B2ms
      k8sVersion: ""
      dependsOn: build
      scaleup: 50

  # Azure Overlay E2E Stateless CNI tests
  - template: singletenancy/azure-cni-overlay-stateless/azure-cni-overlay-stateless-e2e-job-template.yaml
    parameters:
      name: "azure_overlay_stateless_e2e"
      displayName: Azure Stateless CNI Overlay
      os: windows
      clusterType: overlay-byocni-up
      clusterName: "statelesswin"
      vmSize: Standard_B2ms
      dependsOn: build

  # AKS Swift E2E tests
  - template: singletenancy/aks-swift/e2e-job-template.yaml
    parameters:
      name: "aks_swift_e2e"
      displayName: AKS Swift Ubuntu
      os: linux
      clusterType: swift-byocni-up
      clusterName: "swifte2e"
      vmSize: Standard_B2ms
      k8sVersion: ""
      dependsOn: build

  # AKS Swift Vnet Scale E2E tests
  - template: singletenancy/aks-swift/e2e-job-template.yaml
    parameters:
      name: "aks_swift_vnetscale_e2e"
      displayName: AKS Swift Vnet Scale Ubuntu
      os: linux
      clusterType: vnetscale-swift-byocni-up
      clusterName: "vscaleswifte2e"
      vmSize: Standard_B2ms
      k8sVersion: "1.30"
      dependsOn: build

  # CNIv1 E2E tests
  - template: singletenancy/aks/e2e-job-template.yaml
    parameters:
      name: "aks_ubuntu_22_linux_e2e"
      displayName: AKS Ubuntu 22
      arch: "amd64"
      os: "linux"
      clusterType: cniv1-up
      clusterName: "ubuntu22e2e"
      vmSize: Standard_B2s
      k8sVersion: 1.25
      scaleup: 100
      dependsOn: build

  - template: singletenancy/aks/e2e-job-template.yaml
    parameters:
      name: "aks_windows_22_e2e"
      displayName: AKS Windows 2022
      arch: amd64
      os: "windows"
      clusterType: cniv1-up
      clusterName: "win22e2e"
      vmSize: Standard_B2ms
      os_version: "ltsc2022"
      scaleup: 50
      dependsOn: build

  # CNI dual stack overlay E2E tests
  - template: singletenancy/dualstack-overlay/dualstackoverlay-e2e-job-template.yaml
    parameters:
      name: "linux_dualstackoverlay_e2e"
      displayName: AKS DualStack Overlay Linux
      os: linux
      clusterType: dualstack-overlay-byocni-up
      clusterName: "linuxdsovere2e"
      vmSize: Standard_B2ms
      dependsOn: build
      scaleup: 100

  - template: singletenancy/dualstack-overlay/dualstackoverlay-e2e-job-template.yaml
    parameters:
      name: "win_dualstackoverlay_e2e"
      displayName: AKS DualStack Overlay Windows
      os: windows
      clusterType: dualstack-overlay-byocni-up
      clusterName: "windsovere2e"
      vmSize: Standard_B2ms
      dependsOn: build
      scaleup: 50

  - stage: delete
    displayName: Delete Clusters
    condition: always()
    dependsOn:
      - setup
      - linux_azure_overlay_e2e
      - win_azure_overlay_e2e
      - azure_overlay_stateless_e2e
      - aks_swift_e2e
      - cilium_e2e
      - cilium_nodesubnet_e2e
      - cilium_overlay_e2e
      - cilium_h_overlay_e2e
      - aks_ubuntu_22_linux_e2e
      - aks_swift_vnetscale_e2e
      - aks_windows_22_e2e
      - linux_dualstackoverlay_e2e
      - win_dualstackoverlay_e2e
      - cilium_dualstackoverlay_e2e
    variables:
      commitID: $[ stagedependencies.setup.env.outputs['EnvironmentalVariables.commitID'] ]
    jobs:
    - job: delete_build
      displayName: Delete Cluster
      pool:
        name: "$(BUILD_POOL_NAME_DEFAULT)"
        isCustom: true
        type: linux
      strategy:
        matrix:
          cilium_e2e:
            name: cilium_e2e
            clusterName: "ciliume2e"
            region: $(REGION_AKS_CLUSTER_TEST)
          cilium_nodesubnet_e2e:
            name: cilium_nodesubnet_e2e
            clusterName: "cilndsubnete2e"
            region: $(REGION_AKS_CLUSTER_TEST)
          cilium_overlay_e2e:
            name: cilium_overlay_e2e
            clusterName: "cilovere2e"
            region: $(REGION_AKS_CLUSTER_TEST)
          cilium_h_overlay_e2e:
            name: cilium_h_overlay_e2e
            clusterName: "cilwhleovere2e"
            region: $(REGION_AKS_CLUSTER_TEST)
          linux_azure_overlay_e2e:
            name: linux_azure_overlay_e2e
            clusterName: "linuxazovere2e"
            region: $(REGION_AKS_CLUSTER_TEST)
          windows_azure_overlay_e2e:
            name: win_azure_overlay_e2e
            clusterName: "winazovere2e"
            region: $(REGION_AKS_CLUSTER_TEST)
          azure_overlay_stateless_e2e:
            name: azure_overlay_stateless_e2e
            clusterName: "statelesswin"
            region: $(REGION_AKS_CLUSTER_TEST)
          aks_swift_e2e:
            name: aks_swift_e2e
            clusterName: "swifte2e"
            region: $(REGION_AKS_CLUSTER_TEST)
          aks_swift_vnetscale_e2e:
            name: aks_swift_vnetscale_e2e
            clusterName: "vscaleswifte2e"
            region: $(REGION_AKS_CLUSTER_TEST)
          aks_ubuntu_22_linux_e2e:
            name: aks_ubuntu_22_linux_e2e
            clusterName: "ubuntu22e2e"
            region: $(REGION_AKS_CLUSTER_TEST)
          aks_windows_22_e2e:
            name: aks_windows_22_e2e
            clusterName: "win22e2e"
            region: $(REGION_AKS_CLUSTER_TEST)
          linux_dualstackoverlay_e2e:
            name: linux_dualstackoverlay_e2e
            clusterName: "linuxdsovere2e"
            region: $(REGION_DUALSTACKOVERLAY_CLUSTER_TEST)
          windows_dualstackoverlay_e2e:
            name: windows_dualstackoverlay_e2e
            clusterName: "windsovere2e"
            region: $(REGION_DUALSTACKOVERLAY_CLUSTER_TEST)
          cilium_dualstackoverlay_e2e:
            name: cilium_dualstackoverlay_e2e
            clusterName: "cildsovere2e"
            region: $(REGION_DUALSTACKOVERLAY_CLUSTER_TEST)
      steps:
      - template: templates/delete-cluster.yaml
        parameters:
          name: $(name)
          clusterName: $(clusterName)-$(commitID)
          region: $(region)
          sub: $(SUB_AZURE_NETWORK_AGENT_BUILD_VALIDATIONS)
          svcConn: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)

#- stage: e2e
#  displayName: "Run E2E Tests"
#  dependsOn:
#  - setup
#  - build
#  variables:
#    ACN_DIR: azure-container-networking
#  jobs:
#  - template: test/e2e/run-e2e.jobs.yaml
#    parameters:
#      e2e_tests:
#      - job: cilium_podsubnet
#        displayName: "Cilium PodSubnet"
#        templateContext:
#          clusterPrefix: "cilium-podsubnet"
#          subscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
#          region: $(REGION_AKS_CLUSTER_TEST)
#          vmSKU: Standard_B2ms
#          capabilities:
#            dataplane: cilium
#            cniType: podsubnet
#            tenancy: single
#
#      - job: cilium_nodesubnet
#- template: singletenancy/cilium-nodesubnet/cilium-nodesubnet-e2e-job-template.yaml
#        displayName: "Cilium NodeSubnet"
#        templateContext:
#          subscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
#          region: $(REGION_AKS_CLUSTER_TEST)
#          clusterPrefix: "cilium-nodesubnet"
#          vmSKU: Standard_B2s
#          capabilities:
#            dataplane: cilium
#            cniType: nodesubnet
#            tenancy: single
#
#      - job: cilium_overlay
#        displayName: "Cilium on AKS Overlay"
#- template: singletenancy/cilium-overlay/cilium-overlay-e2e-job-template.yaml
#        templateContext:
#          subscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
#          region: $(REGION_AKS_CLUSTER_TEST)
#          clusterPrefix: "cilium-overlay"
#          vmSKU: Standard_B2ms
#          capabilities:
#            dataplane: cilium
#            cniType: nodesubnet
#            tenancy: single
#
#      - job: cilium_overlay_dualstack
#        displayName: "Cilium on AKS DualStack Overlay"
#        templateContext:
#          subscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
#          region: $(REGION_AKS_CLUSTER_TEST)
#          clusterPrefix: "cilium-overlay-ds"
#          vmSKU: Standard_B2ms
#          region: $(REGION_DUALSTACKOVERLAY_CLUSTER_TEST) # Dualstack has a specific region requirement
#          capabilities:
#            dataplane: cilium
#            cniType: nodesubnet
#            dualstack: true
#            tenancy: single
#
#  Hubble: k8s >= 1.29
#      - job: cilium_overlay_hubble
#        displayName: "Cilium on AKS Overlay with Hubble"
#- template: singletenancy/cilium-overlay-withhubble/cilium-overlay-e2e-job-template.yaml
#        templateContext:
#          subscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
#          region: $(REGION_AKS_CLUSTER_TEST)
#          clusterPrefix: "cilium-overlay-hubble"
#          testHubble: true
#          clusters:
#          - cluster:
#            cniType: overlay
#            dataplane: cilium
#            vmSKU: Standard_B2ms
#            capabilities:
#              tenancy: single
#              hubble: true
#
#      - job: overlay_linux
#        displayName: "Azure Overlay Linux"
#        templateContext:
#          subscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
#          region: $(REGION_AKS_CLUSTER_TEST)
#          vmSize: ${{ parameters.vmSize }}
#          vmSizeWin: ${{ parameters.vmSize }}
#          clusterPrefix: "overlay-linux"
#          vmSKU: Standard_B2ms
#          os: linux
#          scaleup: 100
#          capabilities:
#            dataplane: kubenet
#            cniType: overlay
#            tenancy: single
#
#      - job: overlay_windows
#        displayName: "Azure Overlay Windows"
#        templateContext:
#          subscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
#          clusterPrefix: "overlay-windows"
#          vmSKU: Standard_B2ms
#          os: windows
#          scaleup: 50
#          capabilities:
#            dataplane: kubenet
#            cniType: overlay
#            tenancy: single
#
#      - job: azure_overlay_stateless
#        displayName: "Azure Stateless CNI Overlay"
#        templateContext:
#          subscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
#          clusterPrefix: "overlay-stateless-windows"
#          vmSKU: Standard_B2ms
#          os: windows
#          region: $(REGION_AKS_CLUSTER_TEST)
#          capabilities:
#            dataplane: kubenet
#            cniType: overlay
#            tenancy: single
#
#      - job: aks_swift
#        displayName: "AKS Swift Ubuntu"
#        templateContext:
#          subscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
#          clusterPrefix: "swift-linux"
#          vmSKU: Standard_B2ms
#          os: linux
#          region: $(REGION_AKS_CLUSTER_TEST)
#          vmSize: ${{ parameters.vmSize }}
#          vmSizeWin: ${{ parameters.vmSize }} # Matching linux vmSize
#          capabilities:
#            dataplane: kubenet
#            cniType: podsubnet
#            tenancy: single
#
#      - job: aks_swift_vnetscale
#        displayName: "AKS Swift Vnet Scale Ubuntu"
#        templateContext:
#          subscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
#          clusterPrefix: "vnetscale-linux"
#          region: $(REGION_AKS_CLUSTER_TEST)
#          vmSKU: Standard_B2ms
#          os: linux
#          k8sVersion: "1.30"
#          capabilities:
#            dataplane: kubenet
#            cniType: vnetscale
#            tenancy: single
#
#      - job: cniv1_linux
#        displayName: "AKS Ubuntu 22"
#        templateContext:
#          subscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
#          clusterPrefix: "cniv1-linux"
#          vmSKU: Standard_B2s
#          os: linux
#          k8sVersion: 1.25
#          scaleup: 100
#          capabilities:
#            dataplane: kubenet
#            cniType: cniv1
#            tenancy: single
#
#      - job: cniv1_windows
#        displayName: "AKS Windows 2022"
#        templateContext:
#          subscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
#          clusterPrefix: "cniv1-windows"
#          vmSKU: Standard_B2ms
#          os: windows
#          os_version: ltsc2022
#          scaleup: 50
#          capabilities:
#            dataplane: kubenet
#            cniType: cniv1
#            tenancy: single
#
#      - job: overlay_dualstack_linux
#        displayName: "AKS DualStack Overlay Linux"
#        templateContext:
#          subscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
#          region: $(REGION_DUALSTACKOVERLAY_CLUSTER_TEST) # Dualstack has a specific region requirement
#          clusterPrefix: "overlay-linux-ds"
#          vmSKU: Standard_B2ms
#          vmSize: ${{ parameters.vmSize }}
#          vmSizeWin: ${{ parameters.vmSize }}
#          os: linux
#          scaleup: 100
#          capabilities:
#            dataplane: kubenet
#            cniType: overlay
#            tenancy: single
#            dualstack: true
#
#      - job: overlay_dualstack_windows
#        displayName: "AKS DualStack Overlay Windows"
#        templateContext:
#          subscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
#          region: $(REGION_DUALSTACKOVERLAY_CLUSTER_TEST) # Dualstack has a specific region requirement
#          clusterPrefix: "overlay-windows-ds"
#          vmSKU: Standard_B2ms
#          os: windows
#          scaleup: 50
#          capabilities:
#            dataplane: kubenet
#            cniType: overlay
#            tenancy: single
#            dualstack: true
#
#            for swiftv2 $(ACN_TEST_SERVICE_CONNECTION)
