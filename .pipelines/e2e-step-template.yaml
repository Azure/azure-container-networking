parameters:
  name: ""
  clusterDefinition: ""
  clusterDefinitionCniTypeKey: ""
  clusterDefinitionCniBuildOS: ""
  clusterDefinitionCniBuildExt: ""

steps:
  - checkout: none
  - bash: |
      go version
      go env
      go get -v github.com/Azure/aks-engine
      mkdir -p '$(GOBIN)'
      mkdir -p '$(GOPATH)/pkg'
      mkdir -p '$(modulePath)'
      echo '##vso[task.prependpath]$(GOBIN)'
      echo '##vso[task.prependpath]$(GOROOT)/bin'
    name: "GoEnv"
    displayName: "Set up the Go environment"

  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: current
      artifactName: clusterdefinitions
      targetPath: "$(modulePath)"
      #buildType: 'current' # Options: current, specific
      #project: # Required when buildType == Specific

  - bash: |
      ls -lah
      export CNI_URL=https://$(ARTIFACT_STORAGE).blob.core.windows.net/acn-$(CommitHash)/azure-vnet-cni-${{ parameters.clusterDefinitionCniBuildOS }}-amd64-$(Tag)${{ parameters.clusterDefinitionCniBuildExt }}
      export CNI_TYPE=${{ parameters.clusterDefinitionCniTypeKey }}
      echo CNI type is $CNI_TYPE
      #sed -i "s|\"$CNI_TYPE\":\".*\"|\"$CNI_TYPE\":$CNI_URL|g" '${{ parameters.clusterDefinition }}'	      
      # sed -i "s|\"$CNI_TYPE\":\".*\"|\"$CNI_TYPE\":$CNI_URL|g" '${{ parameters.clusterDefinition }}'
      cat '${{ parameters.clusterDefinition }}' | jq --arg cnikey $CNI_TYPE --arg cniurl $CNI_URL '.properties.orchestratorProfile.kubernetesConfig[$cnikey]= $cniurl' > '${{ parameters.clusterDefinition }}'.tmp	      #
      # sed -i "s|\"azureCNIVersion\":\".*\"|\"azureCNIVersion\":\"$(Tag)\"|g" '${{ parameters.clusterDefinition }}'
      #sed -i "s|\"azureCNIVersion\":\".*\"|\"azureCNIVersion\":\"$(Tag)\"|g" '${{ parameters.clusterDefinition }}'	
      cat '${{ parameters.clusterDefinition }}'.tmp | jq --arg tag $(Tag) '.properties.orchestratorProfile.kubernetesConfig.azureCNIVersion = $tag' > '${{ parameters.clusterDefinition }}'
      echo "Running E2E tests against a cluster built with the following API model:"
      cat '${{ parameters.clusterDefinition }}'
      cp ${{ parameters.clusterDefinition }} clusterDefinition.json
      curl -L https://dl.k8s.io/v1.16.0/kubernetes-client-linux-amd64.tar.gz | tar xvzf -
      sudo cp kubernetes/client/bin/kubectl /usr/local/bin/kubectl
      sudo cp kubernetes/client/bin/kubectl /usr/local/bin/k
      make bootstrap
      make build-binary
    displayName: Build AKS-Engine
    workingDirectory: "$(modulePath)"

  - bash: |
      export CLUSTER_DEFINITION=./'${{ parameters.clusterDefinition }}'
      export ORCHESTRATOR=kubernetes 
      export CREATE_VNET=false 
      export TIMEOUT=10m 
      export CLIENT_ID=$(AKS_ENGINE_CLIENT_ID) 
      export CLIENT_SECRET=$(AKS_ENGINE_CLIENT_SECRET) 
      export TENANT_ID=$(AKS_ENGINE_TENANT_ID) 
      export SUBSCRIPTION_ID=$(AKS_ENGINE_SUBSCRIPTION_ID) 
      export CLEANUP_ON_EXIT=true 
      export REGIONS=$(AKS_ENGINE_REGION) 
      export IS_JENKINS=false 
      make test-kubernetes
      mkdir -p $(Build.ArtifactStagingDirectory)/kube-${{ parameters.name }}
      cp -r _output/k*/kubeconfig/kubeconfig.$REGIONS.json $(Build.ArtifactStagingDirectory)/kube-${{ parameters.name }}
      cp -r _output/kubernetes-*-ssh $(Build.ArtifactStagingDirectory)/kube-${{ parameters.name }}
      echo "Deleting work directory"
      sudo rm -rf ./
      echo "Deleting file in GOPATH"
      sudo rm -rf '$(GOPATH)'
    name: DeployAKSEngine
    displayName: Deploy AKS-Engine
    workingDirectory: "$(modulePath)"

  - task: PublishBuildArtifacts@1
    inputs:
      artifactName: "kube-${{ parameters.name }}"
      pathtoPublish: "$(Build.ArtifactStagingDirectory)/kube-${{ parameters.name }}"
    displayName: "Save cluster configs"
    condition: always()
