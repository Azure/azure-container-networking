stages:
- stage: test
  displayName: Test ACN
  dependsOn:
    - setup
  jobs:
  - job: test
    displayName: Run Tests
    variables:
      STORAGE_ID: $[ stagedependencies.setup.env.outputs['EnvironmentalVariables.StorageID'] ]
    pool:
      name: "$(BUILD_POOL_NAME_DEFAULT)"
      os: linux
      image: acn-runner-vmss-image-1es-v3.0
    steps:
      - task: GoTool@0
        inputs:
          version: $(GO_VERSION)

      - script: |
          make tools
          # run test, echo exit status code to fd 3, pipe output from test to tee, which splits output to stdout and go-junit-report (which converts test output to report.xml), stdout from tee is redirected to fd 4. Take output written to fd 3 (which is the exit code of test), redirect to stdout, pipe to read from stdout then exit with that status code. Read all output from fd 4 (output from tee) and write to top stdout
          { { { {
                sudo -E env "PATH=$PATH" make test-all;
                echo $? >&3;
                } | tee >(build/tools/bin/go-junit-report > report.xml) >&4;
              } 3>&1;
            } | { read xs; exit $xs; }
          } 4>&1
        retryCountOnTaskFailure: 3
        name: "Test"
        displayName: "Run Tests"

- stage: test_windows
  displayName: Test ACN Windows
  dependsOn:
    - setup
  pool:
    name: "$(BUILD_POOL_NAME_DEFAULT_WINDOWS)"
    os: windows
    image: acn-runner-vmss-image-windows-1es-v2.1
  jobs:
  - job: test
    displayName: Run Tests
    variables:
      STORAGE_ID: $[ stagedependencies.setup.env.outputs['EnvironmentalVariables.StorageID'] ]
    steps:
      - task: GoTool@0
        inputs:
          version: $(GO_VERSION)

      - script: |
          cd npm/
          go test ./...
          cd ../cni/
          go test ./...
          cd ../platform/
          go test ./...
        retryCountOnTaskFailure: 3
        displayName: "Run Windows Tests"

