
steps:
      
- task: AzureCLI@2
  name: build
  displayName: "[Output] SC Environment App Details"
  inputs:
    azureSubscription: $(ACN_TEST_SERVICE_CONNECTION)
    scriptType: bash
    scriptLocation: inlineScript
    addSpnToEnvironment: true
    inlineScript: |
      set -e
      [[ -n $SYSTEM_DEBUG ]] && [[ $SYSTEM_DEBUG =~ $IS_TRUE ]] && set -x || set +x

      # App OID
      SP_APP_OID=$(az ad sp show --id "$servicePrincipalId" | jq -rc '.id') 
      echo >&2 "##vso[task.setvariable variable=ACNCI_BUILD_SP_APP_OID;isoutput=true;]$SP_APP_OID"
      # Get Subscription ID.
      SUBSCRIPTION_ID=$(az account show | jq -rc '.id')
      echo >&2 "##vso[task.setvariable variable=ACNCI_BUILD_SUBSCRIPTION_ID;isoutput=true;issecret=true]$SUBSCRIPTION_ID"


## Resource Groups ##
- bash: |
    UNIQUE_ID=`tr -dc '0-9a-z' < /dev/urandom | head -c${1:-7}`
    echo >&2 "##vso[task.setvariable variable=LOCAL_ACNCI_UNIQUE_ID]$UNIQUE_ID"
  displayName: "[Infra] Generate Unique ID"

- template: get-resources.steps.yaml
  parameters:
    resourceType: resourcegroups
    serviceConnection: $(ACN_TEST_SERVICE_CONNECTION)
    inputs: 
      buildTagDefinitionIdKey: $(ACNCI_BUILDTAG_DEFINITIONID)
      buildTagCreatedByAppIdKey: $(ACNCI_BUILDTAG_CREATEDBYAPPID)

- template: create-or-update-resource.steps.yaml
  parameters:
    serviceConnection: $(ACN_TEST_SERVICE_CONNECTION)
    resourceType: resourcegroups
    inputs:
      resourceGroupList: $(OUT_RESULT)
      resourceGroupCount: $(OUT_RESULT_LENGTH)
      resourceGroupName: $(ACNCI_RG_PREFIX)$(LOCAL_ACNCI_UNIQUE_ID)
      resourceGroupLocation: $(ACNCI_RG_LOCATION)
      buildTagDefinitionIdKey: $(ACNCI_BUILDTAG_DEFINITIONID)
      buildTagCreatedByAppIdKey: $(ACNCI_BUILDTAG_CREATEDBYAPPID)
      buildTagCreatedByBuildIdKey: $(ACNCI_BUILDTAG_CREATEDBYAPPID)  
      createCondition: |
        and(succeeded(),
            or(not(variables.OUT_RESULT_LENGTH),
               lt(variables.OUT_RESULT_LENGTH, variables.ACNCI_POOL_SIZE)))
      updateCondition: False

- task: AzureCLI@2
  name: resourcegroups
  displayName: "[Output] Build Resource Group"
  inputs:
    azureSubscription: $(ACN_TEST_SERVICE_CONNECTION)
    scriptType: bash
    scriptLocation: inlineScript
    addSpnToEnvironment: true
    inlineScript: |
      set -e
      [[ -n $SYSTEM_DEBUG ]] && [[ $SYSTEM_DEBUG =~ $IS_TRUE ]] && set -x || set +x

      RANDOM_SELECT=`tr -dc '1-9' < /dev/urandom | head -c${1:-7}`
      IDX=$(( "$RANDOM_SELECT" % "$INFRA_RG_LENGTH" ))
      RG_DATA=$(echo "$INFRA_RG_LIST" | jq --argjson IDX "$IDX" -rc '.[$IDX]')
      RG_NAME=$(echo "$RG_DATA" | jq -rc '.name')
      RG_ID=$(echo "$RG_DATA" | jq -rc '.id')

      echo >&2 "##vso[task.setvariable variable=ACNCI_BUILD_RESOURCEGROUP;isoutput=true;]$RG_NAME"
      echo >&2 "##vso[task.setvariable variable=ACNCI_BUILD_RESOURCEGROUP_LOCATION;isoutput=true;]$ACNCI_RG_LOCATION"
      echo >&2 "##vso[task.setvariable variable=ACNCI_BUILD_RESOURCEGROUP_ID;isoutput=true;]$RG_ID"
  env:
    ACNCI_RG_LOCATION: $(ACNCI_RG_LOCATION)
    INFRA_RG_LIST: $(OUT_RESULT)
    INFRA_RG_LENGTH: $(OUT_RESULT)
    

## Managed Identity ##

- template: get-resources.steps.yaml
  parameters:
    resourceType: managedidentity
    serviceConnection: $(ACN_TEST_SERVICE_CONNECTION)
    inputs: 
      resourceGroupName: $(resourcegroups.ACNCI_BUILD_RESOURCEGROUP)
      buildTagDefinitionIdKey: $(ACNCI_BUILDTAG_DEFINITIONID)
      buildTagCreatedByAppIdKey: $(ACNCI_BUILDTAG_CREATEDBYAPPID)

- template: create-or-update-resource.steps.yaml
  parameters:
    serviceConnection: $(ACN_TEST_SERVICE_CONNECTION)
    resourceType: managedidentity
    refreshAfterCreation: True 
    inputs:
      managedIdentityList: $(OUT_RESULT)
      managedIdentityCount: $(OUT_RESULT_LENGTH)
      managedIdentityName: '$(ACNCI_MANAGEDIDENTITY_PREFIX)-$(LOCAL_ACNCI_UNIQUE_ID)-$(resourcegroups.ACNCI_BUILD_RESOURCEGROUP_LOCATION)'
      resourceGroupName: $(resourcegroups.ACNCI_BUILD_RESOURCEGROUP)
      buildTagDefinitionIdKey: $(ACNCI_BUILDTAG_DEFINITIONID)
      buildTagCreatedByAppIdKey: $(ACNCI_BUILDTAG_CREATEDBYAPPID)
      buildTagCreatedByBuildIdKey: $(ACNCI_BUILDTAG_CREATEDBYBUILDID)
      createCondition: |
        and(succeeded(),
            or(not(variables.OUT_RESULT_LENGTH),
               eq(variables.OUT_RESULT_LENGTH, 'null'),
               lt(variables.OUT_RESULT_LENGTH, 1)))
      updateCondition: False

- task: AzureCLI@2
  name: managedidentity
  displayName: "[Output] Build User ManagedIdentity Details"
  inputs:
    azureSubscription: $(ACN_TEST_SERVICE_CONNECTION)
    scriptType: bash
    scriptLocation: inlineScript
    addSpnToEnvironment: true
    inlineScript: |
      set -e
      [[ -n $SYSTEM_DEBUG ]] && [[ $SYSTEM_DEBUG =~ $IS_TRUE ]] && set -x || set +x

      # Select MI to use
      RANDOM_SELECT=`tr -dc '1-9' < /dev/urandom | head -c${1:-7}`
      IDX=$(( "$RANDOM_SELECT" % "$MI_LIST_LENGTH" ))
      MI_DATA=$(echo "$MI_LIST" | jq --argjson IDX "$IDX" -rc '.[$IDX]')

      MI_ID=$(echo "$MI_DATA" | jq -r '.id')
      echo >&2 "##vso[task.setvariable variable=ACNCI_MANAGEDIDENTITY_ID;isoutput=true]$MI_ID"
      MI_PRINCIPALID=$(echo "$MI_DATA" | jq -r '.principalId')
      echo >&2 "##vso[task.setvariable variable=ACNCI_MANAGEDIDENTITY_OBJECTID;isoutput=true]$MI_PRINCIPALID"
      MI_APPID=$(echo "$MI_DATA" | jq -r '.clientId')
      echo >&2 "##vso[task.setvariable variable=ACNCI_MANAGEDIDENTITY_APPID;isoutput=true]$MI_APPID"
      MI_NAME=$(echo "$MI_DATA" | jq -r '.name')
      echo >&2 "##vso[task.setvariable variable=ACNCI_MANAGEDIDENTITY_NAME;isoutput=true]$MI_NAME"
  env:
    ACNCI_BUILD_RESOURCEGROUP: $(resourcegroups.ACNCI_BUILD_RESOURCEGROUP)
    MI_LIST: $(OUT_RESULT)
    MI_LIST_LENGTH: $(OUT_RESULT_LENGTH)


## MI Role Definition ##

- template: get-resources.steps.yaml
  parameters:
    resourceType: roledefinition
    serviceConnection: $(ACN_TEST_SERVICE_CONNECTION)
    inputs: 
      roleDefinitionName: $(ACNCI_BUILDUSER_ROLE_NAME)
      roleDefinitionFileLocation: ./azure-container-networking/.pipelines/templates/mi-build-role.json
      subscriptionId: $(build.subscriptionId)
      buildTagDefinitionIdKey: $(ACNCI_BUILDTAG_DEFINITIONID)
      buildTagCreatedByAppIdKey: $(ACNCI_BUILDTAG_CREATEDBYAPPID)

- template: create-or-update-resource.steps.yaml
  parameters:
    serviceConnection: $(ACN_TEST_SERVICE_CONNECTION)
    resourceType: roledefinition
    refreshAfterCreation: True 
    inputs:
      roleName: $(ACNCI_BUILDUSER_ROLE_NAME)
      roleDefinitionJson: $(OUT_RESULT)
      subscriptionId: $(build.subscriptionId)
      buildTagDefinitionIdKey: $(ACNCI_BUILDTAG_DEFINITIONID)
      buildTagCreatedByAppIdKey: $(ACNCI_BUILDTAG_CREATEDBYAPPID)
      buildTagCreatedByBuildIdKey: $(ACNCI_BUILDTAG_CREATEDBYAPPID)  
      createCondition: |
        and(succeeded(),
            or(not(variables.OUT_RESULT_LENGTH),
               lt(variables.OUT_RESULT_LENGTH, 1)))
      updateCondition: |
        and(succeeded(),
            gt(variables.OUT_RESULT_LENGTH, 0))


## Provision MI Roles

- template: get-resources.steps.yaml
  parameters:
    resourceType: roleassignments
    serviceConnection: $(ACN_TEST_SERVICE_CONNECTION)
    inputs: 
      roleName: $(ACNCI_BUILDUSER_ROLE_NAME)
      managedIdentityObjectId: $(build.ACNCI_BUILD_SP_APP_OID)
      resourceGroupName: $(resourcegroups.ACNCI_BUILD_RESOURCEGROUP)
      buildTagDefinitionIdKey: $(ACNCI_BUILDTAG_DEFINITIONID)
      buildTagCreatedByAppIdKey: $(ACNCI_BUILDTAG_CREATEDBYAPPID)

- template: create-or-update-resource.steps.yaml
  parameters:
    serviceConnection: $(ACN_TEST_SERVICE_CONNECTION)
    resourceType: roleassignments
    inputs:
      roleName: $(ACNCI_BUILDUSER_ROLE_NAME)
      managedIdentityObjectId: $(build.ACNCI_BUILD_SP_APP_OID)
      resourceGroupId: $(resourcegroups.ACNCI_BUILD_RESOURCEGROUP_ID)
      buildTagDefinitionIdKey: $(ACNCI_BUILDTAG_DEFINITIONID)
      buildTagCreatedByAppIdKey: $(ACNCI_BUILDTAG_CREATEDBYAPPID)
      buildTagCreatedByBuildIdKey: $(ACNCI_BUILDTAG_CREATEDBYAPPID)  
      createCondition: |
        and(succeeded(),
            or(not(variables.OUT_RESULT_LENGTH),
               eq(variables.OUT_RESULT, 'null'),
               lt(variables.OUT_RESULT_LENGTH, 1)))
      updateCondition: False


# storage accounts

- template: get-resources.steps.yaml
  parameters:
    resourceType: storageaccounts
    serviceConnection: $(ACN_TEST_SERVICE_CONNECTION)
    inputs: 
      resourceGroupName: $(resourcegroups.ACNCI_BUILD_RESOURCEGROUP)
      buildTagDefinitionIdKey: $(ACNCI_BUILDTAG_DEFINITIONID)
      buildTagCreatedByAppIdKey: $(ACNCI_BUILDTAG_CREATEDBYAPPID)

- template: create-or-update-resource.steps.yaml
  parameters:
    serviceConnection: $(ACN_TEST_SERVICE_CONNECTION)
    resourceType: storageaccounts
    refreshAfterCreation: True 
    inputs:
      storageAccountName: '$(ACNCI_SA_PREFIX)$(LOCAL_ACNCI_UNIQUE_ID)'
      resourceGroupName: $(resourcegroups.ACNCI_BUILD_RESOURCEGROUP)
      storageAccountManagedIdentityId: $(managedidentity.ACNCI_MANAGEDIDENTITY_ID) 
      buildTagDefinitionIdKey: $(ACNCI_BUILDTAG_DEFINITIONID)
      buildTagCreatedByAppIdKey: $(ACNCI_BUILDTAG_CREATEDBYAPPID)
      buildTagCreatedByBuildIdKey: $(ACNCI_BUILDTAG_CREATEDBYBUILDID)  
      createCondition: |
        and(succeeded(),
            or(not(variables.OUT_RESULT_LENGTH),
               lt(variables.OUT_RESULT_LENGTH, 1)))
      updateCondition: False

    
- template: get-storage-accounts.steps.yaml
  parameters:
    STORAGE_ACCOUNT_SERVICE_CONNECTION: $(ACN_TEST_SERVICE_CONNECTION)
    condition: and(succeeded(), eq(variables.SA_LIST_LENGTH, 0))
    resourceGroupName: $(resourcegroups.ACNCI_BUILD_RESOURCEGROUP)

- task: AzureCLI@2
  name: artifact_storage
  displayName: "[Output] Storage Account Data"
  inputs:
    azureSubscription: $(ACN_TEST_SERVICE_CONNECTION)
    scriptType: bash
    scriptLocation: inlineScript
    addSpnToEnvironment: true
    inlineScript: |
      set -e
      [[ -n $SYSTEM_DEBUG ]] && [[ $SYSTEM_DEBUG =~ $IS_TRUE ]] && set -x || set +x

      SA_RANDOM_SELECT=`tr -dc '1-9' < /dev/urandom | head -c${1:-7}`
      R_INDEX=$(( "$SA_RANDOM_SELECT" % "$SA_LIST_LENGTH" ))
      # Make a random selection from the pool
      SA_DATA=$(echo "$SA_LIST" | jq --argjson IDX "$SA_IDX" -rc '.[$IDX]')
      echo "Delete me"
      echo "$SA_DATA"
      if (( "$SA_LIST_LENGTH" > 0 )); then
        # Azure Resource ID
        SA_ID=$(echo "$SA_DATA" | jq -r '.id')
        echo >&2 "##vso[task.setvariable variable=ACNCI_STORAGEACCOUNT_ID;isoutput=true]$SA_ID"
        # Azure Resource Name
        SA_NAME=$(echo "$SA_DATA" | jq -r '.name')
        echo >&2 "##vso[task.setvariable variable=ACNCI_STORAGEACCOUNT_NAME;isoutput=true]$SA_NAME"
        # Storage Account Subscription
        SA_SUBSCRIPTION=$(echo "$SA_DATA" | jq -r '.subscription')
        echo >&2 "##vso[task.setvariable variable=ACNCI_STORAGEACCOUNT_SUBSCRIPTION;isoutput=true]$SA_SUBSCRIPTION"
        # Service Connection
        echo >&2 "##vso[task.setvariable variable=ACNCI_STORAGEACCOUNT_SERVICECONNECTION;isoutput=true]$SA_SERVICE_CONN"
        # Storage Account Resource Group
        SA_RG=$(echo "$SA_DATA" | jq -r '.resourceGroup')
        echo >&2 "##vso[task.setvariable variable=ACNCI_STORAGEACCOUNT_RESOURCEGROUP;isoutput=true]$SA_RG"
        # Storage Account Location
        SA_LOCATION=$(echo "$SA_DATA" | jq -r '.location')
        echo >&2 "##vso[task.setvariable variable=ACNCI_STORAGEACCOUNT_LOCATION;isoutput=true]$SA_LOCATION"
        # - Local Use Only -
        # SA Object
        echo >&2 "##vso[task.setvariable variable=ACNCI_STORAGEACCOUNT]$SA_DATA"
      else
        echo >&2 "##[error]No storage accounts available for use."
        exit 1
      fi
  env:
    SA_LIST: $(OUT_RESULT)
    SA_LIST_LENGTH: $(OUT_RESULT_LENGTH)
    SA_SERVICE_CONN: $(ACN_TEST_SERVICE_CONNECTION)

- task: AzureCLI@2
  displayName: "[Provision] Container Access Permissions"
  continueOnError: true
  inputs:
    azureSubscription: $(ACN_TEST_SERVICE_CONNECTION)
    scriptType: bash
    scriptLocation: inlineScript
    addSpnToEnvironment: true
    inlineScript: |
      set -e
      [[ -n $SYSTEM_DEBUG ]] && [[ $SYSTEM_DEBUG =~ $IS_TRUE ]] && set -x || set +x

      az role assignment create \
        --role "Storage Blob Data Contributor" \
        --assignee "$ACNCI_MANAGEDIDENTITY_OBJECTID" \
        --assignee-principal-type "ServicePrincipal" \
        --scope "$ACNCI_STORAGEACCOUNT_ID"
  env:
    ACNCI_BUILD_RESOURCEGROUP_ID: $(resourcegroups.ACNCI_BUILD_RESOURCEGROUP_ID)
    ACNCI_MANAGEDIDENTITY_OBJECTID: $(managedidentity.ACNCI_MANAGEDIDENTITY_OBJECTID)
    ACNCI_STORAGEACCOUNT_ID: $(storageaccounts.ACNCI_STORAGEACCOUNT_ID)

- task: AzureCLI@2
  name: artifact_container
  displayName: "[Output] Ensure Storage Container"
  inputs:
    azureSubscription: $(ACN_TEST_SERVICE_CONNECTION)
    scriptType: bash
    scriptLocation: inlineScript
    addSpnToEnvironment: true
    inlineScript: |
      set -e
      [[ -n $SYSTEM_DEBUG ]] && [[ $SYSTEM_DEBUG =~ $IS_TRUE ]] && set -x || set +x

      az login --identity "$ACNCI_MANAGEDIDENTITY_ID"
      az storage account show -n "$SA_NAME" --query networkRuleSet
      az storage container create \
        --account-name "$SA_NAME" \
        --resource-group "$RG_NAME" \
        --name "$CONTAINER_NAME" \
        --auth-mode login
        #--public-access off 

      echo >&2 "##vso[task.setvariable variable=ACNCI_STORAGEACCOUNT_ARTIFACT_CONTAINER;isoutput=true]$CONTAINER_NAME"
  env:
    CONTAINER_NAME: "azure-container-networking-pr" 
    RG_NAME: $(resourcegroups.ACNCI_BUILD_RESOURCEGROUP)
    SA_NAME: $(artifact_storage.ACNCI_STORAGEACCOUNT_NAME)
    ACNCI_MANAGEDIDENTITY_ID: $(managedidentity.ACNCI_MANAGEDIDENTITY_ID)

- task: AzureCLI@2
  name: artifact_blob
  displayName: "[Output] Get Blob Path"
  # Always run to generate new blob name
  condition: always()
  inputs:
    azureSubscription: $(ACN_TEST_SERVICE_CONNECTION)
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      set -e
      [[ -n $SYSTEM_DEBUG ]] && [[ $SYSTEM_DEBUG =~ $IS_TRUE ]] && set -x || set +x

      echo >&2 "##vso[task.setvariable variable=ACNCI_STORAGEACCOUNT_BLOBPATH;isoutput=true]$BUILD_BUILDID/$SYSTEM_JOBATTEMPT"
