
steps:
- template: get-storage-accounts.steps.yaml
  parameters:
    STORAGE_ACCOUNT_SERVICE_CONNECTION: $(ACN_TEST_SERVICE_CONNECTION)

- task: AzureCLI@2
  displayName: "Check Resource Pool"
  inputs:
    azureSubscription: $(ACN_TEST_SERVICE_CONNECTION)
    scriptType: bash
    scriptLocation: inlineScript
    addSpnToEnvironment: true
    inlineScript: |
      set -e
      [[ -n $SYSTEM_DEBUG ]] && [[ $SYSTEM_DEBUG =~ $IS_TRUE ]] && set -x || set +x
      
      if (( "$SA_LIST_LENGTH" < "$ACNCI_SA_POOL_SIZE" )); then
        echo >&2 "##vso[task.setvariable variable=CREATE_NEW_SA;]True"
      fi
  env:
    SA_LIST_LENGTH: $(SA_LIST_LENGTH)

# Create new storage account
- bash: |
    set -x
    SA_ID=`tr -dc '0-9a-z' < /dev/urandom | head -c${1:-7}`
    echo >&2 "##vso[task.setvariable variable=ACNCI_UNIQUE_ID]$SA_ID"
  condition: and(succeeded(), variables.CREATE_NEW_SA)
  displayName: "Generate Name"

- task: AzureCLI@2
  name: resourcegroups
  displayName: "Check Build Resource Groups"
  condition: and(succeeded(), variables.CREATE_NEW_SA)
  inputs:
    azureSubscription: $(ACN_TEST_SERVICE_CONNECTION)
    scriptType: bash
    scriptLocation: inlineScript
    addSpnToEnvironment: true
    inlineScript: |
      set -e
      [[ -n $SYSTEM_DEBUG ]] && [[ $SYSTEM_DEBUG =~ $IS_TRUE ]] && set -x || set +x

      set -x
      
      # App OID
      SP_APP_OID=$(az ad sp show --id "$servicePrincipalId" | jq -rc '.id') 
      # Get Subscription ID.
      SC_DATA_JSON=$(az devops service-endpoint list --org msazure --project One | \
        jq -rc --arg SP_APP_OID "$SP_APP_OID" \
        '[ .[] | { name: .name, data: .data } | select((.serviceEndpointReferences | length) > 0) | select(.data.appObjectId == $SP_APP_OID) ][0]')
      SUBSCRIPTION_ID=$(echo "$SC_DATA_JSON" | jq -rc '.data.subscriptionId')

      # Get Pipeline Build Subscriptions.
      INFRA_RG_LIST=$(az group list --query '[? tags."$ACNCI_BUILDTAG_DEFINITIONID" && tags."$ACNCI_BUILDTAG_CREATEDBYAPPID"]' -o json)
      INFRA_RG_LIST=$(echo "$INFRA_RG_LIST" | \
        jq -rc \
        --arg SP_APPID "$servicePrincipalId" \
        --arg CREATEDBY_APPID_TAG "$ACNCI_BUILDTAG_CREATEDBYAPPID" \
        --arg DEFINITIONID "$SYSTEM_DEFINITIONID" \
        --arg DEFINITIONID_TAG "$ACNCI_BUILDTAG_DEFINITIONID" \
      '.[] | select(.tags["$CREATEDBYAPPID_TAG"] == $SP_APPID) | select(.tags["$DEFINITIONID_TAG"] == $DEFINITIONID)' )
      INFRA_RG_LENGTH=$(echo "$INFRA_RG_LIST" | jq length)

      if [[ -z $INFRA_RG_LENGTH ]] || \
         (( $INFRA_RG_LENGTH < $ACNCI_SA_POOL_SIZE )); then
        # Construct RG Name
        RG_NAME="${ACNCI_RG_PREFIX}${ACNCI_UNIQUE_ID}"
        # Create rg
        az group create \
          --name "$RG_NAME" \
          --location "$ACNCI_SA_LOCATION" \
          --tags Pipelines.CreatedBy="$servicePrincipalId" Pipelines.DefinitionID="$SYSTEM_DEFINITIONID"
        # Storage Blob Data Contributor on RG
        RG_ID="/subscriptions/${SUBSCRIPTION_ID}/resourceGroups/${RG_NAME}"
        az role assignment create \
          --role "Storage Blob Data Contributor" \
          --assignee-principal-type ServicePrincipal \
          --assignee-object-id "$SP_APP_OID" \
          --scope "$RG_ID"

      else
        # Select one resource group to use.
        RANDOM_SELECT=`tr -dc '1-9' < /dev/urandom | head -c${1:-7}`
        IDX=$(( "$RANDOM_SELECT" % "$INFRA_RG_LENGTH" ))
        RG_DATA=$(echo "$INFRA_RG_LIST" | jq --argjson IDX "$IDX" -rc '.[$IDX]')
        RG_NAME=$(echo "$RG_DATA" | jq -rc '.name')
        RG_ID=$(echo "$RG_DATA" | jq -rc '.id')
      fi
      echo >&2 "##vso[task.setvariable variable=ACNCI_BUILD_RESOURCEGROUP;isoutput=true;]$RG_NAME"
      echo >&2 "##vso[task.setvariable variable=ACNCI_BUILD_RESOURCEGROUP_ID;isoutput=true;]$RG_ID"
  env:
    ACNCI_UNIQUE_ID: $(ACNCI_UNIQUE_ID)
    # Allows use of az devops commands
    AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)

- task: AzureCLI@2
  displayName: "Add Storage Account to Pool"
  condition: and(succeeded(), variables.CREATE_NEW_SA)
  inputs:
    azureSubscription: $(ACN_TEST_SERVICE_CONNECTION)
    scriptType: bash
    scriptLocation: inlineScript
    addSpnToEnvironment: true
    inlineScript: |
      set -e
      [[ -n $SYSTEM_DEBUG ]] && [[ $SYSTEM_DEBUG =~ $IS_TRUE ]] && set -x || set +x

      SA_NAME="${ACNCI_SA_PREFIX}${ACNCI_UNIQUE_ID}"

      az storage account create \
        --name "$SA_NAME" \
        --location "$ACNCI_SA_LOCATION" \
        --resource-group "$RG_NAME" \
        --user-identity-id "$SERVICEPRINCIPALID" \
        --public-network-access Disabled \
        --require-infrastructure-encryption \
        --allow-shared-key-access false \
        --allow-blob-public-access false \
        --tags Pipelines.DefinitionID="$SYSTEM_DEFINITIONID" Pipelines.CreatedByBuildID="$BUILD_BUILDID"
        #--enable-files-aadds true 
  env:
    ACNCI_UNIQUE_ID: $(ACNCI_UNIQUE_ID)
    RG_NAME: $(resourcegroups.ACNCI_BUILD_RESOURCEGROUP)
    

- template: get-storage-accounts.steps.yaml
  parameters:
    STORAGE_ACCOUNT_SERVICE_CONNECTION: $(ACN_TEST_SERVICE_CONNECTION)

# Select Storage Account for use.
- bash: |
    SA_RANDOM_SELECT=`tr -dc '1-9' < /dev/urandom | head -c${1:-7}`
    R_INDEX=$(( "$SA_RANDOM_SELECT" % "$SA_LIST_LENGTH" ))
    #echo >&2 "##vso[task.setvariable variable=SA_IDX;issecret=true]$R_INDEX"
    echo >&2 "##vso[task.setvariable variable=SA_IDX;]$R_INDEX"
  displayName: "Generate Selection"
  env:
    SA_LIST_LENGTH: $(SA_LIST_LENGTH)

- task: AzureCLI@2
  name: artifact_storage
  displayName: "Get Storage Account Data"
  condition: and(succeeded(), variables.CREATE_NEW_SA)
  inputs:
    azureSubscription: $(ACN_TEST_SERVICE_CONNECTION)
    scriptType: bash
    scriptLocation: inlineScript
    addSpnToEnvironment: true
    inlineScript: |
      set -e

      # Make a random selection from the pool
      SA_DATA=$(echo "$SA_LIST" | jq --argjson IDX "$SA_IDX" -rc '.[$IDX]')
      echo "Delete me"
      echo "$SA_DATA"
      if (( "$SA_LIST_LENGTH" > 0 )); then
        # Azure Resource ID
        SA_ID=$(echo "$SA_DATA" | jq -r '.id')
        echo >&2 "##vso[task.setvariable variable=ACNCI_STORAGEACCOUNT_ID;issecret=true;isoutput=true]$SA_ID"
        # Azure Resource Name
        SA_NAME=$(echo "$SA_DATA" | jq -r '.name')
        echo >&2 "##vso[task.setvariable variable=ACNCI_STORAGEACCOUNT_NAME;issecret=true;isoutput=true]$SA_NAME"
        # Storage Account Subscription
        SA_SUBSCRIPTION=$(echo "$SA_DATA" | jq -r '.subscription')
        echo >&2 "##vso[task.setvariable variable=ACNCI_STORAGEACCOUNT_SUBSCRIPTION;issecret=true;isoutput=true]$SA_SUBSCRIPTION"
        # Service Connection
        echo >&2 "##vso[task.setvariable variable=ACNCI_STORAGEACCOUNT_SERVICECONNECTION;issecret=true;isoutput=true]$SA_SERVICE_CONN"
        # Storage Account Resource Group
        SA_RG=$(echo "$SA_DATA" | jq -r '.resourceGroup')
        echo >&2 "##vso[task.setvariable variable=ACNCI_STORAGEACCOUNT_RESOURCEGROUP;issecret=true;isoutput=true]$SA_RG"
        # Storage Account Location
        SA_LOCATION=$(echo "$SA_DATA" | jq -r '.location')
        echo >&2 "##vso[task.setvariable variable=ACNCI_STORAGEACCOUNT_LOCATION;issecret=true;isoutput=true]$SA_LOCATION"
      else
        echo >&2 "##[error]No storage accounts available for use."
        exit 1
      fi
  env:
    SA_IDX: $(SA_IDX)
    SA_LIST: $(SA_LIST)
    SA_LIST_LENGTH: $(SA_LIST_LENGTH)
    SA_SERVICE_CONN: $(ACN_TEST_SERVICE_CONNECTION)

- task: AzureCLI@2
  name: artifact_container
  displayName: "Ensure Storage Container"
  inputs:
    azureSubscription: $(ACN_TEST_SERVICE_CONNECTION)
    scriptType: bash
    scriptLocation: inlineScript
    addSpnToEnvironment: true
    inlineScript: |
      set -e
      [[ -n $SYSTEM_DEBUG ]] && [[ $SYSTEM_DEBUG =~ $IS_TRUE ]] && set -x || set +x

      az storage container create \
        --account-name "$SA_NAME" \
        --resource-group "RG_NAME" \
        --name "$CONTAINER_NAME" \
        --auth-mode login
        #--public-access off 
      az storage account show -n "$SA_NAME" --query networkRuleSet

      echo >&2 "##vso[task.setvariable variable=ACNCI_STORAGEACCOUNT_ARTIFACT_CONTAINER;isoutput=true]$CONTAINER_NAME"
  env:
    CONTAINER_NAME: "azure-container-networking-pr" 
    RG_NAME: $(resourcegroups.ACNCI_BUILD_RESOURCEGROUP)
    SA_NAME: $(artifact_storage.ACNCI_STORAGEACCOUNT_NAME)

- task: AzureCLI@2
  name: artifact_blob
  displayName: "Get Blob Path"
  # Always run to generate new blob name
  condition: always()
  inputs:
    azureSubscription: $(ACN_TEST_SERVICE_CONNECTION)
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      set -e
      [[ -n $SYSTEM_DEBUG ]] && [[ $SYSTEM_DEBUG =~ $IS_TRUE ]] && set -x || set +x

      echo >&2 "##vso[task.setvariable variable=ACNCI_STORAGEACCOUNT_BLOBPATH;isoutput=true]$BUILD_BUILD_ID/$SYSTEM_JOB_ATTEMPT"
