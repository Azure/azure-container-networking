parameters:
- name: exec
  type: jobList
  default: []

jobs:
- ${{ each job in parameters.exec }}:
  - job: test_${{ job.templateContext.testGroup }}
    displayName: "Unit Tests - (${{ job.displayName }})"
    variables:
      STORAGE_ID: $[ stagedependencies.setup.env.outputs['EnvironmentalVariables.StorageID'] ]
      #ob_artifactSuffix: ${{ job.templateContext.Suffix }} # this is needed to not collide published artifact containers for matrix usage
      ACN_DIR: azure-container-networking
      ACN_PATH: $(Build.SourcesDirectory)/$(ACN_DIR)
      ob_outputDirectory: $(Build.ArtifactStagingDirectory)
      ob_git_checkout: true
      ${{ if ne(job.templateContext.LinuxContainerImage, '') }}:
        LinuxContainerImage: ${{ job.templateContext.LinuxContainerImage }}
      ${{ elseif ne(job.templateContext.WindowsContainerImage, '') }}:
        WindowsContainerImage: ${{ job.templateContext.WindowsContainerImage }}
    pool:
      type: linux
    steps:
    - checkout: azure-container-networking

    - ${{ if eq(job.templateContext.testGroup, 'windows') }}:
      - template: /.pipelines/tools/install-tooling.steps.yaml
        parameters:
          os: ${{ job.templateContext.testGroup }}
          install:
          - golang

      - script: |
          pushd "$ACN_PATH"
            cd npm/
            go test ./...
          popd
        retryCountOnTaskFailure: 3
        displayName: "Run ${{ job.displayName }} Tests"
  
  
    - ${{ elseif eq(job.templateContext.testGroup, 'ubuntu') }}:
      - template: /.pipelines/tools/install-tooling.steps.yaml
        parameters:
          os: ${{ job.templateContext.testGroup }}
          install:
          - golang
          - docker
          - podman
          - buildah
          - skopeo
          - lsof
          - procps

      - bash: |
          set -e
          lsof -i :42424
          sudo lsof -i :42424
          pushd "$ACN_PATH"
            sudo lsof -i :42424
            make tools
            # run test, echo exit status code to fd 3, pipe output from test to tee, which splits output to stdout and go-junit-report (which converts test output to report.xml), stdout from tee is redirected to fd 4. Take output written to fd 3 (which is the exit code of test), redirect to stdout, pipe to read from stdout then exit with that status code. Read all output from fd 4 (output from tee) and write to top stdout
            { { { {
                  sudo -E env "PATH=$PATH" make test-all;
                  echo $? >&3;
                  } | tee >(build/tools/bin/go-junit-report > report.xml) >&4;
                } 3>&1;
              } | { read xs; exit $xs; }
            } 4>&1
          popd
          lsof -i :42424
        retryCountOnTaskFailure: 3
        displayName: "Run Unit Tests (Ubuntu)"
  
  
    - ${{ elseif eq(job.templateContext.testGroup, 'mariner') }}:
      - template: /.pipelines/tools/install-tooling.steps.yaml
        parameters:
          os: ${{ job.templateContext.testGroup }}
          install:
          - buildah
          - docker
          - golang
          - lsof
          - podman 
          - procps
          - skopeo

      - bash: |
          set -e
          pushd "$ACN_PATH"
            sudo lsof -i :42424
            make tools
            # run test, echo exit status code to fd 3, pipe output from test to tee, which splits output to stdout and go-junit-report (which converts test output to report.xml), stdout from tee is redirected to fd 4. Take output written to fd 3 (which is the exit code of test), redirect to stdout, pipe to read from stdout then exit with that status code. Read all output from fd 4 (output from tee) and write to top stdout
            { { { {
                  sudo -E env "PATH=$PATH" make test-all;
                  echo $? >&3;
                  } | tee >(build/tools/bin/go-junit-report > report.xml) >&4;
                } 3>&1;
              } | { read xs; exit $xs; }
            } 4>&1
          popd
        retryCountOnTaskFailure: 3
        displayName: "Run Unit Tests (Mariner)"
  

    - ${{ else }}:
      - bash: |
          set -e
          echo >&2 "##[error]Invalid test selection ("$TEST_GROUP")"
          exit 1
        displayName: "[Error] Invalid Unittest Template Selection"

    - bash: |
        sudo lsof -i :42424
        sudo ip tuntap list
        mkdir -p /dev/net # (if it doesn't exist already)
        mknod /dev/net/tun c 10 200
        sudo ip tuntap list
      displayName: "remove me"
      condition: always()
  
