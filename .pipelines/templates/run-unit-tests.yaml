stages:
- stage: unittest
  displayName: "Project Unit Tests"
  dependsOn:
  - setup
  variables:
    STORAGE_ID: $[ stagedependencies.setup.env.outputs['EnvironmentalVariables.StorageID'] ]
    ACN_DIR: azure-container-networking
  jobs:
  - job: linux
    displayName: "Run All"
    pool:
      type: linux
      isCustom: true
      name: "$(BUILD_POOL_NAME_DEFAULT)"
    variables:
      ob_outputDirectory: $(Build.ArtifactStagingDirectory)/linux-unittest
      REPORT_DIR: $(Build.ArtifactStagingDirectory)/linux-unittest
      REPORT_XML: $(Build.ArtifactStagingDirectory)/linux-unittest/report.xml
      COVERAGE_OUT: $(Build.ArtifactStagingDirectory)/linux-unittest/linux-coverage.out
    steps:
    - checkout: azure-container-networking

    - task: GoTool@0
      inputs:
        version: '$(GOVERSION)'

    - script: |
        set -e
        BIN_INSTALL_DIR=$(realpath bin)
        GOBIN="$BIN_INSTALL_DIR" go install github.com/jstemmer/go-junit-report/v2@latest
        JUNIT_REPORT_BIN="$BIN_INSTALL_DIR/go-junit-report"

        mkdir -p "$REPORT_DIR"
        touch "$REPORT_XML"
        make tools

        # run test, echo exit status code to fd 3, pipe output from test to tee, which splits output to stdout and go-junit-report (which converts test output to report.xml),
        # stdout from tee is redirected to fd 4. Take output written to fd 3 (which is the exit code of test), redirect to stdout, pipe to read from stdout then exit with that status code.
        # Read all output from fd 4 (output from tee) and write to to stdout
        { { { {
              sudo -E env "PATH=$PATH" make test-all;
              echo $? >&3;
              } | tee >($JUNIT_REPORT_BIN > "$REPORT_XML") >&4;
            } 3>&1;
          } | { read xs; exit $xs; }
        } 4>&1

        ls -la "$REPORT_DIR"
        mv coverage-all.out "$COVERAGE_OUT"
        ls -la "$REPORT_DIR"
      retryCountOnTaskFailure: 3
      displayName: "Run Unit Tests - Linux"
      workingDirectory: $(ACN_DIR)

    - script: |
        BIN_INSTALL_DIR=$(realpath bin)
        GOBIN="$BIN_INSTALL_DIR" go install github.com/axw/gocov/gocov@latest
        GOBIN="$BIN_INSTALL_DIR" go install github.com/AlekSi/gocov-xml@latest

        GOCOV_BIN="$BIN_INSTALL_DIR/gocov"
        GOCOV_XML_BIN="$BIN_INSTALL_DIR/gocov-xml"

        mkdir -p "$REPORT_DIR"
        touch "$REPORT_XML"
        make tools

       $GOCOV_BIN convert "$COVERAGE_OUT" > "$REPORT_DIR"/linux-coverage.json
       $GOCOV_XML_BIN < "$REPORT_DIR"/linux-coverage.json > "$REPORT_DIR"/linux-coverage.gocov.xml
      displayName: "Generate Test Reporting"
      workingDirectory: $(ACN_DIR)

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: $(REPORT_DIR)
        artifactName: drop_unittest_linux


  - job: windows
    displayName: "Run Tests - Windows"
    pool:
      isCustom: true
      type: windows
      name: "$(BUILD_POOL_NAME_DEFAULT_WINDOWS_ALT)"
    variables:
      ob_outputDirectory: $(Build.ArtifactStagingDirectory)/windows-unittest

      REPORT_DIR: $(Build.ArtifactStagingDirectory)/windows-unittest
      REPORT_XML: $(Build.ArtifactStagingDirectory)/windows-unittest/report.xml
      COVERAGE_OUT: $(Build.ArtifactStagingDirectory)/windows-unittest/windows-coverage.out
    steps:
    - checkout: azure-container-networking

    - task: GoTool@0
      inputs:
        version: '$(GOVERSION)'

    - script: |
        # Define variables
        $BIN_INSTALL_DIR = (Resolve-Path -Path "bin").Path
        $PRE_BIN = $GOBIN
        # Install go-junit-report
        $env:GOBIN = $GOBIN
        go install github.com/jstemmer/go-junit-report/v2@latest

        $JUNIT_REPORT_BIN = Join-Path -Path $BIN_INSTALL_DIR -ChildPath "go-junit-report"
        
        # Create report directory and report.xml file
        if (!(Test-Path -Path $REPORT_DIR)) {
            New-Item -Path $REPORT_DIR -ItemType Directory
        }
        if (!(Test-Path -Path $REPORT_XML)) {
            New-Item -Path $REPORT_XML -ItemType File
        }
        
        $env:GOBIN = $PRE_BIN
        # Run make tools
        make tools
        
        # Run tests and generate report
        try {
            # Run test, capture output and exit code
            $testOutput = @(
                go test -timeout 30m -mod=readonly -buildvcs=false -tags "unit" --skip 'TestE2E*' -race -covermode atomic -coverprofile=windows-coverage.out ./npm/... ./cni/... ./platform/...
                go tool cover -func=windows-coverage.out
            )
            $exitCode = $LASTEXITCODE
        
            # Write test output to report.xml using go-junit-report
            $testOutput | & $JUNIT_REPORT_BIN | Out-File -FilePath $REPORT_XML -Encoding utf8
        
            # Exit with test exit code
            if ($exitCode -ne 0) {
                exit $exitCode
            }
        } catch {
            Write-Error $_
            exit 1
        }
        
        # List files in report directory
        Get-ChildItem -Path $REPORT_DIR -Force | Select-Object -ExpandProperty FullName | ForEach-Object { Write-Host $_ }
        
        # Move coverage.out to COVERAGE_OUT
        Move-Item -Path "windows-coverage.out" -Destination $COVERAGE_OUT -Force
        
        # List files in report directory again
        Get-ChildItem -Path $REPORT_DIR -Force | Select-Object -ExpandProperty FullName | ForEach-Object { Write-Host $_ }

      retryCountOnTaskFailure: 3
      displayName: "Run Unit Tests - Windows"
      workingDirectory: $(ACN_DIR)

    - script: |
        # Define the installation directory for binaries
        $BIN_INSTALL_DIR = (Resolve-Path -Path "bin").Path
        $PRE_BIN = $GOBIN
        
        # Install required Go packages
        $env:GOBIN = $BIN_INSTALL_DIR
        go install github.com/axw/gocov/gocov@latest
        go install github.com/AlekSi/gocov-xml@latest
        
        # Define paths to the installed binaries
        $GOCOV_BIN = Join-Path -Path $BIN_INSTALL_DIR -ChildPath "gocov"
        $GOCOV_XML_BIN = Join-Path -Path $BIN_INSTALL_DIR -ChildPath "gocov-xml"
        
        # Create the report directory and initialize the report XML file
        if (!(Test-Path -Path $REPORT_DIR)) {
            New-Item -Path $REPORT_DIR -ItemType Directory
        }
        if (!(Test-Path -Path $REPORT_XML)) {
            New-Item -Path $REPORT_XML -ItemType File
        }
        
        $env:GOBIN = $PRE_BIN
        # Run the 'make tools' command (assuming 'make' is available in the system's PATH)
        make tools
        
        # Convert coverage data and generate reports
        & $GOCOV_BIN convert $COVERAGE_OUT | Out-File -FilePath (Join-Path -Path $REPORT_DIR -ChildPath "windows-coverage.json")
        & $GOCOV_XML_BIN < (Join-Path -Path $REPORT_DIR -ChildPath "windows-coverage.json") | Out-File -FilePath (Join-Path -Path $REPORT_DIR -ChildPath "windows-coverage.gocov.xml")
      displayName: "Generate Test Reporting"
      workingDirectory: $(ACN_DIR)

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: $(REPORT_DIR)
        artifactName: drop_unittest_windows


  - job: coverage
    displayName: "Check Test Coverage"
    condition: always()
    dependsOn:
    - windows
    - linux
    pool:
      type: linux
    variables:
      ob_outputDirectory: $(Build.ArtifactStagingDirectory)/out
    steps:
    - script: |
        mkdir coverage

    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: drop_unittest_linux
        targetPath: coverage

    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: drop_unittest_windows
        targetPath: coverage

    - task: PublishTestResults@2
      displayName: "Publish Test Results"
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles:  # string. Required. Test results files. Default: **/TEST-*.xml.
        searchFolder: coverage/**/*.gocov.xml
        failTaskOnFailedTests: true
        failTaskOnMissingResultsFile: false
        #testRunTitle: # Name of the test runs
        #mergeTestResults: false # boolean. Merge test results. Default: false.
        #failTaskOnFailureToPublishResults: false # boolean. Fail if there is failure in publishing test results. Default: false.
      # Advanced
        #buildPlatform: windows/amd64
        #buildConfiguration: # string. Alias: configuration. Build Configuration.
        publishRunAttachments: true

    - task: PublishCodeCoverageResults@2
      displayName: "Publish Code Coverage Report"
      inputs:
        summaryFileLocation: coverage/*

    - task: BuildQualityChecks@8
      displayName: "Check Code Coverage Regression"
      inputs:
        checkCoverage: true
        coverageFailOption: "build"
        coverageType: "lines"
        fallbackOnPRTargetBranch: false
        baseBranchRef: "master"
        allowCoverageVariance: true
        coverageVariance: 0.25
