stages:
- stage: test
  displayName: Test ACN
  dependsOn:
    - setup
  variables:
    STORAGE_ID: $[ stagedependencies.setup.env.outputs['EnvironmentalVariables.StorageID'] ]

  jobs:
  - job: 
    displayName: Run Tests
    pool:
      type: linux
    variables:
      ob_outputDirectory: $(Build.ArtifactStagingDirectory)

      REPORT_DIR: $(Build.ArtifactStagingDirectory)/linux-unittest
      REPORT_FILEPATH: $(REPORT_DIR)/report.xml
    steps:
    - checkout: azure-container-networking

    - task: GoTool@0
      inputs:
        version: '$(GOVERSION)'
  
    - bash: |
        go install github.com/jstemmer/go-junit-report/v2@latest
        ls -la $GOPATH/..
        find $GOPATH -name go-junit-report
        go env
        realpath  $GOPATH/../global/bin
        echo >&2 "##vso[prependpath]$GO_GLOBAL_BIN"
        JUNIT_REPORT_BIN=$(which go-junit-report)
        echo >&2 "##vso[task.setvariable variable=JUNIT_REPORT_BIN]$JUNIT_REPORT_BIN"
      displayName: "Install Dependencies"

    - script: |
        ls -la
        mkdir -p "$REPORT_DIR"
        touch "$REPORT_FILEPATH"
        make tools
        # run test, echo exit status code to fd 3, pipe output from test to tee, which splits output to stdout and go-junit-report (which converts test output to report.xml), stdout from tee is redirected to fd 4. Take output written to fd 3 (which is the exit code of test), redirect to stdout, pipe to read from stdout then exit with that status code. Read all output from fd 4 (output from tee) and write to top stdout
        { { { {
              sudo -E env "PATH=$PATH" make test-all;
              echo $? >&3;
              } | tee >($JUNIT_REPORT_BIN > "$REPORT_FILEPATH") >&4;
            } 3>&1;
          } | { read xs; exit $xs; }
        } 4>&1
      retryCountOnTaskFailure: 3
      displayName: "Run Tests"
      env:
        REPORT_DIR: $(REPORT_DIR)
        REPORT_FILEPATH: $(REPORT_FILEPATH)

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit' # 'JUnit' | 'NUnit' | 'VSTest' | 'XUnit' | 'CTest'. Alias: testRunner. Required. Test result format. Default: JUnit.
        testResultsFiles: '$(REPORT_FILEPATH)' # string. Required. Test results files. Default: **/TEST-*.xml.
        #searchFolder: '$(REPORT_DIR)' # string. Search folder. Default: $(System.DefaultWorkingDirectory).
        #mergeTestResults: false # boolean. Merge test results. Default: false.
        failTaskOnFailedTests: true # boolean. Fail if there are test failures. Default: false.
        #failTaskOnFailureToPublishResults: false # boolean. Fail if there is failure in publishing test results. Default: false.
        #failTaskOnMissingResultsFile: false # boolean. Fail if no result files are found. Default: false.
        #testRunTitle: # string. Test run title.
      # Advanced
        #buildPlatform: # string. Alias: platform. Build Platform.
        #buildConfiguration: # string. Alias: configuration. Build Configuration.
        #publishRunAttachments: true # boolean. Upload test results files. Default: true.

- stage: test_windows
  displayName: Test ACN Windows
  dependsOn:
    - setup
  variables:
    STORAGE_ID: $[ stagedependencies.setup.env.outputs['EnvironmentalVariables.StorageID'] ]
  jobs:
  - job:
    displayName: Run Tests
    pool:
      type: windows
    variables:
      ob_outputDirectory: $(Build.ArtifactStagingDirectory)
    steps:
    - checkout: azure-container-networking

    - task: GoTool@0
      inputs:
        version: '$(GOVERSION)'

    - task: Go@0
      displayName: "Run Windows Tests"
      retryCountOnTaskFailure: 3
      inputs:
        command: test
        arguments: '-timeout 30m ./npm/... ./cni/... ./platform/...'
        workingDirectory: 'azure-container-networking'

#    # Only run one go test per script
#    - script: |
#        cd azure-container-networking/
#        go test -timeout 30m ./npm/... ./cni/... ./platform/...
#      retryCountOnTaskFailure: 3
#      displayName: "Run Windows Tests"
