steps:
- script: |
    STORAGE_ID=$(echo "${BUILD_BUILDNUMBER//./-}")
    echo "##vso[task.setvariable variable=StorageID;isOutput=true]$STORAGE_ID"
    echo "StorageID: $STORAGE_ID"

    COMMITID=$(git rev-parse --short HEAD)
    COMMITID="$COMMITID"-"$(date "+%d%H%M")"
    echo "##vso[task.setvariable variable=commitID;isOutput=true]$COMMITID"
    echo "commitID: $COMMITID"

    TAG=$(make version)
    echo "##vso[task.setvariable variable=Tag;isOutput=true]$TAG"
    echo "Tag: $TAG"

    IMAGEREPOPATH="artifact/dd590928-4e04-48cb-9d3d-ee06c5f0e17f/$BUILD_TYPE"
    echo "##vso[task.setvariable variable=imageRepositoryPath;isOutput=true]$IMAGEREPOPATH"
    echo "imageRepositoryPath: $IMAGEREPOPATH"

    AZUREIPAMVERSION=$(make azure-ipam-version)
    echo "##vso[task.setvariable variable=azureIpamVersion;isOutput=true]$AZUREIPAMVERSION"
    echo "azureIpamVersion: $AZUREIPAMVERSION"

    AZUREIPMASQMERGERVERSION=$(make azure-ip-masq-merger-version)
    echo "##vso[task.setvariable variable=azureIpMasqMergerVersion;isOutput=true]$AZUREIPMASQMERGERVERSION"
    echo "azureIpMasqMergerVersion: $AZUREIPMASQMERGERVERSION"

    CNIVERSION=$(make cni-version)
    echo "##vso[task.setvariable variable=cniVersion;isOutput=true]$CNIVERSION"
    echo "cniVersion: $CNIVERSION"

    CNSVERSION=$(make cns-version)
    echo "##vso[task.setvariable variable=cnsVersion;isOutput=true]$CNSVERSION"
    echo "cnsVersion: $CNSVERSION"

    IPV6HPBPFVERSION=$(make ipv6-hp-bpf-version)
    echo "##vso[task.setvariable variable=ipv6HpBpfVersion;isOutput=true]$IPV6HPBPFVERSION"
    echo "ipv6HpBpfVersion: $IPV6HPBPFVERSION"

    NPMVERSION=$(make npm-version)
    echo "##vso[task.setvariable variable=npmVersion;isOutput=true]$NPMVERSION"
    echo "npmVersion: $NPMVERSION"

    cat /etc/os-release
    uname -a
    sudo chown -R $(whoami):$(whoami) .
    go version
    go env
    which go
    echo $PATH
    echo "------"
    echo $(Build.QueuedBy)
    echo $(Build.Reason) # manual, PR, IndividualCI
    echo $(Build.SourceBranch)
    echo $(variables.REPO_REF)
    echo $(REPO_REF)
    echo $(variables.REPO_NAME)
    echo $(REPO_NAME)

  name: "EnvironmentalVariables"
  displayName: "Set environmental variables"
  condition: always()
  # Use dev version of Makefile for development version
  workingDirectory: $(ACN_DIR)

- bash: |
    rm -rf .hooks .github .pipelines .git
  displayName: "Remove Unnecessary Dirs from Source"
  workingDirectory: $(ACN_DIR)


- task: CopyFiles@2
  displayName: "Add Pipeline Orchestration to Container Artifacts"
  inputs:
    sourceFolder: $(ACN_DEVOPS_DIR)/.pipelines
    targetFolder: $(ACN_DIR)/.pipelines
    CleanTargetFolder: false
