parameters:
- name: generate
  type: jobList


jobs:
- ${{ each job_data in parameters.generate }}:
  - ${{ if not(job_data.templateContext.isReleaseImage) }}:
    - job: ${{ job_data.job }}_generate_manifest
      displayName: "Generate Image Manifest - ${{ job_data.job }}"
      pool:
        type: linux
      variables:
        ob_outputDirectory: $(Build.SourcesDirectory)/out
        ob_git_checkout: false
      steps:
      - template: /.pipelines/build/generate-manifest.steps.yaml
        parameters:
          platforms: ${{ job_data.templateContext.platforms }}

    - job: ${{ job_data.job }}_publish_manifest
      displayName: "Publish Image Manifest - ${{ job_data.job }}"
      dependsOn:
      - ${{ job_data.job }}_generate_manifest
      pool:
        type: docker
        os: linux
      variables:
        LinuxContainerImage: 'mcr.microsoft.com/onebranch/azurelinux/build:3.0'
        ob_outputDirectory: $(Build.SourcesDirectory)/out
        ob_git_checkout: false
  
        MANIFEST_JSON: $[ dependencies.${{ job_data.job }}_generate_manifest.outputs['data.MANIFEST_JSON'] ]
      steps:
      - template: /.pipelines/build/publish-manifest.steps.yaml
        parameters:
          image_repository: ${{ job_data.templateContext.name }}
          image_tag: ${{ job_data.templateContext.image_tag }}
          manifest_data: $(MANIFEST_JSON)

  - ${{ else }}:
    - job: ${{ job_data.job }}_manifest
      displayName: "Prepare Prod Image Drop - ${{ job_data.job }}"
      pool:
        type: linux
      variables:
        LinuxContainerImage: 'mcr.microsoft.com/onebranch/azurelinux/build:3.0'
        ob_outputDirectory: $(Build.SourcesDirectory)/out
        ob_git_checkout: false
  
        MANIFEST_JSON: $[ dependencies.${{ job_data.job }}_generate_manifest.outputs['data.MANIFEST_JSON'] ]
     steps:
      - task: Docker@2
        displayName: Login to ACR
        inputs:
          command: login
          endpoint: $(ACR_ARM_SERVICE_CONNECTION)
      - download: current
        patterns: |
          drop_build_images_*_*_${{ job_data.templateContext.name }}_*/images/release/**/*

      - bash: |
          set -e
          mkdir -p "$OUT_DIR"
          available_platform_images=
          for image_tar in $(find . -name '*.tar'); do
            cp "$image_tar" "$OUTPUT_DIR"/images
            image_load_out=$(docker load -i "$OUTPUT_DIR"/images/"$image_tar")
            image_ref=$(echo "$image_load_out" | grep -Goi '[a-z\-_0-9]*\.azurecr\.io\/[a-z\-_0-9\/-]*:[a-z\-_0-9.\/-]*')
            available_platform_images+="$image_ref "
          done
          MANIFEST_LIST_IMAGE_REF="$IMAGE_REPO"/"$IMAGE_NAME":"$IMAGE_TAG"
          docker image save -o "$OUT_DIR"/"$IMAGE_NAME"-"$IMAGE_TAG" \
                            "$MANIFEST_LIST_IMAGE_REF" \
                            $available_platform_images
          docker manifest inspect "$MANIFEST_LIST_IMAGE_REF" > "$OUT_DIR"/prod-"$IMAGE_NAME"-"$IMAGE_TAG".json
        target: linux_build_container
        env:
          OUT_DIR: /__w/1/s/out
          IMAGE_REPO: $(ACN_PROD).azurecr.io
          IMAGE_NAME: ${{ job_data.templateContext.name }}
          IMAGE_TAG: ${{ job_data.templateContext.image_tag }}
