parameters:
- name: is_release_image
  type: boolean
  default: false

- name: arch
  type: string
  default: ""

- name: name
  type: string
  default: ""

- name: os
  type: string
  default: ""

- name: build_tag
  type: string
  default: ""

- name: archive_file
  type: string
  default: '$(name)-$(platform)-$(Tag)'

- name: source
  type: string
  default: drop_setup_env_source

- name: extra_args
  type: string
  default: ''


- name: default_args
  type: object
  default:
    - "--target $(os) "
    - "--platform $(os)/$(arch) "

- name: common_build_args
  type: object
  default:
    - "PLATFORM=$(os)/$(arch) "
    - "ARCH=$(arch) "
    - "OS=$(os) "
    - "VERSION=$(Tag) "


steps:
- task: DownloadPipelineArtifact@2
  inputs:
    targetPath: $(Build.SourcesDirectory)/dst/artifacts
    artifact: ${{ parameters.source }}

- ${{ if not(parameters.is_release_image) }}:
  - task: onebranch.pipeline.containercontrol@1
    displayName: "Login to ACR"
    inputs:
      command: login
      endpoint: $(ACR_ARM_SERVICE_CONNECTION)

# Build and push the Docker image
- task: onebranch.pipeline.imagebuildinfo@1
  displayName: Image Build
  retryCountOnTaskFailure: 3
  timeoutInMinutes: 30
  inputs:
    os: '${{ parameters.os }}'
    buildkit: 1
    dockerFileRelPath: artifacts/Dockerfile
    enable_network: true
    #compress: true
    ${{ if parameters.is_release_image }}:
      registry: $(ACR_PROD).azurecr.io
      repositoryName: ${{ parameters.name }}
      build_tag: $(archiveVersion)-$(os)-$(arch)
      enable_acr_push: false
      enable_cache: true
      enable_pull: false
      enable_service_tree_acr_path: false
      saveImageToPath: images/release/${{ parameters.archive_file }}.tar
      saveMetadataToPath: images/release/metadata/${{ parameters.archive_file }}-metadata.json
    ${{ else }}:
      registry: $(ACR).azurecr.io
      endpoint: '$(ACR_ARM_SERVICE_CONNECTION)'
      repositoryName: $(os)-$(arch)/${{ parameters.name }}
      build_tag: ${{ parameters.build_tag }}
      enable_acr_push: true
      enable_cache: false
      enable_pull: true
      saveImageToPath: images/$(os)-$(arch)/${{ parameters.archive_file }}.tar.gz
      #saveMetadataToPath: images/$(os)-$(arch)/metadata/${{ parameters.archive_file }}-metadata.json

    # Docker Build Arguments
    ${{ if parameters.common_build_args }}:
      arguments: --build-arg ${{ join('--build-arg ', parameters.common_build_args) }} ${{ parameters.extra_args }} ${{ join(' ', parameters.default_args) }}
    ${{ else }}:
      arguments: ${{ parameters.extra_args }} ${{ join(' ', parameters.default_args) }}
