parameters:
  name: ""
  displayName: ""
  imagePlatformArches: ""

jobs:
- job: ${{ parameters.name }}
  displayName: ${{ parameters.displayName }}
  variables:
    TAG: $[ stagedependencies.setup.env.outputs['EnvironmentalVariables.Tag'] ]
  pool:
    name: "$(BUILD_POOL_NAME_DEFAULT)"
  steps:
    - task: Docker@2
      displayName: Docker Login
      inputs:
        containerRegistry: $(ACR_SERVICE_CONNECTION)
        command: "login"
        addPipelineData: false

    - script: |
        echo Tag is $(TAG)
        sudo make tools-images VERSION=$(TAG)
        docker run --privileged --rm tonistiigi/binfmt --install arm64
        make all-images VERSION=$(TAG) IMAGE_PLATFORM_ARCHES=${{ parameters.imagePlatformArches }}
      name: "BuildImages"
      displayName: "Build Images"

    - script: |
        wget https://github.com/aquasecurity/trivy/releases/download/v0.18.1/trivy_0.18.1_Linux-64bit.tar.gz
        tar -zxvf trivy*.tar.gz
        mkdir -p ./trivy-cache
        sudo ./trivy --exit-code 1 --cache-dir ./trivy-cache --severity HIGH,CRITICAL $IMAGE_REGISTRY/azure-npm:$(TAG) 
        sudo ./trivy --exit-code 1 --cache-dir ./trivy-cache --severity HIGH,CRITICAL $IMAGE_REGISTRY/azure-cns:$(TAG) 
        sudo ./trivy --exit-code 1 --cache-dir ./trivy-cache --severity HIGH,CRITICAL $IMAGE_REGISTRY/azure-cni-manager:$(TAG)
      name: "TrivyScan"
      displayName: "Image Vulnerability Scan"

    - script: |
        docker tag $IMAGE_REGISTRY/azure-cni-manager:$(TAG) $IMAGE_REGISTRY/azure-cni-manager:$(TAG)
        docker push $IMAGE_REGISTRY/azure-cni-manager:$(TAG)

        function auto-retry()
        {
            export i="1"
            export attempts="300"
            false
            while [[ $? -ne 0 ]] && [[ $i -lt $attempts ]]; do
              printf "Attempt $i/$attempts - " && "$@" && break ||  sleep 3 &&  i=$[$i+1] && false
            done
        }

        auto-retry docker pull $IMAGE_REGISTRY/azure-npm:$(TAG)
        auto-retry docker pull $IMAGE_REGISTRY/azure-cns:$(TAG)
        auto-retry docker pull $IMAGE_REGISTRY/azure-cni-manager:$(TAG)
      name: "mcrreplication"
      displayName: "Push NPM Image and Wait for Repository"

    - task: Docker@2
      displayName: Docker Logout
      inputs:
        containerRegistry: $(ACR_SERVICE_CONNECTION)
        command: "logout"
        addPipelineData: false

    - task: CopyFiles@2
      inputs:
        sourceFolder: "output"
        targetFolder: $(Build.ArtifactStagingDirectory)
      condition: succeeded()

    - task: PublishBuildArtifacts@1
      inputs:
        artifactName: "output"
        pathtoPublish: "$(Build.ArtifactStagingDirectory)"
      condition: succeeded()
