parameters:
  clusterName: ""
  os: ""

jobs:
  - job: npm
    steps:
    #Deploy NPM
      - task: AzureCLI@2
        displayName: "Deploy NPM to Test Cluster"
        continueOnError: true # make sure to remove after testing is complete
        inputs:
          azureSubscription: $(TEST_SUB_SERVICE_CONNECTION)
          scriptType: "bash"
          scriptLocation: "inlineScript"
          failOnStderr: true
          inlineScript: |
            set -ex
            # export CLUSTER_NAME=$(RESOURCE_GROUP)-$(PROFILE)
            make -C ./hack/aks set-kubeconf AZCLI=az CLUSTER=${{ parameters.clusterName }}-$(make revision)

            # curl -LO https://dl.k8s.io/release/v1.23.0/bin/linux/amd64/kubectl
            # chmod +x kubectl

            # deploy azure-npm
            # ./kubectl --kubeconfig=./kubeconfig apply -f https://raw.githubusercontent.com/Azure/azure-container-networking/master/npm/examples/windows/azure-npm.yaml
            kubectl apply -f https://raw.githubusercontent.com/Azure/azure-container-networking/master/npm/examples/windows/azure-npm.yaml

            # swap azure-npm image with one built during run
            #$(TAG) may be what pipeline is set to. check and confirm, major doubt though.
            # ./kubectl --kubeconfig=./kubeconfig set image daemonset/azure-npm-win -n kube-system azure-npm=$IMAGE_REGISTRY/azure-npm:windows-amd64-ltsc2022-$(TAG)
            # kubectl set image daemonset/azure-npm-win -n kube-system azure-npm=$IMAGE_REGISTRY/azure-npm:windows-amd64-ltsc2022-$(make npm-version)
            kubectl set image daemonset/azure-npm-win -n kube-system azure-npm=acnpublic.azurecr.io/azure-npm:windows-amd64-ltsc2022-a0754f41

            #could use rollout to control flow through api. Thus removing the need for sleep
            echo "sleeping 3 minutes to allow NPM pods to restart"
            sleep 180

            # ./kubectl --kubeconfig=./kubeconfig get po -n kube-system -owide -A
            kubectl apply get po -n kube-system -owide -A


            echo "Showing cluster status for $CLUSTER_NAME"
            # FQDN=`az aks show -n $CLUSTER_NAME -g $CLUSTER_NAME --query fqdn -o tsv`
            FQDN=`az aks show -g ${{ parameters.clusterName }}-$(make revision) -n ${{ parameters.clusterName }}-$(make revision) --query fqdn -o tsv`
            echo $FQDN
            echo "##vso[task.setvariable variable=FQDN]$FQDN"

    #Build Suite
      - bash: |
          git clone https://github.com/huntergregory/kubernetes.git --depth=1 --branch=linux-sleep-before-probing
          cd kubernetes
          export PATH=$PATH:/usr/local/go/bin/
          make WHAT=test/e2e/e2e.test
        displayName: "Build Kubernetes e2e.test"
        continueOnError: true # make sure to remove after testing is complete

    #Run Suite
      - bash: |
          # NetworkPolicy between server and...
          focus="\
          client should enforce policy to allow traffic only from a different namespace, based on NamespaceSelector|\
          client should deny egress from pods based on PodSelector|\
          client should enforce multiple, stacked policies with overlapping podSelectors|\
          client should enforce egress policy allowing traffic to a server in a different namespace based on PodSelector and NamespaceSelector|\
          client should work with Ingress, Egress specified together|\
          client should enforce ingress policy allowing any port traffic to a server on a specific protocol|\
          client should not allow access by TCP when a policy specifies only UDP|\
          client should allow egress access to server in CIDR block|\
          client should enforce policy based on Ports|\
          client should support allow-all policy|\
          client should enforce updated policy|\
          client should support denying of egress traffic on the client side|\
          client should stop enforcing policies after they are deleted|\
          client should support a 'default-deny-ingress' policy"

          cd kubernetes/_output/local/bin/linux/amd64



          # why do we need to specify this? My tests run fine without it
          # KUBERNETES_SERVICE_HOST="$FQDN" KUBERNETES_SERVICE_PORT=443 \
          ./e2e.test \
          --provider=local \
          --ginkgo.focus="$focus" \
          --ginkgo.skip="NetworkPolicyLegacy|SCTP" \
          --kubeconfig=$HOME/.kube/config
        displayName: "Run Kubernetes e2e.test"
        continueOnError: true # make sure to remove after testing is complete


