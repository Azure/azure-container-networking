pr:
  branches:
    include:
      - master
      - release/*
      - feature/ob*
  paths:
    exclude:
      - ".devcontainer"
      - ".hooks"
      - ".vscode"
      - ".github"
      - docs

trigger:
  branches:
    include:
      - gh-readonly-queue/master/*
  tags:
    include:
      - "*"

variables:
  ADO_COMPLIANT_BUILD_PROJECT_URI: $(VAR_PROJECT_URI)
  ADO_COMPLIANT_BUILD_ORG: $(VAR_BUILD_ORG)
  ADO_AUTH_METHOD: $(VAR_AUTH_METHOD)
  ADO_AUTHORIZATION: $(VAR_AUTH)
  ADO_COMPLIANT_PIPELINE_ID: $(VAR_PIPELINE_ID)

jobs:
- job: trigger
  steps:
  - checkout: self

  - bash: |
      set -e

      # Get Build Reason
      ACN_BUILD_REASON=$(echo -n "$BUILD_REASON")
      echo >&2 "$ACN_BUILD_REASON"
      # Get ACN Git Ref
      ACN_BUILD_AZURE_ACN_GIT_REF=$(git rev-parse HEAD | xargs)
      echo >&2 "$ACN_BUILD_AZURE_ACN_GIT_REF"
      # Get Queuer
      ACN_BUILD_QUEUEDBY="$BUILD_QUEUEDBY"
      echo >&2 "$ACN_BUILD_QUEUEDBY"
      # Get Source Branch
      ACN_BUILD_SOURCE_BRANCH="$BUILD_SOURCEBRANCH"
      echo >&2 "$ACN_BUILD_SOURCE_BRANCH"

      ACN_BUILD_PARAMETERS=$(echo '{ "TriggerDetails": {} }' | jq -cr \
      --arg REASON "$ACN_BUILD_REASON" \
      --arg REF "$ACN_BUILD_AZURE_ACN_GIT_REF" \
      --arg BRANCH "$ACN_BUILD_SOURCE_BRANCH" \
      --arg QUEUEDBY "$ACN_BUILD_QUEUEDBY" \
      '.TriggerDetails = { reason: "$REASON", ref: "$REF", queuedBy: "$QUEUEDBY", sourceBranch: "$BRANCH" }')

      # Switch Pipeline on Build Reason
      if [[ $ACN_BUILD_REASON =~ ^PullRequest$ ]]; then
        echo >&2 "Triggering Pull Request build for $(Build.SourceBranch)..."

        echo >&2 "##vso[task.setvariable variable=pipelineDefinition]NonOfficial-Test"
        echo >&2 "##vso[task.setvariable variable=templateParameters]$ACN_BUILD_PARAMETERS"
        echo $ACN_BUILD_PARAMETERS | jq .

      else
        echo >&2 "##[error]Unable to accomodate build reason: "$ACN_BUILD_REASON""
        exit 1
      fi
      echo "${BUILD_QUEUEDBY}"
      echo "${BUILD_REASON}" # manual, PR, IndividualCI
      echo "${BUILD_SOURCEBRANCH}"

  - task: TriggerBuild@4
    displayName: Trigger Compliant Build
    timeoutInMinutes: 120
    inputs:
      definitionIsInCurrentTeamProject: false
      tfsServer: $(ADO_COMPLIANT_BUILD_PROJECT_URI)
      teamProject: $(ADO_COMPLIANT_BUILD_ORG)
      buildDefinition: $(ADO_COMPLIANT_PIPELINE_ID)
      queueBuildForUserThatTriggeredBuild: true
      useSameBranch: false
      branchToUse: master
      authenticationMethod: $(ADO_AUTH_METHOD)
      password: $(ADO_AUTHORIZATION)
      storeInEnvironmentVariable: true
      waitForQueuedBuildsToFinish: true
      treatPartiallySucceededBuildAsSuccessful: false
      downloadBuildArtifacts: false
      failTaskIfBuildsNotSuccessful: true
      waitForQueuedBuildsToFinishRefreshTime: 120
      ignoreSslCertificateErrors: false
      templateParameters: $(templateParameters)


#  - task: TriggerBuild@4
#    displayName: 'Trigger Build'
#    inputs:
#      #definitionIsInCurrentTeamProject: true
#      #buildDefinition: $(pipelineDefinition)
#      #queueBuildForUserThatTriggeredBuild: false
#      ignoreSslCertificateErrors: false
#      useSameSourceVersion: false
#      useCustomSourceVersion: false
#      useSameBranch: false
#      branchToUse: 'master'
#      storeInEnvironmentVariable: true
#      authenticationMethod: 'OAuth Token'
#      password: $(System.AccessToken)
#      enableBuildInQueueCondition: true
#      dependentOnSuccessfulBuildCondition: true
#      dependentOnFailedBuildCondition: false
#      checkBuildsOnCurrentBranch: false
#      failTaskIfConditionsAreNotFulfilled: true
#      templateParameters: '$(templateParameters)'
#      #
#      definitionIsInCurrentTeamProject: false
#      # $(ADO_COMPLIANT_BUILD_PROJECT_URI)
#      tfsServer: 'https://msazure.visualstudio.com/DefaultCollection'
#      # $(ADO_COMPLIANT_BUILD_ORG)
#      teamProject: 'One'
#      # $(ADO_COMPLIANT_PIPELINE_ID)
#      buildDefinition: 'NonOfficial-Test'
#      queueBuildForUserThatTriggeredBuild: true
#      password: $(System.AccessToken)
#      waitForQueuedBuildsToFinish: true
#      treatPartiallySucceededBuildAsSuccessful: false
#      downloadBuildArtifacts: false
#      failTaskIfBuildsNotSuccessful: true
#      waitForQueuedBuildsToFinishRefreshTime: 300
