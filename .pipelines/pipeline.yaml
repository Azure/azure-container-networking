pr:
  branches:
    include:
      - master
      - honeycomb-dev

trigger:
  branches:
    include:
      - master
      - honeycomb-dev

stages:
  - stage: setup
    displayName: Setup
    jobs:
      - job: env
        displayName: EnvironmentalVariables 
        pool:
          name: "$(BUILD_POOL_NAME_DEFAULT)"
        steps:
          - script: |
              BUILD_NUMBER=$(Build.BuildNumber)
              echo "##vso[task.setvariable variable=StorageID;isOutput=true]$(echo ${BUILD_NUMBER//./-})"
              echo "##vso[task.setvariable variable=Tag;isOutput=true]$(git describe --tags --always --dirty)"
              sudo chown -R $(whoami):$(whoami) .
              go version
              go env
              which go
              echo $PATH
            name: "EnvironmentalVariables"
            displayName: "Set environmental variables"
            condition: always()

  - stage: build_and_test
    displayName: AMD64
    dependsOn:
    - "setup"
    jobs:
      - job: build
        displayName: Build Binaries

        variables:
          TAG: $[ dependencies.setup.env.outputs['EnvironmentalVariables.Tag'] ]
          STORAGE_ID: $[ dependencies.setup.env.outputs['EnvironmentalVariables.StorageID'] ]
        pool:
          name: "$(BUILD_POOL_NAME_DEFAULT)"
        steps:
          - script: |
              make all-binaries-platforms VERSION=$(TAG)
            name: "BuildAllPlatformBinaries"
            displayName: "Build all platform binaries"

          - script: |
              mkdir -p ./output/bins
              cd ./output
              find . -name '*.tgz' -print -exec mv -t ./bins/ {} +
              find . -name '*.zip' -print -exec mv -t ./bins/ {} +
              shopt -s extglob
              rm -rf !("bins")
            name: "PrepareArtifacts"
            displayName: "Prepare Artifacts"

          - task: CopyFiles@2
            inputs:
              sourceFolder: "output"
              targetFolder: $(Build.ArtifactStagingDirectory)
            condition: succeeded()

          - task: PublishBuildArtifacts@1
            inputs:
              artifactName: "output"
              pathtoPublish: "$(Build.ArtifactStagingDirectory)"
            condition: succeeded()

          - task: AzureCLI@1
            inputs:
              azureSubscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
              scriptLocation: "inlineScript"
              inlineScript: |
                echo Creating storage container with name acn-$(STORAGE_ID) and account name $(STORAGE_ACCOUNT_NAME)
                az storage container create -n acn-$(STORAGE_ID) --account-name $(STORAGE_ACCOUNT_NAME) --public-access container
                az storage blob upload-batch -d acn-$(STORAGE_ID) -s ./output/bins/  --account-name $(STORAGE_ACCOUNT_NAME)
            displayName: Create artifact storage container
            condition: succeeded()

          - publish: ./test/apimodels/
            artifact: clusterdefinitions

      - template: images/images.yaml
        parameters:
          name: "build_images_amd64"
          displayName: Build AMD64 Images
          imagePlatformArches: linux/amd64

      - job: test
        displayName: Run Tests
        variables:
          STORAGE_ID: $[ dependencies.setup.env.outputs['EnvironmentalVariables.StorageID'] ]
        pool:
          name: "$(BUILD_POOL_NAME_DEFAULT)"
        steps:

          - script: |
              make tools
              # run test, echo exit status code to fd 3, pipe output from test to tee, which splits output to stdout and go-junit-report (which converts test output to report.xml), stdout from tee is redirected to fd 4. Take output written to fd 3 (which is the exit code of test), redirect to stdout, pipe to read from stdout then exit with that status code. Read all output from fd 4 (output from tee) and write to top stdout
              { { { { 
                    sudo -E env "PATH=$PATH" make test-all; 
                    echo $? >&3; 
                    } | tee >(build/tools/bin/go-junit-report > report.xml) >&4; 
                  } 3>&1; 
                } | { read xs; exit $xs; } 
              } 4>&1
            name: "Test"
            displayName: "Run Tests"

          - bash: |
              build/tools/bin/gocov convert coverage.out > coverage.json
              build/tools/bin/gocov-xml < coverage.json > coverage.xml
            name: "Coverage"
            displayName: "Generate Coverage Reports"
            condition: always()

          - task: PublishTestResults@2
            inputs:
              testRunner: JUnit
              testResultsFiles: report.xml
            displayName: "Publish Test Results"
            condition: always()

          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: coverage.xml
            displayName: "Publish Code Coverage Results"
            condition: always()


  - stage: build_arm_images
    displayName: ARM64
    dependsOn:
    - "setup"
    jobs:
    - template: images/images.yaml
      parameters:
        name: "build_images_arm64"
        displayName: Build ARM Images
        imagePlatformArches: linux/arm64

  - template: singletenancy/aks-swift/e2e-job-template.yaml
    parameters:
      name: "aks_swift_e2e"
      displayName: AKS Swift
      pipelineBuildImage: "$(BUILD_IMAGE)"


  - template: singletenancy/aks-engine/e2e-job-template.yaml
    parameters:
      name: "ubuntu_18_04_linux_e2e"
      displayName: Ubuntu 18.04
      pipelineBuildImage: "$(BUILD_IMAGE)"
      clusterDefinition: "cniLinux1804.json"
      clusterDefinitionCniTypeKey: "azureCNIURLLinux"
      clusterDefinitionCniBuildOS: "linux"
      clusterDefinitionCniBuildExt: ".tgz"

  - template: singletenancy/aks-engine/e2e-job-template.yaml
    parameters:
      name: "windows_19_03_e2e"
      displayName: "Windows 1903"
      pipelineBuildImage: "$(BUILD_IMAGE)"
      clusterDefinition: "cniWindows1903.json"
      clusterDefinitionCniTypeKey: "azureCNIURLWindows"
      clusterDefinitionCniBuildOS: "windows"
      clusterDefinitionCniBuildExt: ".zip"

      
  - template: singletenancy/aks-engine/e2e-job-template.yaml
    parameters:
      name: "windows_20_04_e2e"
      displayName: "Windows 2004"
      pipelineBuildImage: "$(BUILD_IMAGE)"
      clusterDefinition: "cniWindows2004.json"
      clusterDefinitionCniTypeKey: "azureCNIURLWindows"
      clusterDefinitionCniBuildOS: "windows"
      clusterDefinitionCniBuildExt: ".zip"

  - stage: cleanup
    displayName: Cleanup
    dependsOn:
      - "aks_swift_e2e"
      - "ubuntu_18_04_linux_e2e"
      - "windows_19_03_e2e"
      - "windows_20_04_e2e"
    jobs:
      - job: delete_remote_artifacts
        displayName: Delete remote artifacts
        pool:
          name: $(BUILD_POOL_NAME_DEFAULT)
          demands: agent.os -equals Linux
        steps:
          - checkout: none
          - task: AzureCLI@1
            inputs:
              azureSubscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
              scriptLocation: "inlineScript"
              inlineScript: |
                BUILD_NUMBER=$(Build.BuildNumber)
                BUILD_NUMBER=${BUILD_NUMBER//./-}
                echo Deleting storage container with name acn-$BUILD_NUMBER and account name $(STORAGE_ACCOUNT_NAME)
                az storage container delete -n acn-$BUILD_NUMBER --account-name $(STORAGE_ACCOUNT_NAME)
                echo Pruning old docker images...
                sudo docker system prune -f
            displayName: Cleanup remote Azure storage container
