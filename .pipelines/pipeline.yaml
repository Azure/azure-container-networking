pr:
  branches:
    include:
      - master
  paths:
    exclude:
    - ".devcontainer"
    - ".hooks"
    - ".vscode"
    - ".github"
    - docs

trigger:
  paths:
    exclude:
    - docs
    - "zapai/*"
    - "azure-ipam/*"
    - "dropgz/*"
  tags:
    include:
    - "*"

stages:
  - stage: setup
    displayName: ACN
    jobs:
      - job: env
        displayName: Setup
        pool:
          name: "$(BUILD_POOL_NAME_DEFAULT)"
        steps:
          - script: |
              BUILD_NUMBER=$(Build.BuildNumber)
              echo "##vso[task.setvariable variable=StorageID;isOutput=true]$(echo ${BUILD_NUMBER//./-})"
              echo "##vso[task.setvariable variable=Tag;isOutput=true]$(make version)"
              echo "##vso[task.setvariable variable=cniVersion;isOutput=true]$(make cni-version)"
              echo "##vso[task.setvariable variable=npmVersion;isOutput=true]$(make npm-version)"
              cat /etc/os-release
              uname -a
              sudo chown -R $(whoami):$(whoami) .
              go version
              go env
              which go
              echo $PATH
            name: "EnvironmentalVariables"
            displayName: "Set environmental variables"
            condition: always()

  - stage: containerize
    displayName: Build Images
    dependsOn:
      - setup
    jobs:
      - job: containerize_linux_amd64
        displayName: Build Images
        pool:
          name: "$(BUILD_POOL_NAME_LINUX_AMD64)"
        strategy:
          matrix:
            acncli_linux_amd64:
              arch: amd64
              os: linux
              name: acncli
            cni_dropgz_linux_amd64:
              arch: amd64
              os: linux
              name: cni-dropgz
            cni_dropgz_test_linux_amd64:
              arch: amd64
              os: linux
              name: cni-dropgz-test
            cns_linux_amd64:
              arch: amd64
              os: linux
              name: cns
            npm_linux_amd64:
              arch: amd64
              os: linux
              name: npm
        steps:
          - template: containers/container-template.yaml
            parameters:
              name: $(name)
              os: $(os)
              arch: $(arch)
      - job: containerize_linux_arm64
        displayName: Build Images
        variables:
          TAG: $[ stagedependencies.setup.env.outputs['EnvironmentalVariables.Tag'] ]
        pool:
          name: "$(BUILD_POOL_NAME_LINUX_ARM64)"
        strategy:
          matrix:
            acncli_linux_arm64:
              arch: arm64
              os: linux
              name: acncli
            cni_dropgz_linux_arm64:
              arch: arm64
              os: linux
              name: cni-dropgz
            cni_dropgz_test_linux_arm64:
              arch: arm64
              os: linux
              name: cni-dropgz-test
            cns_linux_arm64:
              arch: arm64
              os: linux
              name: cns
            npm_linux_arm64:
              arch: arm64
              os: linux
              name: npm
        steps:
          - template: containers/container-template.yaml
            parameters:
              name: $(name)
              os: $(os)
              arch: $(arch)
      - job: containerize_windows_amd64
        timeoutInMinutes: 120
        displayName: Build Images
        variables:
          TAG: $[ stagedependencies.setup.env.outputs['EnvironmentalVariables.Tag'] ]
        pool:
          name: "$(BUILD_POOL_NAME_WINDOWS_AMD64)"
        strategy:
          matrix:
            cns_windows_amd64:
              arch: amd64
              name: cns
              ai_path: github.com/Azure/azure-container-networking/cns/logger.aiMetadata
              ai_path_var: CNS_AI_PATH
              ai_id: ce672799-8f08-4235-8c12-08563dc2acef
              ai_id_var: CNS_AI_ID
            npm_windows_amd64:
              arch: amd64
              name: npm
              ai_path: github.com/Azure/azure-container-networking/npm.aiMetadata
              ai_path_var: NPM_AI_PATH
              ai_id: 014c22bd-4107-459e-8475-67909e96edcb
              ai_id_var: NPM_AI_ID
        steps:
          - template: containers/container-template-windows.yaml
            parameters:
              name: $(name)
              arch: $(arch)
              ai_path: $(ai_path)
              ai_path_var: $(ai_path_var)
              ai_id: $(ai_id)
              ai_id_var: $(ai_id_var)
              tag: $(TAG)
      - job: check_tag
        displayName: Check Tag
        pool:
          name: $(BUILD_POOL_NAME_DEFAULT)
        steps:
          - script: |
              echo "##vso[task.setvariable variable=currentTagBuild;isOutput=true]$(make version)"
            name: "CurrentTagBuild"
            displayName: "Set current tag variable"
            condition: always()

  - stage: validate1
    displayName: Validate Tags
    dependsOn:
      - setup
      - containerize
    variables:
      TAG: $[ stagedependencies.setup.env.outputs['EnvironmentalVariables.Tag'] ]
      CURRENT_VERSION: $[ stagedependencies.containerize.check_tag.outputs['CurrentTagBuild.currentTagBuild'] ]
    condition: ne(variables.TAG, variables.CURRENT_VERSION)
    jobs:
      - job: timeout_and_cancel
        displayName: Cancel Run
        pool:
          name: $(BUILD_POOL_NAME_DEFAULT)
        steps:
          - script: |
              echo $TAG
              echo $CURRENT_VERSION
              echo "Checking if branch up to date with master"
  
  - stage: publish
    displayName: Publish Multiarch Manifests
    dependsOn:
      - containerize
    variables:
      TAG: $[ stagedependencies.setup.env.outputs['EnvironmentalVariables.Tag'] ]
      CURRENT_VERSION: $[ stagedependencies.containerize.check_tag.outputs['CurrentTagBuild.currentTagBuild'] ]
    condition: and(succeeded(), eq(variables.TAG, variables.CURRENT_VERSION))
    jobs:
      - job: manifest
        displayName: Compile Manifests
        pool:
          name: "$(BUILD_POOL_NAME_DEFAULT)"
        strategy:
          matrix:
            acncli:
              name: acncli
              platforms: linux/amd64 linux/arm64
            cni_dropgz:
              name: cni-dropgz
              platforms: linux/amd64 linux/arm64
            cni_dropgz_test:
              name: cni-dropgz-test
              platforms: linux/amd64 linux/arm64
            cns:
              name: cns
              platforms: linux/amd64 linux/arm64 windows/amd64
            npm:
              name: npm
              platforms: linux/amd64 linux/arm64 windows/amd64
        steps:
          - template: containers/manifest-template.yaml
            parameters:
              name: $(name)
              platforms: $(platforms)
              tag: $(TAG)
      - job: check_tag
        displayName: Check Tag
        pool:
          name: $(BUILD_POOL_NAME_DEFAULT)
        steps:
          - script: |
              echo "##vso[task.setvariable variable=currentTagManifests;isOutput=true]$(make version)"
            name: "CurrentTagManifests"
            displayName: "Set current tag variable"
            condition: always()

  - template: singletenancy/cilium/cilium-e2e-job-template.yaml
    parameters:
      name: "cilium_e2e"
      displayName: Cilium
      pipelineBuildImage: "$(BUILD_IMAGE)"
      testDropgz: ""
      clusterName: "ciliume2e"

  - stage: validate2
    displayName: Validate Tags
    dependsOn:
      - setup
      - publish
    variables:
      TAG: $[ stagedependencies.setup.env.outputs['EnvironmentalVariables.Tag'] ]
      CURRENT_VERSION: $[ stagedependencies.publish.check_tag.outputs['CurrentTagManifests.currentTagManifests'] ]
    condition: ne(variables.TAG, variables.CURRENT_VERSION)
    jobs:
      - job: timeout_and_cancel
        displayName: Cancel Run
        pool:
          name: $(BUILD_POOL_NAME_DEFAULT)
        steps:
          - script: |
              echo $TAG
              echo $CURRENT_VERSION
              echo "Checking if branch is up to date with master"
  
  - stage: cleanup
    displayName: Cleanup
    dependsOn:
      - "cilium_e2e"
    jobs:
      - job: delete_remote_artifacts
        displayName: Delete remote artifacts
        pool:
          name: $(BUILD_POOL_NAME_DEFAULT)
          demands: agent.os -equals Linux
        steps:
          - checkout: none
          - task: AzureCLI@1
            inputs:
              azureSubscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
              scriptLocation: "inlineScript"
              inlineScript: |
                BUILD_NUMBER=$(Build.BuildNumber)
                BUILD_NUMBER=${BUILD_NUMBER//./-}
                echo Deleting storage container with name acn-$BUILD_NUMBER and account name $(STORAGE_ACCOUNT_NAME)
                az storage container delete -n acn-$BUILD_NUMBER --account-name $(STORAGE_ACCOUNT_NAME)
            displayName: Cleanup remote Azure storage container
