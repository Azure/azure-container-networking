parameters:
  name: ""
  clusterName: ""
  continueOnError: true
  arch: ""
  os: ""
  scenario: ""
  region: ""

steps:
  - bash: |
      go version
      go env
      mkdir -p '$(GOBIN)'
      mkdir -p '$(GOPATH)/pkg'
      mkdir -p '$(modulePath)'
      echo '##vso[task.prependpath]$(GOBIN)'
      echo '##vso[task.prependpath]$(GOROOT)/bin'
    name: "GoEnv"
    displayName: "Set up the Go environment"

  - task: KubectlInstaller@0
    inputs:
      kubectlVersion: latest

  - task: AzureCLI@2
    inputs:
      azureSubscription: $(ACN_TEST_SERVICE_CONNECTION)
      scriptLocation: "inlineScript"
      scriptType: "bash"
      addSpnToEnvironment: true
      inlineScript: |
        set -ex
        source ./.pipelines/multitenancy/scripts/utils.sh
        export_envVars ${{ parameters.scenario }} 
        make -C ./hack/aks set-kubeconf AZCLI=az CLUSTER=${{ parameters.clusterName }} GROUP=$RG
    name: "kubeconfig"
    displayName: "Set Kubeconfig"

  - task: AzureCLI@2
    inputs:
      azureSubscription: $(ACN_TEST_SERVICE_CONNECTION)
      scriptLocation: "inlineScript"
      scriptType: "bash"
      addSpnToEnvironment: true
      inlineScript: |
        set -ex
        source ./.pipelines/multitenancy/scripts/utils.sh
        export_envVars ${{ parameters.scenario }} 
        echo "Deploying on Linux nodes"
        export CNI_IMAGE=$(make cni-image-name-and-tag-multiarch CNI_VERSION=$(make cni-version))
        make -C ./hack/aks set-kubeconf AZCLI=az CLUSTER=${{ parameters.clusterName }} GROUP=$RG
        echo "Keep CNS version up to date, grabbing pipeline parameter"
        CNS_IMAGE=$(make cns-image-name-and-tag-multiarch)
        sed -i '/containers:/{n;n;s/\(image\).*/\1: '"${CNS_IMAGE//\//\\/}"'/}' ./test/integration/manifests/cns/daemonset-linux.yaml
        sed -i '/initContainers:/{n;n;s/\(image\).*/\1: '"${CNI_IMAGE//\//\\/}"'/}' ./test/integration/manifests/cns/daemonset-linux.yaml
        sed -i '/- name: cni-installer/,/volumeMounts:/ {    
          /command: \["\/dropgz"\]/!b; a \ \ \ \ \ \ \ \ \ \ args:\n\ \ \ \ \ \ \ \ \ \ \ \ - deploy\n\ \ \ \ \ \ \ \ \ \ \ \ - --skip-verify\n\ \ \ \ \ \ \ \ \ \ \ \ - azure-vnet\n\ \ \ \ \ \ \ \ \ \ \ \ - -o\n\ \ \ \ \ \ \ \ \ \ \ \ - /opt/cni/bin/azure-vnet\n\ \ \ \ \ \ \ \ \ \ \ \ - azure-vnet-telemetry\n\ \ \ \ \ \ \ \ \ \ \ \ - -o\n\ \ \ \ \ \ \ \ \ \ \ \ - /opt/cni/bin/azure-vnet-telemetry
        }' ./test/integration/manifests/cns/daemonset-linux.yaml
        kubectl apply -f ./test/integration/manifests/cns/daemonset-linux.yaml
        kubectl rollout status daemonset/azure-cns -n kube-system
        kubectl get pod -A
    name: "UpdateCNIandCNSVersion"
    displayName: "Update CNI and CNS Version"

  - task: AzureCLI@2
    name: runSwiftv2Tests
    displayName: "Run Tests"
    inputs:
      azureSubscription: $(ACN_TEST_SERVICE_CONNECTION)
      addSpnToEnvironment: true
      scriptType: "bash"
      scriptLocation: "inlineScript"
      inlineScript: |
        set -xe

        bash .pipelines/multitenancy/scripts/az-login.sh \
          --service-principal "$servicePrincipalId" \
          --id-token "$idToken" \
          --tenant "$tenantId"

        bash .pipelines/multitenancy/scripts/run-tests.sh \
          --test-dir "$(System.DefaultWorkingDirectory)/.pipelines/multitenancy/scripts" \
          --mt-test-cluster ${{ parameters.clusterName }} \
          --scenario ${{ parameters.scenario }}

