trigger:
- master

variables:
- name: VNET_NAME
  value: npm-vnet
- name: NUM_PARALLEL_JOBS_FOR_STRESS_TEST
  value: "3"

jobs:
- job: setup
  displayName: "Configure Test Environment"
  pool:
    name: $(BUILD_POOL_NAME_DEFAULT)
    demands: 
    - agent.os -equals Linux
    - Role -equals Build
  steps:

  - checkout: self

  - script: |
      go version
      go env
      which go
      echo $PATH
      mkdir -p '$(GOBIN)'
      mkdir -p '$(GOPATH)/pkg'
      BUILD_NUMBER=$(Build.BuildNumber)
      RG=kubernetes-$(echo "npm-conformance-`date "+%Y-%m-%d-%S"`")
      TAG=$(make version)-conformance-test
      echo "Resource group: $RG"
      echo "Image tag: $TAG"

      echo "##vso[task.setvariable variable=RESOURCE_GROUP;isOutput=true;]$RG"
      echo "##vso[task.setvariable variable=TAG;isOutput=true;]$TAG"

    name: "EnvironmentalVariables"
    displayName: "Set environmental variables"
    condition: always()

- job: Build_test
  displayName: "Build NPM and Kubernetes Test Suite"
  pool:
    name: $(BUILD_POOL_NAME_DEFAULT)
    demands:
    - agent.os -equals Linux
    - Role -equals Build
  dependsOn: [setup]
  variables:
    GOBIN: "$(GOPATH)/bin" # Go binaries path
    GOPATH: "$(System.DefaultWorkingDirectory)/gopath" # Go workspace path
    RESOURCE_GROUP: $[ dependencies.setup.outputs['EnvironmentalVariables.RESOURCE_GROUP'] ]
    TAG: $[ dependencies.setup.outputs['EnvironmentalVariables.TAG'] ]

  steps:
  - script: |
      rm -rf ./*
    displayName: "Set up OS environment"

  - checkout: self

  - task: Docker@2
    displayName: Docker Login
    inputs:
      containerRegistry: $(ACR_SERVICE_CONNECTION)
      command: 'login'
      addPipelineData: false

  - script: |
      echo Tag: $(TAG)
      echo ResourceGroup: $(RESOURCE_GROUP)
      make npm-image TAG=$(TAG) 
      make npm-image-push TAG=$(TAG)
    displayName: 'Build and Push NPM Image'

  - task: Docker@2
    displayName: Docker Logout
    inputs:
      containerRegistry: $(ACR_SERVICE_CONNECTION)
      command: 'logout'
      addPipelineData: false

  - script: git clone https://github.com/vakalapa/kubernetes.git
    displayName: 'Clone Kubernetes Repo'
  - bash: |
      cd kubernetes
      git checkout vakr/sleepinnpmtests
      export PATH=$PATH:/usr/local/go/bin/
      make WHAT=test/e2e/e2e.test
    displayName: 'Build Kubernetes e2e.test'
  - publish: $(System.DefaultWorkingDirectory)/kubernetes/_output/local/bin/linux/amd64
    artifact: Test

- job: Create_RG
  displayName: "Create AKS Resource Group"
  pool:
    name: $(BUILD_POOL_NAME_DEFAULT)
    demands: 
    - agent.os -equals Linux
    - Role -equals Build
  dependsOn: [setup]
  variables:
    RESOURCE_GROUP: $[ dependencies.setup.outputs['EnvironmentalVariables.RESOURCE_GROUP'] ]
  steps:
  - script: |
      sudo rm -rf ./*
    displayName: "Set up OS environment"

  - checkout: self

  - task: AzureCLI@2
    displayName: "Deploy"
    inputs:
      azureSubscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az group create -n $(RESOURCE_GROUP) -l $(LOCATION) -o table
        echo created RG $(RESOURCE_GROUP) in $(LOCATION)
        az version

- job: Create_Cluster_and_Run_Test
  timeoutInMinutes: 360
  displayName: "Run Kubernetes Network Policy Test Suite"
  strategy:
    matrix:
      v1-default:
        AZURE_CLUSTER: 'v1-default-cluster'
        PROFILE: 'v1-default'
        IS_STRESS_TEST: 'false'
      v2-default:
        AZURE_CLUSTER: 'v2-default-cluster'
        PROFILE: 'v2-default'
        IS_STRESS_TEST: 'false'
      v2-default-stress:
        AZURE_CLUSTER: 'v2-default-stress-cluster'
        PROFILE: 'v2-default'
        IS_STRESS_TEST: 'true'
  pool:
    name: $(BUILD_POOL_NAME_DEFAULT)
    demands: 
    - agent.os -equals Linux
    - Role -equals Build
  dependsOn: [Create_RG, Build_test, setup]
  variables:
    RESOURCE_GROUP: $[ dependencies.setup.outputs['EnvironmentalVariables.RESOURCE_GROUP'] ]
    TAG: $[ dependencies.setup.outputs['EnvironmentalVariables.TAG'] ]
    FQDN: empty
  steps:
  - checkout: none
  - download: current
    artifact: Test
  - task: AzureCLI@2
    displayName: "Deploy NPM to Test Cluster"
    inputs:
      azureSubscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az aks create --no-ssh-key \
          --resource-group $(RESOURCE_GROUP) \
          --name $(AZURE_CLUSTER) \
          --network-plugin azure

        echo Cluster $(AZURE_CLUSTER)
        echo Resource $(RESOURCE_GROUP)

        az aks get-credentials -n $(AZURE_CLUSTER) -g $(RESOURCE_GROUP) --file ./kubeconfig
        # get kubectl 
        curl -LO https://dl.k8s.io/release/v1.20.0/bin/linux/amd64/kubectl
        chmod +x kubectl

        # deploy azure-npm
        ./kubectl --kubeconfig=./kubeconfig apply -f https://raw.githubusercontent.com/Azure/azure-container-networking/master/npm/azure-npm.yaml

        # swap azure-npm image with one built during run
        ./kubectl --kubeconfig=./kubeconfig set image daemonset/azure-npm -n kube-system azure-npm=$IMAGE_REGISTRY/azure-npm:$(TAG)

        # swap NPM profile with one specified as parameter
        ./kubectl --kubeconfig=./kubeconfig apply -f https://raw.githubusercontent.com/Azure/azure-container-networking/master/npm/profiles/$(PROFILE).yaml
        ./kubectl --kubeconfig=./kubeconfig rollout restart ds azure-npm -n kube-system

        ./kubectl --kubeconfig=./kubeconfig describe daemonset azure-npm -n kube-system

        FQDN=`az aks show -n $(AZURE_CLUSTER) -g $(RESOURCE_GROUP) --query fqdn -o tsv`
        echo "##vso[task.setvariable variable=FQDN]$FQDN"

  - bash: |
      echo "sleeping 3 minutes to allow NPM pods to restart"
      sleep 180

      ## create the output folder and include the kubeconfig there
      npmLogsFolder=$(System.DefaultWorkingDirectory)/npmLogs_$(AZURE_CLUSTER)
      mkdir -p $npmLogsFolder
      cp ./kubeconfig $npmLogsFolder/kubeconfig

      ## write to all NPM pod logs in the background (do this in the background instead of after to make sure the logs aren't truncated)
      npmPodList=`kubectl --kubeconfig=./kubeconfig get pods -n kube-system | grep npm | awk '{print $1}'`
      echo "Found NPM pods: $npmPodList"
      for npmPod in $npmPodList; do
          ./kubectl --kubeconfig=./kubeconfig logs -n kube-system $npmPod -f > $npmLogsFolder/$npmPod-logs.txt &
      done

      ## Run all Conformance tests in the background
      echo $FQDN
      chmod +x $(Pipeline.Workspace)/Test/e2e.test
      runConformance () {
          KUBERNETES_SERVICE_HOST="$FQDN" KUBERNETES_SERVICE_PORT=443 $(Pipeline.Workspace)/Test/e2e.test --provider=local --ginkgo.focus="NetworkPolicy" --ginkgo.skip="SCTP" --kubeconfig=./kubeconfig
          # there can't be a command after e2e.test because the exit code is important
      }

      exitCode=0
      if [ $(IS_STRESS_TEST) == "true" ]; then
          echo "Running $NUM_PARALLEL_JOBS_FOR_STRESS_TEST conformance tests at once and writing outputs to files"
          declare -a conformancePIDs
          for round in $(seq 1 $NUM_PARALLEL_JOBS_FOR_STRESS_TEST); do
              # for each iteration, run the conformance test and echos in the background, and write the output of the conformance test to a file
              echo "starting conformance test #$round" && \
                  runConformance > $npmLogsFolder/conformance-results-$round && \
                  echo "finished conformance test #$round" &
              pidOfConformanceTest=$!
              conformancePIDs+=($pidOfConformanceTest)
          done

          # wait until all conformance tests finish and take note of any failed tests
          for round in $(seq 1 $NUM_PARALLEL_JOBS_FOR_STRESS_TEST); do
              i=$((round-1))
              wait ${conformancePIDs[$i]}
              exitCode=$?
              if [ $exitCode != 0 ]; then
                  echo "conformance test #$round failed"
                  break
              fi
          done
      else
          # run the conformance test in the foreground and write the output to stdout and a file
          runConformance > $npmLogsFolder/conformance-results
          exitCode=$?
      fi
      # kill the background processes (the logs) that have this process' pid (i.e. $$) as a parent
      pkill -P $$
      exit $exitCode
    displayName: "Run Test Suite and Get Logs"
    
  - publish: $(System.DefaultWorkingDirectory)/npmLogs_$(AZURE_CLUSTER)
    condition: always()
    artifact: NpmLogs_$(AZURE_CLUSTER)

- job: Clean_up
  displayName: "Cleanup"
  pool:
    name: $(BUILD_POOL_NAME_DEFAULT)
    demands: 
    - agent.os -equals Linux
    - Role -equals Build
  dependsOn: [Create_Cluster_and_Run_Test, setup]
  variables:
    RESOURCE_GROUP: $[ dependencies.setup.outputs['EnvironmentalVariables.RESOURCE_GROUP'] ]
  steps:
    - checkout: none
    - task: AzureCLI@2
      displayName: "Delete Test Cluster Resource Group"
      inputs:
        azureSubscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo Deleting $(RESOURCE_GROUP)
          az group delete -n $(RESOURCE_GROUP) --yes
