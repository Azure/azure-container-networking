parameters:
  name: ""
  clusterDefinition: ""
  clusterDefinitionCniTypeKey: ""
  clusterDefinitionCniBuildOS: ""
  clusterDefinitionCniBuildExt: ""

steps:
  - bash: |
      go version
      go env
      mkdir -p '$(GOBIN)'
      mkdir -p '$(GOPATH)/pkg'
      mkdir -p '$(modulePath)'


      cd '$(modulePath)'
      echo Currently set AKS-Engine Version '$(AKS_ENGINE_VERSION)'
      if [ -z '$(AKS_ENGINE_VERSION)' ]
      then
        echo Found set AKS-Engine version '$(AKS_ENGINE_VERSION)'...
        export aksEVersion=$(curl -L -s -H 'Accept: application/json' https://github.com/Azure/aks-engine/releases/latest | sed -e 's/.*"tag_name":"\([^"]*\)".*/\1/')
      else
        echo No AKS-Engine version set, using latest...
        export aksEVersion='$(AKS_ENGINE_VERSION)'
      fi
      echo Using AKS-Engine version $aksEVersion

      # move source to current directory
      mv aks-engine-*/* .

      # download binary
      wget https://github.com/Azure/aks-engine/releases/download/$aksEVersion/aks-engine-$aksEVersion-linux-amd64.tar.gz
      mkdir ./bin

      #extract binary
      tar -zxvf aks-engine-$aksEVersion-linux-amd64.tar.gz -C bin
      mv ./bin/aks-engine-*/* ./bin/
      echo '##vso[task.prependpath]$(GOBIN)'
      echo '##vso[task.prependpath]$(GOROOT)/bin'
    name: "GoEnv"
    displayName: "Set up the Go environment"

  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: current
      artifactName: clusterdefinitions
      targetPath: "$(modulePath)"
      #buildType: 'current' # Options: current, specific
      #project: # Required when buildType == Specific

  - checkout: self
    clean: true
    fetchDepth: 1

  - bash: |
      ls -lah
      echo Config: '${{ parameters.clusterDefinition }}'

      contents="$(jq '.properties.windowsProfile.imageReference.name = $(imageName)-$(Build.SourceVersion)-test' '${{ parameters.clusterDefinition }}' )" && echo ${contents} | jq . > '${{ parameters.clusterDefinition }}'
      contents="$(jq '.properties.windowsProfile.imageReference.resourceGroup = $(resourceGroup)' '${{ parameters.clusterDefinition }}' )" && echo ${contents} | jq . > '${{ parameters.clusterDefinition }}'
      contents="$(jq '.properties.windowsProfile.imageReference.subscriptionID = $(subscriptionID)' '${{ parameters.clusterDefinition }}' )" && echo ${contents} | jq . > '${{ parameters.clusterDefinition }}'

      echo "Running E2E tests against a cluster built with the following API model:" 
      cp ${{ parameters.clusterDefinition }} clusterDefinition.json
    displayName: Configure AKS-Engine
    workingDirectory: "$(modulePath)"

  - task: AzureCLI@1
    inputs:
      azureSubscription: $(AKS_ENGINE_SERVICE_CONNECTION)
      scriptLocation: "inlineScript"
      addSpnToEnvironment: true
      workingDirectory: "$(modulePath)"
      inlineScript: |
        export CLIENT_ID=$servicePrincipalId
        export CLIENT_SECRET=$servicePrincipalKey 
        
        az group create \
          --location $LOCATION \
          --name npm-win-cyclonus-$(Build.SourceVersion)

        ./bin/aks-engine deploy \
          --subscription-id $SUBSCRIPTION_ID  \
          --client-id $CLIENT_ID \
          --client-secret $CLIENT_SECRET \
          --dns-prefix azure-npm-$(Build.SourceVersion)  \
          --resource-group npm-win-cyclonus-$(Build.SourceVersion) \
          --location $LOCATION \
          --api-model '${{ parameters.clusterDefinition }}' \
          --force-overwrite

    name: DeployAKSEngine
    displayName: Run AKS-Engine E2E Tests

  - task: CopyFiles@2
    inputs:
      sourceFolder: "$(modulePath)/_output"
      targetFolder: $(Build.ArtifactStagingDirectory)/${{ parameters.name }}
    condition: always()

  - task: PublishBuildArtifacts@1
    inputs:
      artifactName: ${{ parameters.name }}
      pathtoPublish: "$(Build.ArtifactStagingDirectory)/${{ parameters.name }}"
    condition: always()
