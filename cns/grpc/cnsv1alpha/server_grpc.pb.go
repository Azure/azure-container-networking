// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: cns/grpc/proto/server.proto

package cnsv1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CNSService_SetOrchestratorInfo_FullMethodName = "/cns.CNSService/SetOrchestratorInfo"
	CNSService_GetNodeInfo_FullMethodName         = "/cns.CNSService/GetNodeInfo"
)

// CNSServiceClient is the client API for CNSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CNSServiceClient interface {
	// Sets the orchestrator information for a node.
	SetOrchestratorInfo(ctx context.Context, in *SetOrchestratorInfoRequest, opts ...grpc.CallOption) (*SetOrchestratorInfoResponse, error)
	// Retrieves detailed information about a specific node.
	// Primarily used for health checks.
	GetNodeInfo(ctx context.Context, in *NodeInfoRequest, opts ...grpc.CallOption) (*NodeInfoResponse, error)
}

type cNSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCNSServiceClient(cc grpc.ClientConnInterface) CNSServiceClient {
	return &cNSServiceClient{cc}
}

func (c *cNSServiceClient) SetOrchestratorInfo(ctx context.Context, in *SetOrchestratorInfoRequest, opts ...grpc.CallOption) (*SetOrchestratorInfoResponse, error) {
	out := new(SetOrchestratorInfoResponse)
	err := c.cc.Invoke(ctx, CNSService_SetOrchestratorInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNSServiceClient) GetNodeInfo(ctx context.Context, in *NodeInfoRequest, opts ...grpc.CallOption) (*NodeInfoResponse, error) {
	out := new(NodeInfoResponse)
	err := c.cc.Invoke(ctx, CNSService_GetNodeInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CNSServiceServer is the server API for CNSService service.
// All implementations must embed UnimplementedCNSServiceServer
// for forward compatibility
type CNSServiceServer interface {
	// Sets the orchestrator information for a node.
	SetOrchestratorInfo(context.Context, *SetOrchestratorInfoRequest) (*SetOrchestratorInfoResponse, error)
	// Retrieves detailed information about a specific node.
	// Primarily used for health checks.
	GetNodeInfo(context.Context, *NodeInfoRequest) (*NodeInfoResponse, error)
	mustEmbedUnimplementedCNSServiceServer()
}

// UnimplementedCNSServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCNSServiceServer struct {
}

func (UnimplementedCNSServiceServer) SetOrchestratorInfo(context.Context, *SetOrchestratorInfoRequest) (*SetOrchestratorInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrchestratorInfo not implemented")
}
func (UnimplementedCNSServiceServer) GetNodeInfo(context.Context, *NodeInfoRequest) (*NodeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeInfo not implemented")
}
func (UnimplementedCNSServiceServer) mustEmbedUnimplementedCNSServiceServer() {}

// UnsafeCNSServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CNSServiceServer will
// result in compilation errors.
type UnsafeCNSServiceServer interface {
	mustEmbedUnimplementedCNSServiceServer()
}

func RegisterCNSServiceServer(s grpc.ServiceRegistrar, srv CNSServiceServer) {
	s.RegisterService(&CNSService_ServiceDesc, srv)
}

func _CNSService_SetOrchestratorInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOrchestratorInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNSServiceServer).SetOrchestratorInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CNSService_SetOrchestratorInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNSServiceServer).SetOrchestratorInfo(ctx, req.(*SetOrchestratorInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNSService_GetNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNSServiceServer).GetNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CNSService_GetNodeInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNSServiceServer).GetNodeInfo(ctx, req.(*NodeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CNSService_ServiceDesc is the grpc.ServiceDesc for CNSService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CNSService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cns.CNSService",
	HandlerType: (*CNSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetOrchestratorInfo",
			Handler:    _CNSService_SetOrchestratorInfo_Handler,
		},
		{
			MethodName: "GetNodeInfo",
			Handler:    _CNSService_GetNodeInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cns/grpc/proto/server.proto",
}
