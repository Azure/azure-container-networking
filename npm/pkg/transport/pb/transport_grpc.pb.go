// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GRPCDataplaneClient is the client API for GRPCDataplane service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCDataplaneClient interface {
	CreateIPSets(ctx context.Context, in *ListValue, opts ...grpc.CallOption) (*NilResponse, error)
}

type gRPCDataplaneClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCDataplaneClient(cc grpc.ClientConnInterface) GRPCDataplaneClient {
	return &gRPCDataplaneClient{cc}
}

func (c *gRPCDataplaneClient) CreateIPSets(ctx context.Context, in *ListValue, opts ...grpc.CallOption) (*NilResponse, error) {
	out := new(NilResponse)
	err := c.cc.Invoke(ctx, "/pb.GRPCDataplane/CreateIPSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCDataplaneServer is the server API for GRPCDataplane service.
// All implementations must embed UnimplementedGRPCDataplaneServer
// for forward compatibility
type GRPCDataplaneServer interface {
	CreateIPSets(context.Context, *ListValue) (*NilResponse, error)
	mustEmbedUnimplementedGRPCDataplaneServer()
}

// UnimplementedGRPCDataplaneServer must be embedded to have forward compatible implementations.
type UnimplementedGRPCDataplaneServer struct {
}

func (UnimplementedGRPCDataplaneServer) CreateIPSets(context.Context, *ListValue) (*NilResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIPSets not implemented")
}
func (UnimplementedGRPCDataplaneServer) mustEmbedUnimplementedGRPCDataplaneServer() {}

// UnsafeGRPCDataplaneServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCDataplaneServer will
// result in compilation errors.
type UnsafeGRPCDataplaneServer interface {
	mustEmbedUnimplementedGRPCDataplaneServer()
}

func RegisterGRPCDataplaneServer(s grpc.ServiceRegistrar, srv GRPCDataplaneServer) {
	s.RegisterService(&GRPCDataplane_ServiceDesc, srv)
}

func _GRPCDataplane_CreateIPSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCDataplaneServer).CreateIPSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GRPCDataplane/CreateIPSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCDataplaneServer).CreateIPSets(ctx, req.(*ListValue))
	}
	return interceptor(ctx, in, info, handler)
}

// GRPCDataplane_ServiceDesc is the grpc.ServiceDesc for GRPCDataplane service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPCDataplane_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GRPCDataplane",
	HandlerType: (*GRPCDataplaneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIPSets",
			Handler:    _GRPCDataplane_CreateIPSets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transport.proto",
}
