// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ipset.proto

package api

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SetType int32

const (
	SetType_Unknown                  SetType = 0
	SetType_NameSpace                SetType = 1
	SetType_KeyLabelOfNameSpace      SetType = 2
	SetType_KeyValueLabelOfNameSpace SetType = 3
	SetType_KeyLabelOfPod            SetType = 4
	SetType_KeyValueLabelOfPod       SetType = 5
	SetType_NamedPorts               SetType = 6
	SetType_NestedLabelOfPod         SetType = 7
	SetType_CIDRBlocks               SetType = 8
)

var SetType_name = map[int32]string{
	0: "Unknown",
	1: "NameSpace",
	2: "KeyLabelOfNameSpace",
	3: "KeyValueLabelOfNameSpace",
	4: "KeyLabelOfPod",
	5: "KeyValueLabelOfPod",
	6: "NamedPorts",
	7: "NestedLabelOfPod",
	8: "CIDRBlocks",
}

var SetType_value = map[string]int32{
	"Unknown":                  0,
	"NameSpace":                1,
	"KeyLabelOfNameSpace":      2,
	"KeyValueLabelOfNameSpace": 3,
	"KeyLabelOfPod":            4,
	"KeyValueLabelOfPod":       5,
	"NamedPorts":               6,
	"NestedLabelOfPod":         7,
	"CIDRBlocks":               8,
}

func (x SetType) String() string {
	return proto.EnumName(SetType_name, int32(x))
}

func (SetType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_abe00ff85a302de1, []int{0}
}

type IPSet struct {
	Name       string  `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	HashedName string  `protobuf:"bytes,2,opt,name=HashedName,proto3" json:"HashedName,omitempty"`
	Type       SetType `protobuf:"varint,3,opt,name=Type,proto3,enum=api.SetType" json:"Type,omitempty"`
	// IpPodKey is used for setMaps to store Ips and ports as keys
	// and podKey as value
	IpPodKey map[string]string `protobuf:"bytes,4,rep,name=IpPodKey,proto3" json:"IpPodKey,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// This is used for listMaps to store child IP Sets
	IPSet                map[string]*IPSet `protobuf:"bytes,5,rep,name=IPSet,proto3" json:"IPSet,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ReferCount           int32             `protobuf:"varint,6,opt,name=ReferCount,proto3" json:"ReferCount,omitempty"`
	Size                 int32             `protobuf:"varint,7,opt,name=Size,proto3" json:"Size,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *IPSet) Reset()         { *m = IPSet{} }
func (m *IPSet) String() string { return proto.CompactTextString(m) }
func (*IPSet) ProtoMessage()    {}
func (*IPSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_abe00ff85a302de1, []int{0}
}

func (m *IPSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPSet.Unmarshal(m, b)
}
func (m *IPSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPSet.Marshal(b, m, deterministic)
}
func (m *IPSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPSet.Merge(m, src)
}
func (m *IPSet) XXX_Size() int {
	return xxx_messageInfo_IPSet.Size(m)
}
func (m *IPSet) XXX_DiscardUnknown() {
	xxx_messageInfo_IPSet.DiscardUnknown(m)
}

var xxx_messageInfo_IPSet proto.InternalMessageInfo

func (m *IPSet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *IPSet) GetHashedName() string {
	if m != nil {
		return m.HashedName
	}
	return ""
}

func (m *IPSet) GetType() SetType {
	if m != nil {
		return m.Type
	}
	return SetType_Unknown
}

func (m *IPSet) GetIpPodKey() map[string]string {
	if m != nil {
		return m.IpPodKey
	}
	return nil
}

func (m *IPSet) GetIPSet() map[string]*IPSet {
	if m != nil {
		return m.IPSet
	}
	return nil
}

func (m *IPSet) GetReferCount() int32 {
	if m != nil {
		return m.ReferCount
	}
	return 0
}

func (m *IPSet) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func init() {
	proto.RegisterEnum("api.SetType", SetType_name, SetType_value)
	proto.RegisterType((*IPSet)(nil), "api.IPSet")
	proto.RegisterMapType((map[string]*IPSet)(nil), "api.IPSet.IPSetEntry")
	proto.RegisterMapType((map[string]string)(nil), "api.IPSet.IpPodKeyEntry")
}

func init() { proto.RegisterFile("ipset.proto", fileDescriptor_abe00ff85a302de1) }

var fileDescriptor_abe00ff85a302de1 = []byte{
	// 362 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0x4b, 0x6f, 0xda, 0x40,
	0x10, 0xae, 0x5f, 0x18, 0xc6, 0x05, 0xb9, 0x53, 0xda, 0xae, 0x50, 0x85, 0xac, 0x9e, 0xac, 0x56,
	0xf2, 0x81, 0xf6, 0x50, 0xb5, 0xb7, 0x42, 0xa5, 0x22, 0x2a, 0x6a, 0x99, 0x26, 0x77, 0x83, 0x07,
	0xc5, 0x82, 0x78, 0x2d, 0x7b, 0x49, 0xe4, 0xfc, 0xb7, 0xfc, 0xae, 0x5c, 0xa3, 0x5d, 0x4c, 0xec,
	0x3c, 0x2e, 0xd6, 0xf8, 0x7b, 0xcc, 0x7c, 0x33, 0x5a, 0x70, 0xd2, 0xbc, 0x24, 0x11, 0xe4, 0x05,
	0x17, 0x1c, 0x8d, 0x38, 0x4f, 0x3f, 0xdd, 0xe9, 0x60, 0xcd, 0xc3, 0x15, 0x09, 0x44, 0x30, 0x97,
	0xf1, 0x25, 0x31, 0xcd, 0xd3, 0xfc, 0x5e, 0xa4, 0x6a, 0x1c, 0x03, 0xfc, 0x89, 0xcb, 0x0b, 0x4a,
	0x14, 0xa3, 0x2b, 0xa6, 0x85, 0xa0, 0x07, 0xe6, 0xff, 0x2a, 0x27, 0x66, 0x78, 0x9a, 0x3f, 0x98,
	0xbc, 0x0e, 0xe2, 0x3c, 0x0d, 0x4a, 0x12, 0x12, 0x8b, 0x14, 0x83, 0xdf, 0xa0, 0x3b, 0xcf, 0x43,
	0x9e, 0x2c, 0xa8, 0x62, 0xa6, 0x67, 0xf8, 0xce, 0x84, 0x29, 0x95, 0x9a, 0x19, 0x9c, 0xa8, 0xdf,
	0x99, 0x28, 0xaa, 0xe8, 0x41, 0x89, 0x5f, 0xea, 0x50, 0xcc, 0x52, 0x96, 0x77, 0x6d, 0x8b, 0xfc,
	0x1e, 0xf5, 0x75, 0xf0, 0x31, 0x40, 0x44, 0x5b, 0x2a, 0xa6, 0xfc, 0x90, 0x09, 0xd6, 0xf1, 0x34,
	0xdf, 0x8a, 0x5a, 0x88, 0x5c, 0x6c, 0x95, 0xde, 0x10, 0xb3, 0x15, 0xa3, 0xea, 0xd1, 0x4f, 0xe8,
	0x3f, 0x9a, 0x8d, 0x2e, 0x18, 0x3b, 0xaa, 0xea, 0xe5, 0x65, 0x89, 0x43, 0xb0, 0xae, 0xe2, 0xfd,
	0xe1, 0xb4, 0xf6, 0xf1, 0xe7, 0x87, 0xfe, 0x5d, 0x1b, 0xcd, 0x00, 0x9a, 0x14, 0x2f, 0x38, 0xbd,
	0xb6, 0xd3, 0x99, 0x40, 0x93, 0xbe, 0xd5, 0xe5, 0xf3, 0xad, 0x06, 0x76, 0x7d, 0x2b, 0x74, 0xc0,
	0x3e, 0xcb, 0x76, 0x19, 0xbf, 0xce, 0xdc, 0x57, 0xd8, 0x87, 0x9e, 0x3c, 0xee, 0x2a, 0x8f, 0x37,
	0xe4, 0x6a, 0xf8, 0x01, 0xde, 0x2e, 0xa8, 0xfa, 0x1b, 0xaf, 0x69, 0xff, 0x6f, 0xdb, 0x10, 0x3a,
	0x7e, 0x04, 0xb6, 0xa0, 0xea, 0x5c, 0x36, 0x7c, 0xc6, 0x1a, 0xf8, 0x06, 0xfa, 0x8d, 0x2d, 0xe4,
	0x89, 0x6b, 0xe2, 0x7b, 0xc0, 0x27, 0x06, 0x89, 0x5b, 0x38, 0x00, 0x90, 0xce, 0x24, 0xe4, 0x85,
	0x28, 0xdd, 0x0e, 0x0e, 0xc1, 0x5d, 0x52, 0x29, 0x28, 0x69, 0xa9, 0x6c, 0xa9, 0x9a, 0xce, 0x67,
	0xd1, 0xaf, 0x3d, 0xdf, 0xec, 0x4a, 0xb7, 0xbb, 0xee, 0xa8, 0x57, 0xf4, 0xf5, 0x3e, 0x00, 0x00,
	0xff, 0xff, 0xdd, 0xfc, 0x83, 0x76, 0x54, 0x02, 0x00, 0x00,
}
